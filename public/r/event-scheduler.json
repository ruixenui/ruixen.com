{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-scheduler",
  "type": "registry:ui",
  "title": "Event Scheduler",
  "description": "A full-featured event scheduler with event creation and management.",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "popover",
    "select",
    "input",
    "card"
  ],
  "files": [
    {
      "path": "registry/ruixenui/event-scheduler.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { format } from \"date-fns\"\r\nimport { Calendar as CalendarIcon, Clock, PlusCircle, CalendarDays, Trash2 } from \"lucide-react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Calendar } from \"@/components/ui/calendar\"\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface Event {\r\n  id: number\r\n  title: string\r\n  date: Date\r\n}\r\n\r\ninterface EventSchedulerProps {\r\n  defaultEvents?: Event[]\r\n  defaultTitle?: string\r\n  defaultDate?: Date\r\n  defaultHour?: string\r\n  defaultMinute?: string\r\n  defaultAMPM?: \"AM\" | \"PM\"\r\n  onAddEvent?: (event: Event) => void\r\n  onDeleteEvent?: (id: number) => void\r\n  disabled?: boolean\r\n}\r\n\r\nconst EventScheduler: React.FC<EventSchedulerProps> = ({\r\n  defaultEvents = [],\r\n  defaultTitle = \"\",\r\n  defaultDate,\r\n  defaultHour = \"12\",\r\n  defaultMinute = \"00\",\r\n  defaultAMPM = \"AM\",\r\n  onAddEvent,\r\n  onDeleteEvent,\r\n  disabled = false,\r\n}) => {\r\n  const [date, setDate] = React.useState<Date | undefined>(defaultDate)\r\n  const [hour, setHour] = React.useState(defaultHour)\r\n  const [minute, setMinute] = React.useState(defaultMinute)\r\n  const [ampm, setAmpm] = React.useState<\"AM\" | \"PM\">(defaultAMPM)\r\n  const [title, setTitle] = React.useState(defaultTitle)\r\n  const [events, setEvents] = React.useState<Event[]>(defaultEvents)\r\n\r\n  const handleAmpmChange = (value: string) => {\r\n    setAmpm(value as \"AM\" | \"PM\")\r\n  }\r\n\r\n  const selectedDateTime = React.useMemo(() => {\r\n    if (!date) return null\r\n    const d = new Date(date)\r\n    let h = parseInt(hour)\r\n    if (ampm === \"PM\" && h < 12) h += 12\r\n    if (ampm === \"AM\" && h === 12) h = 0\r\n    d.setHours(h, parseInt(minute), 0, 0)\r\n    return d\r\n  }, [date, hour, minute, ampm])\r\n\r\n  const handleAddEvent = () => {\r\n    if (!title || !selectedDateTime) return\r\n    const newEvent: Event = { id: Date.now(), title, date: selectedDateTime }\r\n    setEvents((prev) => [...prev, newEvent])\r\n    onAddEvent?.(newEvent)\r\n    setTitle(defaultTitle)\r\n    setDate(defaultDate)\r\n    setHour(defaultHour)\r\n    setMinute(defaultMinute)\r\n    setAmpm(defaultAMPM)\r\n  }\r\n\r\n  const handleDeleteEvent = (id: number) => {\r\n    setEvents((prev) => prev.filter((ev) => ev.id !== id))\r\n    onDeleteEvent?.(id)\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid md:grid-cols-2 gap-4\">\r\n      {/* Event Creation */}\r\n      <Card className=\"shadow-md rounded-2xl\">\r\n        <CardHeader className=\"p-3\">\r\n          <CardTitle className=\"flex items-center gap-2 text-normal\">\r\n            <CalendarDays className=\"h-5 w-5 text-primary\" />\r\n            Create Event\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"flex flex-col gap-4 p-3\">\r\n          {/* Title */}\r\n          <div className=\"flex flex-col gap-2\">\r\n            <label className=\"text-sm font-medium\">Event Title</label>\r\n            <Input\r\n              placeholder=\"Enter event title\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              disabled={disabled}\r\n            />\r\n          </div>\r\n\r\n          {/* Date Picker */}\r\n          <div className=\"flex flex-col gap-1 justify-center\">\r\n            <label className=\"text-sm font-medium\">Date</label>\r\n            <Popover>\r\n              <PopoverTrigger asChild>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  className={cn(\r\n                    \"w-full justify-start text-left font-normal\",\r\n                    !date && \"text-muted-foreground\"\r\n                  )}\r\n                  disabled={disabled}\r\n                >\r\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                  {date ? format(date, \"PPP\") : <span>Pick a date</span>}\r\n                </Button>\r\n              </PopoverTrigger>\r\n              <PopoverContent className=\"p-4\" side=\"bottom\" align=\"start\">\r\n                <Calendar\r\n                  mode=\"single\"\r\n                  selected={date}\r\n                  onSelect={setDate}\r\n                  initialFocus\r\n                  disabled={disabled}\r\n                />\r\n              </PopoverContent>\r\n            </Popover>\r\n          </div>\r\n\r\n          {/* Time Picker */}\r\n          <div className=\"flex flex-col gap-2\">\r\n            <label className=\"text-sm font-medium\">Time</label>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Clock className=\"h-5 w-5 text-muted-foreground\" />\r\n              <Select value={hour} onValueChange={setHour} disabled={disabled}>\r\n                <SelectTrigger className=\"w-[80px]\">\r\n                  <SelectValue placeholder=\"HH\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {Array.from({ length: 12 }, (_, i) => {\r\n                    const h = i + 1\r\n                    return (\r\n                      <SelectItem key={h} value={h.toString().padStart(2, \"0\")}>\r\n                        {h.toString().padStart(2, \"0\")}\r\n                      </SelectItem>\r\n                    )\r\n                  })}\r\n                </SelectContent>\r\n              </Select>\r\n\r\n              <span className=\"font-semibold\">:</span>\r\n\r\n              <Select value={minute} onValueChange={setMinute} disabled={disabled}>\r\n                <SelectTrigger className=\"w-[80px]\">\r\n                  <SelectValue placeholder=\"MM\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {[\"00\", \"15\", \"30\", \"45\"].map((m) => (\r\n                    <SelectItem key={m} value={m}>\r\n                      {m}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n\r\n              <Select value={ampm} onValueChange={handleAmpmChange} disabled={disabled}>\r\n                <SelectTrigger className=\"w-[80px]\">\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"AM\">AM</SelectItem>\r\n                  <SelectItem value=\"PM\">PM</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Add Button */}\r\n          <Button\r\n            onClick={handleAddEvent}\r\n            disabled={!title || !selectedDateTime || disabled}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            <PlusCircle className=\"h-4 w-4\" /> Add Event\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Event List */}\r\n      <Card className=\"shadow-md rounded-2xl\">\r\n        <CardHeader>\r\n          <CardTitle>Scheduled Events</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"flex flex-col gap-3\">\r\n          {events.length === 0 && (\r\n            <p className=\"text-sm text-muted-foreground\">No events scheduled</p>\r\n          )}\r\n          {events.map((ev) => (\r\n            <div\r\n              key={ev.id}\r\n              className=\"flex justify-between items-center border rounded-lg px-3 py-2\"\r\n            >\r\n              <div>\r\n                <span className=\"font-medium block\">{ev.title}</span>\r\n                <span className=\"text-sm text-muted-foreground\">\r\n                  {format(ev.date, \"PPP p\")}\r\n                </span>\r\n              </div>\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={() => handleDeleteEvent(ev.id)}\r\n                disabled={disabled}\r\n              >\r\n                <Trash2 className=\"h-4 w-4 text-red-500\" />\r\n              </Button>\r\n            </div>\r\n          ))}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EventScheduler\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/event-scheduler.tsx"
    }
  ]
}