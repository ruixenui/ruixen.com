{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-scheduler",
  "type": "registry:ui",
  "title": "Event Scheduler",
  "description": "A full-featured event scheduler with event creation and management.",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "popover",
    "select",
    "input",
    "card"
  ],
  "files": [
    {
      "path": "registry/ruixenui/event-scheduler.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { format } from \"date-fns\";\nimport {\n  Calendar as CalendarIcon,\n  Clock,\n  PlusCircle,\n  CalendarDays,\n  Trash2,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface Event {\n  id: number;\n  title: string;\n  date: Date;\n}\n\ninterface EventSchedulerProps {\n  defaultEvents?: Event[];\n  defaultTitle?: string;\n  defaultDate?: Date;\n  defaultHour?: string;\n  defaultMinute?: string;\n  defaultAMPM?: \"AM\" | \"PM\";\n  onAddEvent?: (event: Event) => void;\n  onDeleteEvent?: (id: number) => void;\n  disabled?: boolean;\n}\n\nconst EventScheduler: React.FC<EventSchedulerProps> = ({\n  defaultEvents = [],\n  defaultTitle = \"\",\n  defaultDate,\n  defaultHour = \"12\",\n  defaultMinute = \"00\",\n  defaultAMPM = \"AM\",\n  onAddEvent,\n  onDeleteEvent,\n  disabled = false,\n}) => {\n  const [date, setDate] = React.useState<Date | undefined>(defaultDate);\n  const [hour, setHour] = React.useState(defaultHour);\n  const [minute, setMinute] = React.useState(defaultMinute);\n  const [ampm, setAmpm] = React.useState<\"AM\" | \"PM\">(defaultAMPM);\n  const [title, setTitle] = React.useState(defaultTitle);\n  const [events, setEvents] = React.useState<Event[]>(defaultEvents);\n\n  const handleAmpmChange = (value: string) => {\n    setAmpm(value as \"AM\" | \"PM\");\n  };\n\n  const selectedDateTime = React.useMemo(() => {\n    if (!date) return null;\n    const d = new Date(date);\n    let h = parseInt(hour);\n    if (ampm === \"PM\" && h < 12) h += 12;\n    if (ampm === \"AM\" && h === 12) h = 0;\n    d.setHours(h, parseInt(minute), 0, 0);\n    return d;\n  }, [date, hour, minute, ampm]);\n\n  const handleAddEvent = () => {\n    if (!title || !selectedDateTime) return;\n    const newEvent: Event = { id: Date.now(), title, date: selectedDateTime };\n    setEvents((prev) => [...prev, newEvent]);\n    onAddEvent?.(newEvent);\n    setTitle(defaultTitle);\n    setDate(defaultDate);\n    setHour(defaultHour);\n    setMinute(defaultMinute);\n    setAmpm(defaultAMPM);\n  };\n\n  const handleDeleteEvent = (id: number) => {\n    setEvents((prev) => prev.filter((ev) => ev.id !== id));\n    onDeleteEvent?.(id);\n  };\n\n  return (\n    <div className=\"grid md:grid-cols-2 gap-4\">\n      {/* Event Creation */}\n      <Card className=\"shadow-md rounded-2xl\">\n        <CardHeader className=\"p-3\">\n          <CardTitle className=\"flex items-center gap-2 text-normal\">\n            <CalendarDays className=\"h-5 w-5 text-primary\" />\n            Create Event\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex flex-col gap-4 p-3\">\n          {/* Title */}\n          <div className=\"flex flex-col gap-2\">\n            <label className=\"text-sm font-medium\">Event Title</label>\n            <Input\n              placeholder=\"Enter event title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              disabled={disabled}\n            />\n          </div>\n\n          {/* Date Picker */}\n          <div className=\"flex flex-col gap-1 justify-center\">\n            <label className=\"text-sm font-medium\">Date</label>\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className={cn(\n                    \"w-full justify-start text-left font-normal\",\n                    !date && \"text-muted-foreground\",\n                  )}\n                  disabled={disabled}\n                >\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                  {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"p-4\" side=\"bottom\" align=\"start\">\n                <Calendar\n                  mode=\"single\"\n                  selected={date}\n                  onSelect={setDate}\n                  initialFocus\n                  disabled={disabled}\n                />\n              </PopoverContent>\n            </Popover>\n          </div>\n\n          {/* Time Picker */}\n          <div className=\"flex flex-col gap-2\">\n            <label className=\"text-sm font-medium\">Time</label>\n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5 text-muted-foreground\" />\n              <Select value={hour} onValueChange={setHour} disabled={disabled}>\n                <SelectTrigger className=\"w-[80px]\">\n                  <SelectValue placeholder=\"HH\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {Array.from({ length: 12 }, (_, i) => {\n                    const h = i + 1;\n                    return (\n                      <SelectItem key={h} value={h.toString().padStart(2, \"0\")}>\n                        {h.toString().padStart(2, \"0\")}\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n\n              <span className=\"font-semibold\">:</span>\n\n              <Select\n                value={minute}\n                onValueChange={setMinute}\n                disabled={disabled}\n              >\n                <SelectTrigger className=\"w-[80px]\">\n                  <SelectValue placeholder=\"MM\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {[\"00\", \"15\", \"30\", \"45\"].map((m) => (\n                    <SelectItem key={m} value={m}>\n                      {m}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select\n                value={ampm}\n                onValueChange={handleAmpmChange}\n                disabled={disabled}\n              >\n                <SelectTrigger className=\"w-[80px]\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"AM\">AM</SelectItem>\n                  <SelectItem value=\"PM\">PM</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Add Button */}\n          <Button\n            onClick={handleAddEvent}\n            disabled={!title || !selectedDateTime || disabled}\n            className=\"flex items-center gap-2\"\n          >\n            <PlusCircle className=\"h-4 w-4\" /> Add Event\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Event List */}\n      <Card className=\"shadow-md rounded-2xl\">\n        <CardHeader>\n          <CardTitle>Scheduled Events</CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex flex-col gap-3\">\n          {events.length === 0 && (\n            <p className=\"text-sm text-muted-foreground\">No events scheduled</p>\n          )}\n          {events.map((ev) => (\n            <div\n              key={ev.id}\n              className=\"flex justify-between items-center border rounded-lg px-3 py-2\"\n            >\n              <div>\n                <span className=\"font-medium block\">{ev.title}</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  {format(ev.date, \"PPP p\")}\n                </span>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => handleDeleteEvent(ev.id)}\n                disabled={disabled}\n              >\n                <Trash2 className=\"h-4 w-4 text-red-500\" />\n              </Button>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default EventScheduler;\n",
      "type": "registry:ui",
      "target": "components/ruixen/event-scheduler.tsx"
    }
  ]
}