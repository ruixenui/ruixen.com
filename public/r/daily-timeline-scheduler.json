{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "daily-timeline-scheduler",
  "type": "registry:ui",
  "title": "Daily Timeline Scheduler",
  "description": "A timeline-based daily scheduler with time slot management.",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button",
    "popover",
    "input",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/daily-timeline-scheduler.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { format, setHours, setMinutes } from \"date-fns\"\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardContent,\r\n} from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n} from \"@/components/ui/popover\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport {\r\n  Select,\r\n  SelectTrigger,\r\n  SelectValue,\r\n  SelectContent,\r\n  SelectItem,\r\n} from \"@/components/ui/select\"\r\nimport { Trash2, Pencil } from \"lucide-react\"\r\n\r\n// Event type\r\ntype Event = {\r\n  title: string\r\n  time: Date\r\n}\r\n\r\n// Props for configurability\r\ntype DailyTimelineProps = {\r\n  startHour?: number // e.g., 6 for 6AM\r\n  endHour?: number // e.g., 20 for 8PM\r\n  stepMinutes?: number // e.g., 60 (hourly), 30, 15\r\n  initialEvents?: Event[]\r\n  title?: string\r\n  onEventAdd?: (event: Event) => void\r\n  onEventUpdate?: (event: Event, index: number) => void\r\n  onEventDelete?: (event: Event, index: number) => void\r\n}\r\n\r\nexport default function DailyTimelineScheduler({\r\n  startHour = 6,\r\n  endHour = 20,\r\n  stepMinutes = 60,\r\n  initialEvents = [],\r\n  title = \"Daily Timeline\",\r\n  onEventAdd,\r\n  onEventUpdate,\r\n  onEventDelete,\r\n}: DailyTimelineProps) {\r\n  const [events, setEvents] = React.useState<Event[]>(initialEvents)\r\n  const [selectedHour, setSelectedHour] = React.useState<number | null>(null)\r\n  const [eventMinute, setEventMinute] = React.useState(\"00\")\r\n  const [ampm, setAmpm] = React.useState<\"AM\" | \"PM\">(\"AM\")\r\n  const [eventTitle, setEventTitle] = React.useState(\"\")\r\n  const [editIndex, setEditIndex] = React.useState<number | null>(null)\r\n\r\n  // Generate time slots based on startHour, endHour, stepMinutes\r\n  const timeSlots: { hour: number; minute: number }[] = []\r\n  for (let h = startHour; h <= endHour; h++) {\r\n    for (let m = 0; m < 60; m += stepMinutes) {\r\n      timeSlots.push({ hour: h, minute: m })\r\n    }\r\n  }\r\n\r\n  // Save or update event\r\n  const saveEvent = () => {\r\n    if (selectedHour === null || !eventTitle) return\r\n\r\n    let hour = selectedHour\r\n    if (ampm === \"PM\" && hour < 12) hour += 12\r\n    if (ampm === \"AM\" && hour === 12) hour = 0\r\n\r\n    const newTime = setMinutes(setHours(new Date(), hour), parseInt(eventMinute))\r\n    const newEvent = { title: eventTitle, time: newTime }\r\n\r\n    if (editIndex !== null) {\r\n      const updated = [...events]\r\n      updated[editIndex] = newEvent\r\n      setEvents(updated)\r\n      onEventUpdate?.(newEvent, editIndex)\r\n      setEditIndex(null)\r\n    } else {\r\n      setEvents((prev) => [...prev, newEvent])\r\n      onEventAdd?.(newEvent)\r\n    }\r\n\r\n    // Reset fields\r\n    setEventTitle(\"\")\r\n    setEventMinute(\"00\")\r\n    setAmpm(\"AM\")\r\n    setSelectedHour(null)\r\n  }\r\n\r\n  const deleteEvent = (index: number) => {\r\n    const ev = events[index]\r\n    setEvents((prev) => prev.filter((_, i) => i !== index))\r\n    onEventDelete?.(ev, index)\r\n  }\r\n\r\n  const startEdit = (index: number) => {\r\n    const ev = events[index]\r\n    setEventTitle(ev.title)\r\n    setEventMinute(format(ev.time, \"mm\"))\r\n    const h = parseInt(format(ev.time, \"hh\"))\r\n    const a = format(ev.time, \"a\") as \"AM\" | \"PM\"\r\n    setSelectedHour(h)\r\n    setAmpm(a)\r\n    setEditIndex(index)\r\n  }\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-xl mx-auto\">\r\n      <CardHeader>\r\n        <CardTitle>{title}</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"flex flex-col divide-y max-h-[500px] overflow-y-auto\">\r\n          {timeSlots.map(({ hour, minute }, idx) => {\r\n            const timeLabel = format(\r\n              setMinutes(setHours(new Date(), hour), minute),\r\n              \"h:mm a\"\r\n            )\r\n            const eventsAtTime = events.filter(\r\n              (e) => format(e.time, \"h:mm a\") === timeLabel\r\n            )\r\n            return (\r\n              <div key={idx} className=\"py-3\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"font-medium text-sm\">{timeLabel}</span>\r\n                  <Popover>\r\n                    <PopoverTrigger asChild>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => {\r\n                          setSelectedHour(hour > 12 ? hour - 12 : hour)\r\n                          setAmpm(hour >= 12 ? \"PM\" : \"AM\")\r\n                          setEditIndex(null)\r\n                        }}\r\n                      >\r\n                        + Add\r\n                      </Button>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent className=\"w-72 space-y-3\">\r\n                      <Input\r\n                        placeholder=\"Event title\"\r\n                        value={eventTitle}\r\n                        onChange={(e) => setEventTitle(e.target.value)}\r\n                      />\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Select value={eventMinute} onValueChange={setEventMinute}>\r\n                          <SelectTrigger className=\"w-[80px]\">\r\n                            <SelectValue />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {[\"00\", \"15\", \"30\", \"45\"].map((m) => (\r\n                              <SelectItem key={m} value={m}>\r\n                                {m}\r\n                              </SelectItem>\r\n                            ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                        <Select value={ampm} onValueChange={(value) => setAmpm(value as \"AM\" | \"PM\")}>\r\n                          <SelectTrigger className=\"w-[80px]\">\r\n                            <SelectValue />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            <SelectItem value=\"AM\">AM</SelectItem>\r\n                            <SelectItem value=\"PM\">PM</SelectItem>\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n                      <Button className=\"w-full\" onClick={saveEvent}>\r\n                        {editIndex !== null ? \"Update Event\" : \"Save Event\"}\r\n                      </Button>\r\n                    </PopoverContent>\r\n                  </Popover>\r\n                </div>\r\n\r\n                <div className=\"mt-2 space-y-2\">\r\n                  {eventsAtTime.map((ev, i) => {\r\n                    const index = events.findIndex(\r\n                      (e) =>\r\n                        e.title === ev.title &&\r\n                        format(e.time, \"h:mm a\") === format(ev.time, \"h:mm a\")\r\n                    )\r\n                    return (\r\n                      <div\r\n                        key={i}\r\n                        className=\"flex items-center justify-between rounded-md border p-2 text-sm\"\r\n                      >\r\n                        <span>\r\n                          {format(ev.time, \"h:mm a\")} - {ev.title}\r\n                        </span>\r\n                        <div className=\"flex gap-1\">\r\n                          <Button\r\n                            size=\"icon\"\r\n                            variant=\"ghost\"\r\n                            onClick={() => startEdit(index)}\r\n                          >\r\n                            <Pencil className=\"h-4 w-4\" />\r\n                          </Button>\r\n                          <Button\r\n                            size=\"icon\"\r\n                            variant=\"ghost\"\r\n                            onClick={() => deleteEvent(index)}\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  })}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\n// Example demo page usage\r\nexport function DemoDailyTimeline() {\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <DailyTimelineScheduler\r\n        startHour={8}\r\n        endHour={18}\r\n        stepMinutes={30}\r\n        title=\"Work Schedule\"\r\n        initialEvents={[\r\n          { title: \"Morning Meeting\", time: new Date(\"2025-10-01T09:00:00\") },\r\n          { title: \"Lunch Break\", time: new Date(\"2025-10-01T13:00:00\") },\r\n        ]}\r\n        onEventAdd={(ev) => console.log(\"Added:\", ev)}\r\n        onEventUpdate={(ev, idx) => console.log(\"Updated:\", idx, ev)}\r\n        onEventDelete={(ev, idx) => console.log(\"Deleted:\", idx, ev)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/daily-timeline-scheduler.tsx"
    }
  ]
}