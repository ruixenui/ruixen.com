{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "daily-timeline-scheduler",
  "type": "registry:ui",
  "title": "Daily Timeline Scheduler",
  "description": "A timeline-based daily scheduler with time slot management.",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button",
    "popover",
    "input",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/daily-timeline-scheduler.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { format, setHours, setMinutes } from \"date-fns\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n} from \"@/components/ui/select\";\nimport { Trash2, Pencil } from \"lucide-react\";\n\n// Event type\ntype Event = {\n  title: string;\n  time: Date;\n};\n\n// Props for configurability\ntype DailyTimelineProps = {\n  startHour?: number; // e.g., 6 for 6AM\n  endHour?: number; // e.g., 20 for 8PM\n  stepMinutes?: number; // e.g., 60 (hourly), 30, 15\n  initialEvents?: Event[];\n  title?: string;\n  onEventAdd?: (event: Event) => void;\n  onEventUpdate?: (event: Event, index: number) => void;\n  onEventDelete?: (event: Event, index: number) => void;\n};\n\nexport default function DailyTimelineScheduler({\n  startHour = 6,\n  endHour = 20,\n  stepMinutes = 60,\n  initialEvents = [],\n  title = \"Daily Timeline\",\n  onEventAdd,\n  onEventUpdate,\n  onEventDelete,\n}: DailyTimelineProps) {\n  const [events, setEvents] = React.useState<Event[]>(initialEvents);\n  const [selectedHour, setSelectedHour] = React.useState<number | null>(null);\n  const [eventMinute, setEventMinute] = React.useState(\"00\");\n  const [ampm, setAmpm] = React.useState<\"AM\" | \"PM\">(\"AM\");\n  const [eventTitle, setEventTitle] = React.useState(\"\");\n  const [editIndex, setEditIndex] = React.useState<number | null>(null);\n\n  // Generate time slots based on startHour, endHour, stepMinutes\n  const timeSlots: { hour: number; minute: number }[] = [];\n  for (let h = startHour; h <= endHour; h++) {\n    for (let m = 0; m < 60; m += stepMinutes) {\n      timeSlots.push({ hour: h, minute: m });\n    }\n  }\n\n  // Save or update event\n  const saveEvent = () => {\n    if (selectedHour === null || !eventTitle) return;\n\n    let hour = selectedHour;\n    if (ampm === \"PM\" && hour < 12) hour += 12;\n    if (ampm === \"AM\" && hour === 12) hour = 0;\n\n    const newTime = setMinutes(\n      setHours(new Date(), hour),\n      parseInt(eventMinute),\n    );\n    const newEvent = { title: eventTitle, time: newTime };\n\n    if (editIndex !== null) {\n      const updated = [...events];\n      updated[editIndex] = newEvent;\n      setEvents(updated);\n      onEventUpdate?.(newEvent, editIndex);\n      setEditIndex(null);\n    } else {\n      setEvents((prev) => [...prev, newEvent]);\n      onEventAdd?.(newEvent);\n    }\n\n    // Reset fields\n    setEventTitle(\"\");\n    setEventMinute(\"00\");\n    setAmpm(\"AM\");\n    setSelectedHour(null);\n  };\n\n  const deleteEvent = (index: number) => {\n    const ev = events[index];\n    setEvents((prev) => prev.filter((_, i) => i !== index));\n    onEventDelete?.(ev, index);\n  };\n\n  const startEdit = (index: number) => {\n    const ev = events[index];\n    setEventTitle(ev.title);\n    setEventMinute(format(ev.time, \"mm\"));\n    const h = parseInt(format(ev.time, \"hh\"));\n    const a = format(ev.time, \"a\") as \"AM\" | \"PM\";\n    setSelectedHour(h);\n    setAmpm(a);\n    setEditIndex(index);\n  };\n\n  return (\n    <Card className=\"w-full max-w-xl mx-auto\">\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col divide-y max-h-[500px] overflow-y-auto\">\n          {timeSlots.map(({ hour, minute }, idx) => {\n            const timeLabel = format(\n              setMinutes(setHours(new Date(), hour), minute),\n              \"h:mm a\",\n            );\n            const eventsAtTime = events.filter(\n              (e) => format(e.time, \"h:mm a\") === timeLabel,\n            );\n            return (\n              <div key={idx} className=\"py-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-sm\">{timeLabel}</span>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setSelectedHour(hour > 12 ? hour - 12 : hour);\n                          setAmpm(hour >= 12 ? \"PM\" : \"AM\");\n                          setEditIndex(null);\n                        }}\n                      >\n                        + Add\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-72 space-y-3\">\n                      <Input\n                        placeholder=\"Event title\"\n                        value={eventTitle}\n                        onChange={(e) => setEventTitle(e.target.value)}\n                      />\n                      <div className=\"flex items-center gap-2\">\n                        <Select\n                          value={eventMinute}\n                          onValueChange={setEventMinute}\n                        >\n                          <SelectTrigger className=\"w-[80px]\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {[\"00\", \"15\", \"30\", \"45\"].map((m) => (\n                              <SelectItem key={m} value={m}>\n                                {m}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <Select\n                          value={ampm}\n                          onValueChange={(value) =>\n                            setAmpm(value as \"AM\" | \"PM\")\n                          }\n                        >\n                          <SelectTrigger className=\"w-[80px]\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"AM\">AM</SelectItem>\n                            <SelectItem value=\"PM\">PM</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <Button className=\"w-full\" onClick={saveEvent}>\n                        {editIndex !== null ? \"Update Event\" : \"Save Event\"}\n                      </Button>\n                    </PopoverContent>\n                  </Popover>\n                </div>\n\n                <div className=\"mt-2 space-y-2\">\n                  {eventsAtTime.map((ev, i) => {\n                    const index = events.findIndex(\n                      (e) =>\n                        e.title === ev.title &&\n                        format(e.time, \"h:mm a\") === format(ev.time, \"h:mm a\"),\n                    );\n                    return (\n                      <div\n                        key={i}\n                        className=\"flex items-center justify-between rounded-md border p-2 text-sm\"\n                      >\n                        <span>\n                          {format(ev.time, \"h:mm a\")} - {ev.title}\n                        </span>\n                        <div className=\"flex gap-1\">\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            onClick={() => startEdit(index)}\n                          >\n                            <Pencil className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            onClick={() => deleteEvent(index)}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Example demo page usage\nexport function DemoDailyTimeline() {\n  return (\n    <div className=\"p-6 space-y-6\">\n      <DailyTimelineScheduler\n        startHour={8}\n        endHour={18}\n        stepMinutes={30}\n        title=\"Work Schedule\"\n        initialEvents={[\n          { title: \"Morning Meeting\", time: new Date(\"2025-10-01T09:00:00\") },\n          { title: \"Lunch Break\", time: new Date(\"2025-10-01T13:00:00\") },\n        ]}\n        onEventAdd={(ev) => console.log(\"Added:\", ev)}\n        onEventUpdate={(ev, idx) => console.log(\"Updated:\", idx, ev)}\n        onEventDelete={(ev, idx) => console.log(\"Deleted:\", idx, ev)}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/daily-timeline-scheduler.tsx"
    }
  ]
}