{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "podcast-card-player",
  "type": "registry:ui",
  "title": "Podcast Card Player",
  "description": "Card-style podcast player with cover art, episode info, and audio controls.",
  "dependencies": [],
  "files": [
    {
      "path": "registry/ruixenui/podcast-card-player.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PodcastCardPlayerProps {\n  imageSrc: string;\n  title: string;\n  episode: string;\n  audioSrc: string;\n  width?: number;\n  className?: string;\n}\n\nexport default function PodcastCardPlayer({\n  imageSrc,\n  title,\n  episode,\n  audioSrc,\n  width = 350,\n  className,\n}: PodcastCardPlayerProps) {\n  const [audio, setAudio] = React.useState<HTMLAudioElement | null>(null);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [progress, setProgress] = React.useState(0);\n  const [currentTime, setCurrentTime] = React.useState(0);\n\n  React.useEffect(() => {\n    // Only create Audio instance on client side\n    if (typeof window !== \"undefined\") {\n      const audioElement = new Audio(audioSrc);\n      setAudio(audioElement);\n\n      const handleTimeUpdate = () => {\n        setProgress((audioElement.currentTime / audioElement.duration) * 100);\n        setCurrentTime(audioElement.currentTime);\n      };\n\n      audioElement.addEventListener(\"timeupdate\", handleTimeUpdate);\n      return () => {\n        audioElement.removeEventListener(\"timeupdate\", handleTimeUpdate);\n        audioElement.pause();\n      };\n    }\n  }, [audioSrc]);\n\n  const togglePlay = () => {\n    if (!audio) return;\n    if (isPlaying) audio.pause();\n    else audio.play();\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleSeek = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!audio) return;\n    const rect = e.currentTarget.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const seekTime = (clickX / rect.width) * audio.duration;\n    audio.currentTime = seekTime;\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex flex-col items-center bg-white dark:bg-gray-800 shadow-md rounded-xl p-4 gap-3\",\n        className,\n      )}\n      style={{ width }}\n    >\n      <img\n        src={imageSrc}\n        alt={title}\n        className=\"w-full h-40 object-cover rounded-lg\"\n      />\n      <div className=\"flex flex-col w-full\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          {title}\n        </h3>\n        <p className=\"text-sm text-gray-500 dark:text-gray-300\">{episode}</p>\n      </div>\n\n      {/* Waveform/Progress */}\n      <div\n        className=\"relative w-full h-2 rounded-full bg-gray-200 dark:bg-gray-700 cursor-pointer\"\n        onClick={handleSeek}\n      >\n        <div\n          className=\"absolute top-0 left-0 h-full rounded-full bg-black dark:bg-white\"\n          style={{ width: `${progress}%` }}\n        />\n      </div>\n\n      {/* Controls */}\n      <div className=\"flex justify-between items-center w-full\">\n        <Button\n          onClick={togglePlay}\n          className=\"text-sm px-3 py-1\"\n          variant=\"outline\"\n        >\n          {isPlaying ? \"Pause\" : \"Play\"}\n        </Button>\n        <span className=\"text-xs text-gray-500 dark:text-gray-300\">\n          {formatTime(currentTime)} / {formatTime(audio?.duration || 0)}\n        </span>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/podcast-card-player.tsx"
    }
  ]
}