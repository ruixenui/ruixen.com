{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "order-tracking-parallax-card",
  "type": "registry:ui",
  "title": "Order Tracking Parallax Card",
  "description": "A 3D parallax card for order tracking with delivery status and progress indicator.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/ruixenui/order-tracking-parallax-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion, useMotionValue, useSpring, useTransform } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface OrderTrackingParallaxCardProps {\n  orderId: string;\n  product: string;\n  status: \"Processing\" | \"Shipped\" | \"Out for Delivery\" | \"Delivered\";\n  eta: string;\n  imageUrl?: string;\n  className?: string;\n}\n\nexport const OrderTrackingParallaxCard = React.forwardRef<\n  HTMLDivElement,\n  OrderTrackingParallaxCardProps\n>(\n  (\n    {\n      orderId,\n      product,\n      status,\n      eta,\n      imageUrl = \"https://pub-940ccf6255b54fa799a9b01050e6c227.r2.dev/ruixen_truck.png\",\n      className,\n    },\n    ref,\n  ) => {\n    // Motion values\n    const x = useMotionValue(0);\n    const y = useMotionValue(0);\n\n    const xSpring = useSpring(x, { stiffness: 300, damping: 30 });\n    const ySpring = useSpring(y, { stiffness: 300, damping: 30 });\n\n    const rotateX = useTransform(ySpring, [-0.5, 0.5], [\"15deg\", \"-15deg\"]);\n    const rotateY = useTransform(xSpring, [-0.5, 0.5], [\"-15deg\", \"15deg\"]);\n\n    const translateZImg = useTransform(ySpring, [-0.5, 0.5], [-40, 40]);\n    const translateZContent = useTransform(ySpring, [-0.5, 0.5], [25, -25]);\n    const translateZProgress = useTransform(ySpring, [-0.5, 0.5], [35, -35]);\n\n    const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n      const rect = e.currentTarget.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      const xPct = mouseX / rect.width - 0.5;\n      const yPct = mouseY / rect.height - 0.5;\n      x.set(xPct);\n      y.set(yPct);\n    };\n\n    const handleMouseLeave = () => {\n      x.set(0);\n      y.set(0);\n    };\n\n    // Progress steps\n    const steps = [\"Processing\", \"Shipped\", \"Out for Delivery\", \"Delivered\"];\n    const activeStep = steps.indexOf(status);\n\n    return (\n      <motion.div\n        ref={ref}\n        onMouseMove={handleMouseMove}\n        onMouseLeave={handleMouseLeave}\n        style={{ rotateX, rotateY, transformStyle: \"preserve-3d\" }}\n        className={cn(\"relative h-[420px] w-80 rounded-2xl\", className)}\n      >\n        <div\n          style={{\n            transform: \"translateZ(40px)\",\n            transformStyle: \"preserve-3d\",\n          }}\n          className=\"absolute inset-4 flex flex-col justify-between rounded-xl bg-card hover:shadow-xl p-5 border cursor-pointer\"\n        >\n          {/* Truck Image */}\n          <motion.div\n            style={{ transform: \"translateZ(60px)\", translateY: translateZImg }}\n            className=\"relative flex justify-center\"\n          >\n            <img\n              src={imageUrl}\n              alt=\"Delivery truck\"\n              className=\"pointer-events-none h-28 object-contain\"\n            />\n          </motion.div>\n\n          {/* Order Info */}\n          <motion.div\n            style={{\n              transform: \"translateZ(30px)\",\n              translateY: translateZContent,\n            }}\n            className=\"mt-3 text-center\"\n          >\n            <h2 className=\"text-lg font-bold text-card-foreground\">\n              Order #{orderId}\n            </h2>\n            <p className=\"text-sm text-muted-foreground\">{product}</p>\n            <span\n              className={cn(\n                \"mt-2 inline-block rounded-full px-3 py-1 text-xs font-medium\",\n                status === \"Delivered\"\n                  ? \"bg-green-100 text-green-700\"\n                  : status === \"Out for Delivery\"\n                    ? \"bg-blue-100 text-blue-700\"\n                    : status === \"Shipped\"\n                      ? \"bg-yellow-100 text-yellow-700\"\n                      : \"bg-gray-100 text-gray-700\",\n              )}\n            >\n              {status}\n            </span>\n            <p className=\"mt-2 text-xs text-muted-foreground\">ETA: {eta}</p>\n          </motion.div>\n\n          {/* Progress Tracker */}\n          <motion.div\n            style={{\n              transform: \"translateZ(45px)\",\n              translateY: translateZProgress,\n            }}\n            className=\"mt-4\"\n          >\n            <div className=\"flex justify-between text-[10px] font-medium text-muted-foreground\">\n              {steps.map((step, i) => (\n                <span\n                  key={step}\n                  className={cn(\n                    \"w-full text-center\",\n                    i === activeStep ? \"text-primary font-semibold\" : \"\",\n                  )}\n                >\n                  {step}\n                </span>\n              ))}\n            </div>\n            <div className=\"mt-1 flex w-full justify-between\">\n              {steps.map((_, i) => (\n                <div\n                  key={i}\n                  className={cn(\n                    \"h-1 w-full mx-0.5 rounded-full\",\n                    i <= activeStep ? \"bg-primary\" : \"bg-muted\",\n                  )}\n                ></div>\n              ))}\n            </div>\n          </motion.div>\n        </div>\n      </motion.div>\n    );\n  },\n);\n\nOrderTrackingParallaxCard.displayName = \"OrderTrackingParallaxCard\";\n",
      "type": "registry:ui",
      "target": "components/ruixen/order-tracking-parallax-card.tsx"
    }
  ]
}