{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-time-picker",
  "type": "registry:ui",
  "title": "Date Time Picker",
  "description": "A date and time picker with calendar and time selection.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "react-day-picker"
  ],
  "registryDependencies": [
    "popover",
    "button",
    "calendar",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/date-time-picker.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { format } from \"date-fns\"\r\nimport { Calendar as CalendarIcon, Clock } from \"lucide-react\"\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Calendar } from \"@/components/ui/calendar\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\ninterface DateTimePickerProps {\r\n  defaultDate?: Date\r\n  defaultHour?: string\r\n  defaultMinute?: string\r\n  defaultAMPM?: \"AM\" | \"PM\"\r\n  onChange?: (date: Date | null) => void\r\n  disabled?: boolean\r\n  minDate?: Date\r\n  maxDate?: Date\r\n  hourOptions?: string[]\r\n  minuteOptions?: string[]\r\n}\r\n\r\nconst DateTimePicker: React.FC<DateTimePickerProps> = ({\r\n  defaultDate,\r\n  defaultHour = \"12\",\r\n  defaultMinute = \"00\",\r\n  defaultAMPM = \"AM\",\r\n  onChange,\r\n  disabled = false,\r\n  minDate,\r\n  maxDate,\r\n  hourOptions = Array.from({ length: 12 }, (_, i) => (i + 1).toString().padStart(2, \"0\")),\r\n  minuteOptions = [\"00\", \"15\", \"30\", \"45\"],\r\n}) => {\r\n  const [date, setDate] = React.useState<Date | undefined>(defaultDate)\r\n  const [hour, setHour] = React.useState(defaultHour)\r\n  const [minute, setMinute] = React.useState(defaultMinute)\r\n  const [ampm, setAmpm] = React.useState<\"AM\" | \"PM\">(defaultAMPM)\r\n\r\n  const handleAmpmChange = (value: string) => {\r\n    setAmpm(value as \"AM\" | \"PM\")\r\n  }\r\n\r\n  const selectedDateTime = React.useMemo(() => {\r\n    if (!date) return null\r\n    const d = new Date(date)\r\n    let h = parseInt(hour)\r\n    if (ampm === \"PM\" && h < 12) h += 12\r\n    if (ampm === \"AM\" && h === 12) h = 0\r\n    d.setHours(h, parseInt(minute), 0, 0)\r\n    return d\r\n  }, [date, hour, minute, ampm])\r\n\r\n  React.useEffect(() => {\r\n    onChange?.(selectedDateTime ?? null)\r\n  }, [selectedDateTime, onChange])\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      {/* Date Picker */}\r\n      <Popover>\r\n        <PopoverTrigger asChild>\r\n          <Button\r\n            variant=\"outline\"\r\n            className={cn(\r\n              \"w-[250px] justify-start text-left font-normal\",\r\n              !date && \"text-muted-foreground\"\r\n            )}\r\n            disabled={disabled}\r\n          >\r\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n            {date ? format(date, \"PPP\") : <span>Pick a date</span>}\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent className=\"p-0 w-fit\">\r\n          <Calendar\r\n            mode=\"single\"\r\n            selected={date}\r\n            onSelect={setDate}\r\n            initialFocus\r\n            disabled={\r\n              disabled\r\n                ? true\r\n                : (date) => {\r\n                    if (minDate && date < minDate) return true\r\n                    if (maxDate && date > maxDate) return true\r\n                    return false\r\n                  }\r\n            }\r\n          />\r\n        </PopoverContent>\r\n      </Popover>\r\n\r\n      {/* Time Picker */}\r\n      <div className=\"flex items-center gap-2\">\r\n        <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n        <Select value={hour} onValueChange={setHour} disabled={disabled}>\r\n          <SelectTrigger className=\"w-[62px]\">\r\n            <SelectValue />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            {hourOptions.map((h) => (\r\n              <SelectItem key={h} value={h}>\r\n                {h}\r\n              </SelectItem>\r\n            ))}\r\n          </SelectContent>\r\n        </Select>\r\n\r\n        <span>:</span>\r\n\r\n        <Select value={minute} onValueChange={setMinute} disabled={disabled}>\r\n          <SelectTrigger className=\"w-[70px]\">\r\n            <SelectValue />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            {minuteOptions.map((m) => (\r\n              <SelectItem key={m} value={m}>\r\n                {m}\r\n              </SelectItem>\r\n            ))}\r\n          </SelectContent>\r\n        </Select>\r\n\r\n        <Select value={ampm} onValueChange={handleAmpmChange} disabled={disabled}>\r\n          <SelectTrigger className=\"w-[70px]\">\r\n            <SelectValue />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectItem value=\"AM\">AM</SelectItem>\r\n            <SelectItem value=\"PM\">PM</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n\r\n      {/* Result */}\r\n      <p className=\"text-sm text-muted-foreground\">\r\n        Selected:{\" \"}\r\n        {selectedDateTime\r\n          ? format(selectedDateTime, \"PPP p\")\r\n          : \"No date & time selected\"}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DateTimePicker\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/date-time-picker.tsx"
    }
  ]
}