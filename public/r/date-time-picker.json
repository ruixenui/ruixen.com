{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-time-picker",
  "type": "registry:ui",
  "title": "Date Time Picker",
  "description": "A date and time picker with calendar and time selection.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "react-day-picker"
  ],
  "registryDependencies": [
    "popover",
    "button",
    "calendar",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/date-time-picker.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon, Clock } from \"lucide-react\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DateTimePickerProps {\n  defaultDate?: Date;\n  defaultHour?: string;\n  defaultMinute?: string;\n  defaultAMPM?: \"AM\" | \"PM\";\n  onChange?: (date: Date | null) => void;\n  disabled?: boolean;\n  minDate?: Date;\n  maxDate?: Date;\n  hourOptions?: string[];\n  minuteOptions?: string[];\n}\n\nconst DateTimePicker: React.FC<DateTimePickerProps> = ({\n  defaultDate,\n  defaultHour = \"12\",\n  defaultMinute = \"00\",\n  defaultAMPM = \"AM\",\n  onChange,\n  disabled = false,\n  minDate,\n  maxDate,\n  hourOptions = Array.from({ length: 12 }, (_, i) =>\n    (i + 1).toString().padStart(2, \"0\"),\n  ),\n  minuteOptions = [\"00\", \"15\", \"30\", \"45\"],\n}) => {\n  const [date, setDate] = React.useState<Date | undefined>(defaultDate);\n  const [hour, setHour] = React.useState(defaultHour);\n  const [minute, setMinute] = React.useState(defaultMinute);\n  const [ampm, setAmpm] = React.useState<\"AM\" | \"PM\">(defaultAMPM);\n\n  const handleAmpmChange = (value: string) => {\n    setAmpm(value as \"AM\" | \"PM\");\n  };\n\n  const selectedDateTime = React.useMemo(() => {\n    if (!date) return null;\n    const d = new Date(date);\n    let h = parseInt(hour);\n    if (ampm === \"PM\" && h < 12) h += 12;\n    if (ampm === \"AM\" && h === 12) h = 0;\n    d.setHours(h, parseInt(minute), 0, 0);\n    return d;\n  }, [date, hour, minute, ampm]);\n\n  React.useEffect(() => {\n    onChange?.(selectedDateTime ?? null);\n  }, [selectedDateTime, onChange]);\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      {/* Date Picker */}\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            className={cn(\n              \"w-[250px] justify-start text-left font-normal\",\n              !date && \"text-muted-foreground\",\n            )}\n            disabled={disabled}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"p-0 w-fit\">\n          <Calendar\n            mode=\"single\"\n            selected={date}\n            onSelect={setDate}\n            initialFocus\n            disabled={\n              disabled\n                ? true\n                : (date) => {\n                    if (minDate && date < minDate) return true;\n                    if (maxDate && date > maxDate) return true;\n                    return false;\n                  }\n            }\n          />\n        </PopoverContent>\n      </Popover>\n\n      {/* Time Picker */}\n      <div className=\"flex items-center gap-2\">\n        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n        <Select value={hour} onValueChange={setHour} disabled={disabled}>\n          <SelectTrigger className=\"w-[62px]\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            {hourOptions.map((h) => (\n              <SelectItem key={h} value={h}>\n                {h}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        <span>:</span>\n\n        <Select value={minute} onValueChange={setMinute} disabled={disabled}>\n          <SelectTrigger className=\"w-[70px]\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            {minuteOptions.map((m) => (\n              <SelectItem key={m} value={m}>\n                {m}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        <Select\n          value={ampm}\n          onValueChange={handleAmpmChange}\n          disabled={disabled}\n        >\n          <SelectTrigger className=\"w-[70px]\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"AM\">AM</SelectItem>\n            <SelectItem value=\"PM\">PM</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Result */}\n      <p className=\"text-sm text-muted-foreground\">\n        Selected:{\" \"}\n        {selectedDateTime\n          ? format(selectedDateTime, \"PPP p\")\n          : \"No date & time selected\"}\n      </p>\n    </div>\n  );\n};\n\nexport default DateTimePicker;\n",
      "type": "registry:ui",
      "target": "components/ruixen/date-time-picker.tsx"
    }
  ]
}