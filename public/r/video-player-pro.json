{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "video-player-pro",
  "type": "registry:ui",
  "title": "Video Player Pro",
  "description": "A professional video player with custom controls, playback speed, and fullscreen support.",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "popover",
    "slider"
  ],
  "files": [
    {
      "path": "registry/ruixenui/video-player-pro.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\";\r\nimport { Slider } from \"@/components/ui/slider\";\r\nimport { Play, Pause, Volume2, Volume1, VolumeX, Maximize2, RotateCw, Settings } from \"lucide-react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface VideoPlayerProProps {\r\n  src: string;\r\n}\r\n\r\nconst formatTime = (seconds: number) => {\r\n  const m = Math.floor(seconds / 60);\r\n  const s = Math.floor(seconds % 60);\r\n  return `${m}:${s.toString().padStart(2, \"0\")}`;\r\n};\r\n\r\nconst VideoPlayerPro: React.FC<VideoPlayerProProps> = ({ src }) => {\r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\r\n  const [isEnded, setIsEnded] = useState<boolean>(false);\r\n  const [volume, setVolume] = useState<number>(1);\r\n  const [isMuted, setIsMuted] = useState<boolean>(false);\r\n  const [progress, setProgress] = useState<number>(0);\r\n  const [currentTime, setCurrentTime] = useState<number>(0);\r\n  const [duration, setDuration] = useState<number>(0);\r\n  const [showControls, setShowControls] = useState<boolean>(true);\r\n  const [playbackSpeed, setPlaybackSpeed] = useState<number>(1);\r\n\r\n  // Play / Pause / Restart\r\n  const togglePlay = () => {\r\n    if (!videoRef.current) return;\r\n    if (isEnded) {\r\n      videoRef.current.currentTime = 0;\r\n      setIsEnded(false);\r\n    }\r\n    isPlaying ? videoRef.current.pause() : videoRef.current.play();\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  // Update progress and time\r\n  const handleTimeUpdate = () => {\r\n    if (!videoRef.current) return;\r\n    const prog = (videoRef.current.currentTime / videoRef.current.duration) * 100;\r\n    setProgress(isFinite(prog) ? prog : 0);\r\n    setCurrentTime(videoRef.current.currentTime);\r\n    setDuration(videoRef.current.duration || 0);\r\n  };\r\n\r\n  // Video ended\r\n  const handleEnded = () => {\r\n    setIsEnded(true);\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  // Seek\r\n  const handleSeek = (percent: number) => {\r\n    if (!videoRef.current) return;\r\n    const time = (percent / 100) * (videoRef.current.duration || 0);\r\n    if (isFinite(time)) videoRef.current.currentTime = time;\r\n    setProgress(percent);\r\n  };\r\n\r\n  // Fullscreen\r\n  const toggleFullscreen = () => {\r\n    if (!containerRef.current) return;\r\n\r\n    // Must be called inside a user-initiated event\r\n    if (!document.fullscreenElement) {\r\n      containerRef.current.requestFullscreen().catch((err) => {\r\n        console.error(\"Fullscreen request failed:\", err);\r\n      });\r\n    } else {\r\n      document.exitFullscreen().catch((err) => {\r\n        console.error(\"Exit fullscreen failed:\", err);\r\n      });\r\n    }\r\n  };\r\n\r\n  // Toggle mute\r\n  const toggleMute = () => {\r\n    if (!videoRef.current) return;\r\n    videoRef.current.muted = !isMuted;\r\n    setIsMuted(!isMuted);\r\n    setVolume(!isMuted ? 0 : 1);\r\n    if (!isMuted) videoRef.current.volume = 0;\r\n    else videoRef.current.volume = 1;\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      ref={containerRef}\r\n      className=\"relative w-full max-w-5xl mx-auto overflow-hidden rounded-xl\"\r\n      onMouseEnter={() => setShowControls(true)}\r\n      onMouseLeave={() => setShowControls(false)}\r\n    >\r\n      <video\r\n        ref={videoRef}\r\n        className=\"w-full\"\r\n        src={src}\r\n        onTimeUpdate={handleTimeUpdate}\r\n        onEnded={handleEnded}\r\n        onClick={togglePlay}\r\n      />\r\n\r\n      {/* Controls */}\r\n      <AnimatePresence>\r\n        {showControls && (\r\n          <motion.div\r\n            className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 w-[95%] backdrop-blur-xl bg-white/10 rounded-2xl p-3 flex flex-col gap-3\"\r\n            initial={{ y: 20, opacity: 0 }}\r\n            animate={{ y: 0, opacity: 1 }}\r\n            exit={{ y: 20, opacity: 0 }}\r\n          >\r\n            {/* Progress */}\r\n            <div\r\n              className=\"relative w-full h-2 bg-white/20 rounded-full cursor-pointer\"\r\n              onClick={(e) => {\r\n                const rect = e.currentTarget.getBoundingClientRect();\r\n                const x = e.clientX - rect.left;\r\n                handleSeek((x / rect.width) * 100);\r\n              }}\r\n            >\r\n              <motion.div\r\n                className=\"absolute top-0 left-0 h-full bg-white/70 rounded-full\"\r\n                style={{ width: `${progress}%` }}\r\n              />\r\n            </div>\r\n\r\n            {/* Control Row */}\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                {/* Play / Pause / Restart */}\r\n                <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={togglePlay}>\r\n                  {isEnded ? <RotateCw className=\"w-5 h-5\" /> : isPlaying ? <Pause className=\"w-5 h-5\" /> : <Play className=\"w-5 h-5\" />}\r\n                </Button>\r\n\r\n                {/* Volume */}\r\n                <Popover>\r\n                  <PopoverTrigger asChild>\r\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\r\n                      {isMuted ? <VolumeX className=\"w-5 h-5\" /> : volume > 0.5 ? <Volume2 className=\"w-5 h-5\" /> : <Volume1 className=\"w-5 h-5\" />}\r\n                    </Button>\r\n                  </PopoverTrigger>\r\n                    <PopoverContent className=\"w-32 bg-transparent border-none p-2\">\r\n                      <Slider\r\n                        value={[volume * 100]}  \r\n                        onValueChange={(val: number[]) => {\r\n                          const newVolume = val[0] / 100;\r\n                          if (videoRef.current) videoRef.current.volume = newVolume;\r\n                          setVolume(newVolume);\r\n                          setIsMuted(newVolume === 0);\r\n                        }}\r\n                        step={1}\r\n                        min={0}\r\n                        max={100}\r\n                        className=\"w-full\"\r\n                      />\r\n                    </PopoverContent>\r\n                </Popover>\r\n\r\n                {/* Timer */}\r\n                <span className=\"text-white text-sm\">\r\n                  {formatTime(currentTime)} / {formatTime(duration)}\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"flex items-center gap-2\">\r\n                {/* Settings */}\r\n                <Popover>\r\n                  <PopoverTrigger asChild>\r\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\r\n                      <Settings className=\"w-5 h-5\" />\r\n                    </Button>\r\n                  </PopoverTrigger>\r\n                  <PopoverContent className=\"bg-background w-40 p-2\">\r\n                    <div className=\"flex flex-col gap-2\">\r\n                      <span className=\"text-sm font-medium text-muted-foreground\">Speed</span>\r\n                      {[0.5, 1, 1.5, 2].map((s) => (\r\n                        <Button\r\n                          key={s}\r\n                          variant={playbackSpeed === s ? \"default\" : \"outline\"}\r\n                          size=\"sm\"\r\n                          className=\"w-full\"\r\n                          onClick={() => {\r\n                            if (videoRef.current) videoRef.current.playbackRate = s;\r\n                            setPlaybackSpeed(s);\r\n                          }}\r\n                        >\r\n                          {s}x\r\n                        </Button>\r\n                      ))}\r\n                      <span className=\"text-sm font-medium text-muted-foreground mt-2\">Captions</span>\r\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\r\n                        Off\r\n                      </Button>\r\n                    </div>\r\n                  </PopoverContent>\r\n                </Popover>\r\n\r\n                {/* Fullscreen */}\r\n                <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={toggleFullscreen}>\r\n                  <Maximize2 className=\"w-5 h-5\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default VideoPlayerPro;",
      "type": "registry:ui",
      "target": "components/ruixen/video-player-pro.tsx"
    }
  ]
}