{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "video-player-pro",
  "type": "registry:ui",
  "title": "Video Player Pro",
  "description": "A professional video player with custom controls, playback speed, and fullscreen support.",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "popover",
    "slider"
  ],
  "files": [
    {
      "path": "registry/ruixenui/video-player-pro.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport { Slider } from \"@/components/ui/slider\";\nimport {\n  Play,\n  Pause,\n  Volume2,\n  Volume1,\n  VolumeX,\n  Maximize2,\n  RotateCw,\n  Settings,\n} from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface VideoPlayerProProps {\n  src: string;\n}\n\nconst formatTime = (seconds: number) => {\n  const m = Math.floor(seconds / 60);\n  const s = Math.floor(seconds % 60);\n  return `${m}:${s.toString().padStart(2, \"0\")}`;\n};\n\nconst VideoPlayerPro: React.FC<VideoPlayerProProps> = ({ src }) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [isEnded, setIsEnded] = useState<boolean>(false);\n  const [volume, setVolume] = useState<number>(1);\n  const [isMuted, setIsMuted] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n  const [currentTime, setCurrentTime] = useState<number>(0);\n  const [duration, setDuration] = useState<number>(0);\n  const [showControls, setShowControls] = useState<boolean>(true);\n  const [playbackSpeed, setPlaybackSpeed] = useState<number>(1);\n\n  // Play / Pause / Restart\n  const togglePlay = () => {\n    if (!videoRef.current) return;\n    if (isEnded) {\n      videoRef.current.currentTime = 0;\n      setIsEnded(false);\n    }\n    isPlaying ? videoRef.current.pause() : videoRef.current.play();\n    setIsPlaying(!isPlaying);\n  };\n\n  // Update progress and time\n  const handleTimeUpdate = () => {\n    if (!videoRef.current) return;\n    const prog =\n      (videoRef.current.currentTime / videoRef.current.duration) * 100;\n    setProgress(isFinite(prog) ? prog : 0);\n    setCurrentTime(videoRef.current.currentTime);\n    setDuration(videoRef.current.duration || 0);\n  };\n\n  // Video ended\n  const handleEnded = () => {\n    setIsEnded(true);\n    setIsPlaying(false);\n  };\n\n  // Seek\n  const handleSeek = (percent: number) => {\n    if (!videoRef.current) return;\n    const time = (percent / 100) * (videoRef.current.duration || 0);\n    if (isFinite(time)) videoRef.current.currentTime = time;\n    setProgress(percent);\n  };\n\n  // Fullscreen\n  const toggleFullscreen = () => {\n    if (!containerRef.current) return;\n\n    // Must be called inside a user-initiated event\n    if (!document.fullscreenElement) {\n      containerRef.current.requestFullscreen().catch((err) => {\n        console.error(\"Fullscreen request failed:\", err);\n      });\n    } else {\n      document.exitFullscreen().catch((err) => {\n        console.error(\"Exit fullscreen failed:\", err);\n      });\n    }\n  };\n\n  // Toggle mute\n  const toggleMute = () => {\n    if (!videoRef.current) return;\n    videoRef.current.muted = !isMuted;\n    setIsMuted(!isMuted);\n    setVolume(!isMuted ? 0 : 1);\n    if (!isMuted) videoRef.current.volume = 0;\n    else videoRef.current.volume = 1;\n  };\n\n  return (\n    <motion.div\n      ref={containerRef}\n      className=\"relative w-full max-w-5xl mx-auto overflow-hidden rounded-xl\"\n      onMouseEnter={() => setShowControls(true)}\n      onMouseLeave={() => setShowControls(false)}\n    >\n      <video\n        ref={videoRef}\n        className=\"w-full\"\n        src={src}\n        onTimeUpdate={handleTimeUpdate}\n        onEnded={handleEnded}\n        onClick={togglePlay}\n      />\n\n      {/* Controls */}\n      <AnimatePresence>\n        {showControls && (\n          <motion.div\n            className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 w-[95%] backdrop-blur-xl bg-white/10 rounded-2xl p-3 flex flex-col gap-3\"\n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            exit={{ y: 20, opacity: 0 }}\n          >\n            {/* Progress */}\n            <div\n              className=\"relative w-full h-2 bg-white/20 rounded-full cursor-pointer\"\n              onClick={(e) => {\n                const rect = e.currentTarget.getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                handleSeek((x / rect.width) * 100);\n              }}\n            >\n              <motion.div\n                className=\"absolute top-0 left-0 h-full bg-white/70 rounded-full\"\n                style={{ width: `${progress}%` }}\n              />\n            </div>\n\n            {/* Control Row */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                {/* Play / Pause / Restart */}\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"text-white\"\n                  onClick={togglePlay}\n                >\n                  {isEnded ? (\n                    <RotateCw className=\"w-5 h-5\" />\n                  ) : isPlaying ? (\n                    <Pause className=\"w-5 h-5\" />\n                  ) : (\n                    <Play className=\"w-5 h-5\" />\n                  )}\n                </Button>\n\n                {/* Volume */}\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\n                      {isMuted ? (\n                        <VolumeX className=\"w-5 h-5\" />\n                      ) : volume > 0.5 ? (\n                        <Volume2 className=\"w-5 h-5\" />\n                      ) : (\n                        <Volume1 className=\"w-5 h-5\" />\n                      )}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-32 bg-transparent border-none p-2\">\n                    <Slider\n                      value={[volume * 100]}\n                      onValueChange={(val: number[]) => {\n                        const newVolume = val[0] / 100;\n                        if (videoRef.current)\n                          videoRef.current.volume = newVolume;\n                        setVolume(newVolume);\n                        setIsMuted(newVolume === 0);\n                      }}\n                      step={1}\n                      min={0}\n                      max={100}\n                      className=\"w-full\"\n                    />\n                  </PopoverContent>\n                </Popover>\n\n                {/* Timer */}\n                <span className=\"text-white text-sm\">\n                  {formatTime(currentTime)} / {formatTime(duration)}\n                </span>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                {/* Settings */}\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\n                      <Settings className=\"w-5 h-5\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"bg-background w-40 p-2\">\n                    <div className=\"flex flex-col gap-2\">\n                      <span className=\"text-sm font-medium text-muted-foreground\">\n                        Speed\n                      </span>\n                      {[0.5, 1, 1.5, 2].map((s) => (\n                        <Button\n                          key={s}\n                          variant={playbackSpeed === s ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          className=\"w-full\"\n                          onClick={() => {\n                            if (videoRef.current)\n                              videoRef.current.playbackRate = s;\n                            setPlaybackSpeed(s);\n                          }}\n                        >\n                          {s}x\n                        </Button>\n                      ))}\n                      <span className=\"text-sm font-medium text-muted-foreground mt-2\">\n                        Captions\n                      </span>\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                        Off\n                      </Button>\n                    </div>\n                  </PopoverContent>\n                </Popover>\n\n                {/* Fullscreen */}\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"text-white\"\n                  onClick={toggleFullscreen}\n                >\n                  <Maximize2 className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n};\n\nexport default VideoPlayerPro;\n",
      "type": "registry:ui",
      "target": "components/ruixen/video-player-pro.tsx"
    }
  ]
}