{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "audio-timeline-with-chapters",
  "type": "registry:ui",
  "title": "Audio Timeline With Chapters",
  "description": "Interactive audio player with timeline and chapter navigation.",
  "dependencies": [],
  "files": [
    {
      "path": "registry/ruixenui/audio-timeline-with-chapters.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface Chapter {\n  time: number; // in seconds\n  label: string;\n}\n\ninterface AudioTimelineWithChaptersProps {\n  audioSrc: string;\n  chapters: Chapter[];\n  width?: number;\n  className?: string;\n}\n\nexport default function AudioTimelineWithChapters({\n  audioSrc,\n  chapters,\n  width = 400,\n  className,\n}: AudioTimelineWithChaptersProps) {\n  const [audio, setAudio] = React.useState<HTMLAudioElement | null>(null);\n  const [progress, setProgress] = React.useState(0);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    // Only create Audio instance on client side\n    if (typeof window !== \"undefined\") {\n      const audioElement = new Audio(audioSrc);\n      setAudio(audioElement);\n\n      const handleTimeUpdate = () => {\n        if (audioElement.duration) {\n          setProgress((audioElement.currentTime / audioElement.duration) * 100);\n        }\n      };\n\n      const handleLoadedMetadata = () => {\n        setDuration(audioElement.duration);\n      };\n\n      audioElement.addEventListener(\"timeupdate\", handleTimeUpdate);\n      audioElement.addEventListener(\"loadedmetadata\", handleLoadedMetadata);\n\n      return () => {\n        audioElement.removeEventListener(\"timeupdate\", handleTimeUpdate);\n        audioElement.removeEventListener(\n          \"loadedmetadata\",\n          handleLoadedMetadata,\n        );\n        audioElement.pause();\n      };\n    }\n  }, [audioSrc]);\n\n  const togglePlay = () => {\n    if (!audio) return;\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const jumpToChapter = (time: number) => {\n    if (!audio) return;\n    audio.currentTime = time;\n    if (!isPlaying) audio.play();\n    setIsPlaying(true);\n  };\n\n  return (\n    <div className={cn(\"flex flex-col items-center gap-2\", className)}>\n      {/* Timeline */}\n      <div\n        className=\"relative w-full h-3 bg-gray-200 dark:bg-gray-700  cursor-pointer\"\n        style={{ width }}\n      >\n        <div\n          className=\"absolute top-0 left-0 h-full bg-gray-600 dark:bg-white\"\n          style={{ width: `${progress}%` }}\n        />\n        {/* Chapters (visible immediately after metadata loads) */}\n        {duration > 0 &&\n          chapters.map((ch, idx) => (\n            <div\n              key={idx}\n              className=\"absolute top-0 w-1 h-3 bg-blue-300 cursor-pointer\"\n              style={{ left: `${(ch.time / duration) * 100}%` }}\n              onClick={() => jumpToChapter(ch.time)}\n              title={ch.label}\n            />\n          ))}\n      </div>\n\n      {/* Play/Pause */}\n      <Button\n        className=\"w-20 text-sm px-2 py-1\"\n        variant=\"outline\"\n        onClick={togglePlay}\n      >\n        {isPlaying ? \"Pause\" : \"Play\"}\n      </Button>\n\n      {/* Chapters List */}\n      <div className=\"flex flex-wrap justify-center gap-2 mt-2\">\n        {chapters.map((ch, idx) => (\n          <Button\n            key={idx}\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => jumpToChapter(ch.time)}\n          >\n            {ch.label}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/audio-timeline-with-chapters.tsx"
    }
  ]
}