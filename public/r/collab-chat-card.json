{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "collab-chat-card",
  "type": "registry:ui",
  "title": "Collab Chat Card",
  "description": "A collaborative chat interface card with participant filtering.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/collab-chat-card.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport {\n  SmilePlus,\n  Send,\n  MoreHorizontal,\n  CheckCheck,\n  Check,\n  Users,\n} from \"lucide-react\";\nimport Image from \"next/image\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Message {\n  id: string;\n  content: string;\n  sender: {\n    name: string;\n    avatar: string;\n    isOnline: boolean;\n  };\n  timestamp: string;\n  status: \"sent\" | \"delivered\" | \"read\";\n  reactions?: Array<{\n    emoji: string;\n    count: number;\n    reacted: boolean;\n  }>;\n}\n\ninterface CollabChatCardProps {\n  chatName?: string;\n  messages?: Message[];\n}\n\nexport default function CollabChatCard({\n  chatName = \"Design Team\",\n  messages = [\n    {\n      id: \"1\",\n      content: \"Just pushed the latest design system updates âœ¨\",\n      sender: {\n        name: \"Alex Chen\",\n        avatar: \"https://github.com/shadcn.png\",\n        isOnline: true,\n      },\n      timestamp: \"10:24 AM\",\n      status: \"read\",\n      reactions: [\n        { emoji: \"ðŸ™Œ\", count: 2, reacted: true },\n        { emoji: \"âœ¨\", count: 1, reacted: false },\n      ],\n    },\n    {\n      id: \"2\",\n      content: \"The new components look amazing! Great work on the animations.\",\n      sender: {\n        name: \"Sarah Kim\",\n        avatar: \"https://github.com/evilrabbit.png\",\n        isOnline: true,\n      },\n      timestamp: \"10:26 AM\",\n      status: \"delivered\",\n    },\n  ],\n}: CollabChatCardProps) {\n  const [selectedSender, setSelectedSender] = useState<string | null>(null);\n\n  // Get unique senders from messages\n  const uniqueSenders = Array.from(\n    new Map(messages.map((m) => [m.sender.name, m.sender])).values(),\n  );\n\n  // Filter messages by selected sender or show all\n  const filteredMessages = selectedSender\n    ? messages.filter((m) => m.sender.name === selectedSender)\n    : messages;\n\n  return (\n    <div className=\"w-full max-w-5xl mx-auto p-6 bg-white dark:bg-black rounded-3xl shadow-lg flex flex-col h-[550px] border border-gray-300 dark:border-gray-700\">\n      {/* Header */}\n      <header className=\"flex justify-between items-center border-b border-gray-300 dark:border-gray-700 pb-3 mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <Users className=\"w-8 h-8 text-black dark:text-white\" />\n          <div>\n            <h2 className=\"text-2xl font-semibold text-black dark:text-white\">\n              {chatName}\n            </h2>\n            <p className=\"italic text-sm text-gray-600 dark:text-gray-400\">\n              Collaborate creatively, deliver clearly.\n            </p>\n          </div>\n        </div>\n        <button\n          aria-label=\"More options\"\n          className=\"p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-900 transition\"\n        >\n          <MoreHorizontal className=\"w-6 h-6 text-gray-600 dark:text-gray-400\" />\n        </button>\n      </header>\n\n      {/* Body */}\n      <main className=\"flex flex-1 overflow-hidden rounded-xl border border-gray-300 dark:border-gray-700\">\n        {/* Participants List */}\n        <aside className=\"w-56 bg-gray-50 dark:bg-gray-900 border-r border-gray-300 dark:border-gray-700 p-4 overflow-y-auto\">\n          {uniqueSenders.map((sender) => {\n            const isSelected = selectedSender === sender.name;\n            return (\n              <button\n                key={sender.name}\n                onClick={() =>\n                  setSelectedSender(isSelected ? null : sender.name)\n                }\n                className={cn(\n                  \"flex items-center gap-3 w-full p-3 mb-3 rounded-lg transition-colors\",\n                  isSelected\n                    ? \"bg-black dark:bg-white text-white dark:text-black\"\n                    : \"hover:bg-gray-200 dark:hover:bg-gray-800 text-gray-900 dark:text-gray-300\",\n                )}\n              >\n                <div className=\"relative\">\n                  <Image\n                    src={sender.avatar}\n                    alt={sender.name}\n                    width={40}\n                    height={40}\n                    className=\"rounded-full ring-1 ring-gray-400 dark:ring-gray-600\"\n                  />\n                  <span\n                    className={cn(\n                      \"absolute bottom-0 right-0 w-3 h-3 rounded-full ring-2 ring-white dark:ring-black\",\n                      sender.isOnline ? \"bg-green-500\" : \"bg-gray-400\",\n                    )}\n                  />\n                </div>\n                <span className=\"text-left font-medium truncate\">\n                  {sender.name}\n                </span>\n              </button>\n            );\n          })}\n        </aside>\n\n        {/* Messages */}\n        <section className=\"flex-1 p-6 overflow-y-auto bg-white dark:bg-black\">\n          {filteredMessages.length === 0 ? (\n            <p className=\"text-center text-gray-500 dark:text-gray-400\">\n              No messages to display.\n            </p>\n          ) : (\n            filteredMessages.map((message) => (\n              <div\n                key={message.id}\n                className=\"mb-6 last:mb-0 group border-b border-gray-200 dark:border-gray-800 pb-4\"\n              >\n                <div className=\"flex items-center gap-4 mb-2\">\n                  <Image\n                    src={message.sender.avatar}\n                    alt={message.sender.name}\n                    width={40}\n                    height={40}\n                    className=\"rounded-full ring-1 ring-gray-400 dark:ring-gray-600\"\n                  />\n                  <div>\n                    <p className=\"font-semibold text-black dark:text-white\">\n                      {message.sender.name}\n                    </p>\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {message.timestamp}\n                    </span>\n                  </div>\n                </div>\n                <p className=\"text-gray-800 dark:text-gray-200 text-lg mb-1\">\n                  {message.content}\n                </p>\n                <div className=\"flex items-center justify-between text-sm text-gray-600 dark:text-gray-400\">\n                  <div className=\"flex items-center gap-1\">\n                    {message.status === \"read\" && (\n                      <CheckCheck className=\"w-5 h-5 text-green-500\" />\n                    )}\n                    {message.status === \"delivered\" && (\n                      <Check className=\"w-5 h-5\" />\n                    )}\n                    <span>{message.timestamp}</span>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    {message.reactions?.map((reaction) => (\n                      <button\n                        key={reaction.emoji}\n                        className={cn(\n                          \"px-2 py-1 rounded-md text-sm transition-colors\",\n                          reaction.reacted\n                            ? \"bg-gray-300 dark:bg-gray-700 text-black dark:text-white\"\n                            : \"bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-400\",\n                          \"hover:bg-gray-200 dark:hover:bg-gray-600\",\n                        )}\n                      >\n                        {reaction.emoji} {reaction.count}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"mt-6 flex items-center gap-4 border-t border-gray-300 dark:border-gray-700 pt-4\">\n        <button\n          aria-label=\"Add emoji\"\n          className=\"p-3 rounded-full bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition\"\n        >\n          <SmilePlus className=\"w-6 h-6 text-gray-600 dark:text-gray-300\" />\n        </button>\n        <input\n          type=\"text\"\n          placeholder=\"Write your message...\"\n          className={cn(\n            \"flex-1 px-5 py-3 rounded-full border border-gray-300 dark:border-gray-700\",\n            \"bg-white dark:bg-black text-black dark:text-white placeholder-gray-500 dark:placeholder-gray-400\",\n            \"focus:outline-none focus:ring-2 focus:ring-black dark:focus:ring-white transition\",\n          )}\n        />\n        <button\n          aria-label=\"Send message\"\n          className=\"p-3 rounded-full bg-black dark:bg-white text-white dark:text-black hover:brightness-90 transition\"\n        >\n          <Send className=\"w-6 h-6\" />\n        </button>\n      </footer>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/collab-chat-card.tsx"
    }
  ]
}