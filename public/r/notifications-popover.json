{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "notifications-popover",
  "type": "registry:ui",
  "title": "Notifications Popover",
  "description": "A dropdown menu component for displaying notifications with different types and read states.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/notifications-popover.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { BellRing, MessageCircle, AlertTriangle, CheckCircle } from \"lucide-react\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\n\r\nexport interface Notification {\r\n  id: number;\r\n  type: \"message\" | \"alert\" | \"success\";\r\n  message: string;\r\n  timestamp?: string;\r\n  read?: boolean;\r\n}\r\n\r\ninterface NotificationsPopoverProps {\r\n  notifications?: Notification[];\r\n  icon?: React.ReactNode;\r\n  maxHeight?: string;\r\n}\r\n\r\nconst defaultNotifications: Notification[] = [\r\n  { id: 1, type: \"message\", message: \"New message from John\", timestamp: \"2m ago\" },\r\n  { id: 2, type: \"success\", message: \"Report generated successfully\", timestamp: \"10m ago\" },\r\n  { id: 3, type: \"alert\", message: \"Server downtime scheduled\", timestamp: \"1h ago\" },\r\n];\r\n\r\nexport default function NotificationsPopover({\r\n  notifications = defaultNotifications,\r\n  icon,\r\n  maxHeight = \"64\",\r\n}: NotificationsPopoverProps) {\r\n  const unreadCount = notifications.filter((n) => !n.read).length;\r\n\r\n  const getIcon = (type: string) => {\r\n    switch (type) {\r\n      case \"message\":\r\n        return <MessageCircle className=\"w-5 h-5 text-blue-500\" />;\r\n      case \"alert\":\r\n        return <AlertTriangle className=\"w-5 h-5 text-red-500\" />;\r\n      case \"success\":\r\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\r\n      default:\r\n        return <BellRing className=\"w-5 h-5\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger className=\"relative p-2 rounded-full border hover:border-gray-200 hover:bg-gray-100 inline-flex items-center justify-center\">\r\n        {icon || <BellRing className=\"w-5 h-5 text-gray-700\" />}\r\n        {unreadCount > 0 && (\r\n          <span className=\"absolute -top-1 -right-1 inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-bold leading-none text-white bg-red-500 rounded-full\">\r\n            {unreadCount}\r\n          </span>\r\n        )}\r\n      </DropdownMenuTrigger>\r\n\r\n      <DropdownMenuContent\r\n        side=\"bottom\"\r\n        align=\"center\"\r\n        className={`w-96 bg-white border border-gray-200 rounded-md shadow-lg max-h-${maxHeight} overflow-y-auto divide-y divide-gray-100`}\r\n      >\r\n        {notifications.length === 0 ? (\r\n          <DropdownMenuItem className=\"text-gray-400 cursor-default\">\r\n            No notifications\r\n          </DropdownMenuItem>\r\n        ) : (\r\n          notifications.map((n) => (\r\n            <DropdownMenuItem\r\n              key={n.id}\r\n              className={`flex items-start gap-3 p-3 hover:bg-gray-50 cursor-pointer ${\r\n                n.read ? \"opacity-70\" : \"font-medium\"\r\n              }`}\r\n            >\r\n              <div>{getIcon(n.type)}</div>\r\n              <div className=\"flex flex-col\">\r\n                <span>{n.message}</span>\r\n                {n.timestamp && (\r\n                  <span className=\"text-xs text-gray-400 mt-1\">{n.timestamp}</span>\r\n                )}\r\n              </div>\r\n            </DropdownMenuItem>\r\n          ))\r\n        )}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/notifications-popover.tsx"
    }
  ]
}