{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table-dialog",
  "type": "registry:ui",
  "title": "Table Dialog",
  "description": "An editable table with dialog-based editing and row selection.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "table",
    "checkbox",
    "badge",
    "button",
    "dropdown-menu",
    "dialog",
    "input",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/table-dialog.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { MoreHorizontal } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\n\nexport type User = {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: \"Active\" | \"Inactive\";\n  balance: string;\n};\n\nexport type ConfigurableEditableTableProps = {\n  /** Pass your own data to override defaults */\n  data?: User[];\n  /** Total balance to show in the footer */\n  footerTotal?: string;\n  /** Allows you to set a custom height for the scrollable section */\n  maxHeight?: string;\n};\n\n/** Default table data */\nconst defaultUsers: User[] = [\n  {\n    id: \"1\",\n    name: \"Arjun Mehta\",\n    email: \"arjun.mehta@company.com\",\n    role: \"Manager\",\n    status: \"Active\",\n    balance: \"$1,250.00\",\n  },\n  {\n    id: \"2\",\n    name: \"Hannah Park\",\n    email: \"hannah.park@company.com\",\n    role: \"Designer\",\n    status: \"Active\",\n    balance: \"$600.00\",\n  },\n  {\n    id: \"3\",\n    name: \"Oliver Scott\",\n    email: \"oliver.scott@company.com\",\n    role: \"Engineer\",\n    status: \"Inactive\",\n    balance: \"$650.00\",\n  },\n  {\n    id: \"4\",\n    name: \"Camila Torres\",\n    email: \"camila.torres@company.com\",\n    role: \"Engineer\",\n    status: \"Active\",\n    balance: \"$900.00\",\n  },\n];\n\nexport default function TableDialog({\n  data = defaultUsers,\n  footerTotal = \"$3,400.00\",\n  maxHeight = \"400px\",\n}: ConfigurableEditableTableProps) {\n  const [users, setUsers] = useState<User[]>(data);\n  const [selected, setSelected] = useState<string[]>([]);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [editData, setEditData] = useState<Partial<User>>({});\n\n  const toggleSelect = (id: string) => {\n    setSelected((prev) =>\n      prev.includes(id) ? prev.filter((i) => i !== id) : [...prev, id],\n    );\n  };\n\n  const openEditDialog = (user: User) => {\n    setEditingUser(user);\n    setEditData({ ...user });\n  };\n\n  const saveEdit = () => {\n    if (!editingUser) return;\n    setUsers((prev) =>\n      prev.map((u) =>\n        u.id === editingUser.id ? ({ ...u, ...editData } as User) : u,\n      ),\n    );\n    setEditingUser(null);\n    setEditData({});\n  };\n\n  return (\n    <div className=\"bg-background border rounded-md shadow-sm overflow-hidden\">\n      <div className={`max-h-[${maxHeight}] overflow-y-auto`}>\n        <Table>\n          {/* Table Header */}\n          <TableHeader className=\"sticky top-0 z-10 bg-background\">\n            <TableRow>\n              <TableHead className=\"w-[40px]\">\n                <Checkbox\n                  checked={selected.length === users.length}\n                  onCheckedChange={(checked) =>\n                    setSelected(checked ? users.map((u) => u.id) : [])\n                  }\n                />\n              </TableHead>\n              <TableHead>Name</TableHead>\n              <TableHead>Email</TableHead>\n              <TableHead>Role</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead className=\"text-right\">Balance</TableHead>\n              <TableHead className=\"w-[50px]\"></TableHead>\n            </TableRow>\n          </TableHeader>\n\n          {/* Table Body */}\n          <TableBody>\n            {users.map((user) => (\n              <TableRow key={user.id} className=\"hover:bg-muted/40\">\n                <TableCell>\n                  <Checkbox\n                    checked={selected.includes(user.id)}\n                    onCheckedChange={() => toggleSelect(user.id)}\n                  />\n                </TableCell>\n                <TableCell className=\"font-medium\">{user.name}</TableCell>\n                <TableCell>{user.email}</TableCell>\n                <TableCell>{user.role}</TableCell>\n                <TableCell>\n                  <Badge\n                    variant={user.status === \"Active\" ? \"default\" : \"secondary\"}\n                  >\n                    {user.status}\n                  </Badge>\n                </TableCell>\n                <TableCell className=\"text-right\">{user.balance}</TableCell>\n                <TableCell>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"icon\">\n                        <MoreHorizontal className=\"w-4 h-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem onClick={() => openEditDialog(user)}>\n                        Edit\n                      </DropdownMenuItem>\n                      <DropdownMenuItem className=\"text-destructive\">\n                        Delete\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n\n          {/* Table Footer */}\n          <TableFooter className=\"sticky bottom-0 bg-background\">\n            <TableRow>\n              <TableCell colSpan={5}>\n                {selected.length > 0\n                  ? `${selected.length} selected`\n                  : \"No rows selected\"}\n              </TableCell>\n              <TableCell colSpan={2} className=\"text-right\">\n                Total: {footerTotal}\n              </TableCell>\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingUser} onOpenChange={() => setEditingUser(null)}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Edit User</DialogTitle>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-2\">\n            <Input\n              value={editData.name || \"\"}\n              onChange={(e) =>\n                setEditData({ ...editData, name: e.target.value })\n              }\n              placeholder=\"Name\"\n            />\n            <Input\n              value={editData.email || \"\"}\n              onChange={(e) =>\n                setEditData({ ...editData, email: e.target.value })\n              }\n              placeholder=\"Email\"\n            />\n            <Input\n              value={editData.role || \"\"}\n              onChange={(e) =>\n                setEditData({ ...editData, role: e.target.value })\n              }\n              placeholder=\"Role\"\n            />\n            <Select\n              value={editData.status || \"Active\"}\n              onValueChange={(val) =>\n                setEditData({\n                  ...editData,\n                  status: val as \"Active\" | \"Inactive\",\n                })\n              }\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Active\">Active</SelectItem>\n                <SelectItem value=\"Inactive\">Inactive</SelectItem>\n              </SelectContent>\n            </Select>\n            <Input\n              value={editData.balance || \"\"}\n              onChange={(e) =>\n                setEditData({ ...editData, balance: e.target.value })\n              }\n              placeholder=\"Balance\"\n            />\n          </div>\n          <DialogFooter className=\"flex justify-end gap-2\">\n            <Button variant=\"outline\" onClick={() => setEditingUser(null)}>\n              Cancel\n            </Button>\n            <Button onClick={saveEdit}>Save</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/table-dialog.tsx"
    }
  ]
}