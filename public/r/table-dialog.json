{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table-dialog",
  "type": "registry:ui",
  "title": "Table Dialog",
  "description": "An editable table with dialog-based editing and row selection.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "table",
    "checkbox",
    "badge",
    "button",
    "dropdown-menu",
    "dialog",
    "input",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/table-dialog.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { Checkbox } from \"@/components/ui/checkbox\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableFooter,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\"\r\nimport { MoreHorizontal } from \"lucide-react\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"@/components/ui/select\"\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogFooter,\r\n} from \"@/components/ui/dialog\"\r\n\r\nexport type User = {\r\n  id: string\r\n  name: string\r\n  email: string\r\n  role: string\r\n  status: \"Active\" | \"Inactive\"\r\n  balance: string\r\n}\r\n\r\nexport type ConfigurableEditableTableProps = {\r\n  /** Pass your own data to override defaults */\r\n  data?: User[]\r\n  /** Total balance to show in the footer */\r\n  footerTotal?: string\r\n  /** Allows you to set a custom height for the scrollable section */\r\n  maxHeight?: string\r\n}\r\n\r\n/** Default table data */\r\nconst defaultUsers: User[] = [\r\n  { id: \"1\", name: \"Arjun Mehta\", email: \"arjun.mehta@company.com\", role: \"Manager\", status: \"Active\", balance: \"$1,250.00\" },\r\n  { id: \"2\", name: \"Hannah Park\", email: \"hannah.park@company.com\", role: \"Designer\", status: \"Active\", balance: \"$600.00\" },\r\n  { id: \"3\", name: \"Oliver Scott\", email: \"oliver.scott@company.com\", role: \"Engineer\", status: \"Inactive\", balance: \"$650.00\" },\r\n  { id: \"4\", name: \"Camila Torres\", email: \"camila.torres@company.com\", role: \"Engineer\", status: \"Active\", balance: \"$900.00\" },\r\n]\r\n\r\nexport default function TableDialog({\r\n  data = defaultUsers,\r\n  footerTotal = \"$3,400.00\",\r\n  maxHeight = \"400px\",\r\n}: ConfigurableEditableTableProps) {\r\n  const [users, setUsers] = useState<User[]>(data)\r\n  const [selected, setSelected] = useState<string[]>([])\r\n  const [editingUser, setEditingUser] = useState<User | null>(null)\r\n  const [editData, setEditData] = useState<Partial<User>>({})\r\n\r\n  const toggleSelect = (id: string) => {\r\n    setSelected((prev) =>\r\n      prev.includes(id) ? prev.filter((i) => i !== id) : [...prev, id]\r\n    )\r\n  }\r\n\r\n  const openEditDialog = (user: User) => {\r\n    setEditingUser(user)\r\n    setEditData({ ...user })\r\n  }\r\n\r\n  const saveEdit = () => {\r\n    if (!editingUser) return\r\n    setUsers((prev) =>\r\n      prev.map((u) => (u.id === editingUser.id ? { ...u, ...editData } as User : u))\r\n    )\r\n    setEditingUser(null)\r\n    setEditData({})\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-background border rounded-md shadow-sm overflow-hidden\">\r\n      <div className={`max-h-[${maxHeight}] overflow-y-auto`}>\r\n        <Table>\r\n          {/* Table Header */}\r\n          <TableHeader className=\"sticky top-0 z-10 bg-background\">\r\n            <TableRow>\r\n              <TableHead className=\"w-[40px]\">\r\n                <Checkbox\r\n                  checked={selected.length === users.length}\r\n                  onCheckedChange={(checked) =>\r\n                    setSelected(checked ? users.map((u) => u.id) : [])\r\n                  }\r\n                />\r\n              </TableHead>\r\n              <TableHead>Name</TableHead>\r\n              <TableHead>Email</TableHead>\r\n              <TableHead>Role</TableHead>\r\n              <TableHead>Status</TableHead>\r\n              <TableHead className=\"text-right\">Balance</TableHead>\r\n              <TableHead className=\"w-[50px]\"></TableHead>\r\n            </TableRow>\r\n          </TableHeader>\r\n\r\n          {/* Table Body */}\r\n          <TableBody>\r\n            {users.map((user) => (\r\n              <TableRow key={user.id} className=\"hover:bg-muted/40\">\r\n                <TableCell>\r\n                  <Checkbox\r\n                    checked={selected.includes(user.id)}\r\n                    onCheckedChange={() => toggleSelect(user.id)}\r\n                  />\r\n                </TableCell>\r\n                <TableCell className=\"font-medium\">{user.name}</TableCell>\r\n                <TableCell>{user.email}</TableCell>\r\n                <TableCell>{user.role}</TableCell>\r\n                <TableCell>\r\n                  <Badge variant={user.status === \"Active\" ? \"default\" : \"secondary\"}>\r\n                    {user.status}\r\n                  </Badge>\r\n                </TableCell>\r\n                <TableCell className=\"text-right\">{user.balance}</TableCell>\r\n                <TableCell>\r\n                  <DropdownMenu>\r\n                    <DropdownMenuTrigger asChild>\r\n                      <Button variant=\"ghost\" size=\"icon\">\r\n                        <MoreHorizontal className=\"w-4 h-4\" />\r\n                      </Button>\r\n                    </DropdownMenuTrigger>\r\n                    <DropdownMenuContent align=\"end\">\r\n                      <DropdownMenuItem onClick={() => openEditDialog(user)}>Edit</DropdownMenuItem>\r\n                      <DropdownMenuItem className=\"text-destructive\">Delete</DropdownMenuItem>\r\n                    </DropdownMenuContent>\r\n                  </DropdownMenu>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n\r\n          {/* Table Footer */}\r\n          <TableFooter className=\"sticky bottom-0 bg-background\">\r\n            <TableRow>\r\n              <TableCell colSpan={5}>\r\n                {selected.length > 0\r\n                  ? `${selected.length} selected`\r\n                  : \"No rows selected\"}\r\n              </TableCell>\r\n              <TableCell colSpan={2} className=\"text-right\">\r\n                Total: {footerTotal}\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </div>\r\n\r\n      {/* Edit Dialog */}\r\n      <Dialog open={!!editingUser} onOpenChange={() => setEditingUser(null)}>\r\n        <DialogContent className=\"sm:max-w-lg\">\r\n          <DialogHeader>\r\n            <DialogTitle>Edit User</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"grid gap-4 py-2\">\r\n            <Input\r\n              value={editData.name || \"\"}\r\n              onChange={(e) => setEditData({ ...editData, name: e.target.value })}\r\n              placeholder=\"Name\"\r\n            />\r\n            <Input\r\n              value={editData.email || \"\"}\r\n              onChange={(e) => setEditData({ ...editData, email: e.target.value })}\r\n              placeholder=\"Email\"\r\n            />\r\n            <Input\r\n              value={editData.role || \"\"}\r\n              onChange={(e) => setEditData({ ...editData, role: e.target.value })}\r\n              placeholder=\"Role\"\r\n            />\r\n            <Select\r\n              value={editData.status || \"Active\"}\r\n              onValueChange={(val) => setEditData({ ...editData, status: val as \"Active\" | \"Inactive\" })}\r\n            >\r\n              <SelectTrigger>\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"Active\">Active</SelectItem>\r\n                <SelectItem value=\"Inactive\">Inactive</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n            <Input\r\n              value={editData.balance || \"\"}\r\n              onChange={(e) => setEditData({ ...editData, balance: e.target.value })}\r\n              placeholder=\"Balance\"\r\n            />\r\n          </div>\r\n          <DialogFooter className=\"flex justify-end gap-2\">\r\n            <Button variant=\"outline\" onClick={() => setEditingUser(null)}>Cancel</Button>\r\n            <Button onClick={saveEdit}>Save</Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/table-dialog.tsx"
    }
  ]
}