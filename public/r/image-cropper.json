{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-cropper",
  "type": "registry:ui",
  "title": "Image Cropper",
  "description": "An image cropping tool with zoom and aspect ratio controls.",
  "dependencies": [
    "react-easy-crop"
  ],
  "registryDependencies": [
    "button",
    "select",
    "slider",
    "card",
    "input"
  ],
  "files": [
    {
      "path": "registry/ruixenui/image-cropper.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"@/components/ui/select\";\r\nimport { Slider } from \"@/components/ui/slider\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\n\r\n// /lib/cropImage.ts\r\nexport async function getCroppedImg(imageSrc: string, pixelCrop: any): Promise<string> {\r\n  const image = new Image();\r\n  image.src = imageSrc;\r\n  await new Promise((resolve) => (image.onload = resolve));\r\n\r\n  const canvas = document.createElement(\"canvas\");\r\n  canvas.width = pixelCrop.width;\r\n  canvas.height = pixelCrop.height;\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  ctx!.drawImage(\r\n    image,\r\n    pixelCrop.x,\r\n    pixelCrop.y,\r\n    pixelCrop.width,\r\n    pixelCrop.height,\r\n    0,\r\n    0,\r\n    pixelCrop.width,\r\n    pixelCrop.height\r\n  );\r\n\r\n  return new Promise((resolve) => {\r\n    canvas.toBlob((blob) => {\r\n      const url = URL.createObjectURL(blob!);\r\n      resolve(url);\r\n    }, \"image/png\");\r\n  });\r\n}\r\n\r\n\r\nexport default function ImageCropper() {\r\n  const [imageSrc, setImageSrc] = React.useState<string | null>(null);\r\n  const [crop, setCrop] = React.useState({ x: 0, y: 0 });\r\n  const [zoom, setZoom] = React.useState(1);\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = React.useState<any>(null);\r\n  const [aspect, setAspect] = React.useState<number | undefined>(1);\r\n  const [croppedImage, setCroppedImage] = React.useState<string | null>(null);\r\n\r\n  const onCropComplete = React.useCallback((croppedAreaPixels: any) => {\r\n    setCroppedAreaPixels(croppedAreaPixels);\r\n  }, []);\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(e.target.files[0]);\r\n      reader.onload = () => {\r\n        setImageSrc(reader.result as string);\r\n        setCroppedImage(null);\r\n      };\r\n    }\r\n  };\r\n\r\n  const handleCrop = async () => {\r\n    if (!imageSrc || !croppedAreaPixels) return;\r\n    const cropped = await getCroppedImg(imageSrc, croppedAreaPixels);\r\n    setCroppedImage(cropped);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"p-3 w-xl mx-auto\">\r\n      <CardHeader className=\"p-2\">\r\n        <CardTitle>Image Cropper</CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"flex flex-col gap-4 p-2\">\r\n        <Input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n\r\n        {imageSrc && (\r\n          <div className=\"relative w-full h-[400px] bg-gray-100\">\r\n            <Cropper\r\n              image={imageSrc}\r\n              crop={crop}\r\n              zoom={zoom}\r\n              aspect={aspect}\r\n              onCropChange={setCrop}\r\n              onZoomChange={setZoom}\r\n              onCropComplete={onCropComplete}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {imageSrc && (\r\n          <div className=\"flex flex-col gap-2 mt-2\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <span>Zoom:</span>\r\n              <Slider\r\n                value={[zoom]}\r\n                onValueChange={(v) => setZoom(v[0])}\r\n                min={1}\r\n                max={3}\r\n                step={0.01}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-2\">\r\n              <span>Aspect Ratio:</span>\r\n              <Select value={aspect?.toString()} onValueChange={(v) => setAspect(Number(v))}>\r\n                <SelectTrigger className=\"w-[140px]\">\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"1\">1:1 (Square)</SelectItem>\r\n                  <SelectItem value={(4 / 3).toString()}>4:3</SelectItem>\r\n                  <SelectItem value={(16 / 9).toString()}>16:9</SelectItem>\r\n                  <SelectItem value=\"undefined\">Free</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <Button className=\"mt-2\" onClick={handleCrop}>\r\n              Crop Image\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        {croppedImage && (\r\n          <div className=\"flex flex-col gap-2 mt-4\">\r\n            <h4 className=\"font-medium\">Cropped Image Preview:</h4>\r\n            <img src={croppedImage} alt=\"Cropped\" className=\"max-w-full rounded-md border\" />\r\n            <Button\r\n              variant=\"outline\"\r\n              className=\"mt-2\"\r\n              onClick={() => {\r\n                const link = document.createElement(\"a\");\r\n                link.href = croppedImage!;\r\n                link.download = \"cropped.png\";\r\n                link.click();\r\n              }}\r\n            >\r\n              Download\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/image-cropper.tsx"
    }
  ]
}