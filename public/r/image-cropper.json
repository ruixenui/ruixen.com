{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-cropper",
  "type": "registry:ui",
  "title": "Image Cropper",
  "description": "An image cropping tool with zoom and aspect ratio controls.",
  "dependencies": [
    "react-easy-crop"
  ],
  "registryDependencies": [
    "button",
    "select",
    "slider",
    "card",
    "input"
  ],
  "files": [
    {
      "path": "registry/ruixenui/image-cropper.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n} from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\n\n// /lib/cropImage.ts\nexport async function getCroppedImg(\n  imageSrc: string,\n  pixelCrop: any,\n): Promise<string> {\n  const image = new Image();\n  image.src = imageSrc;\n  await new Promise((resolve) => (image.onload = resolve));\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n  const ctx = canvas.getContext(\"2d\");\n\n  ctx!.drawImage(\n    image,\n    pixelCrop.x,\n    pixelCrop.y,\n    pixelCrop.width,\n    pixelCrop.height,\n    0,\n    0,\n    pixelCrop.width,\n    pixelCrop.height,\n  );\n\n  return new Promise((resolve) => {\n    canvas.toBlob((blob) => {\n      const url = URL.createObjectURL(blob!);\n      resolve(url);\n    }, \"image/png\");\n  });\n}\n\nexport default function ImageCropper() {\n  const [imageSrc, setImageSrc] = React.useState<string | null>(null);\n  const [crop, setCrop] = React.useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = React.useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = React.useState<any>(null);\n  const [aspect, setAspect] = React.useState<number | undefined>(1);\n  const [croppedImage, setCroppedImage] = React.useState<string | null>(null);\n\n  const onCropComplete = React.useCallback((croppedAreaPixels: any) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.readAsDataURL(e.target.files[0]);\n      reader.onload = () => {\n        setImageSrc(reader.result as string);\n        setCroppedImage(null);\n      };\n    }\n  };\n\n  const handleCrop = async () => {\n    if (!imageSrc || !croppedAreaPixels) return;\n    const cropped = await getCroppedImg(imageSrc, croppedAreaPixels);\n    setCroppedImage(cropped);\n  };\n\n  return (\n    <Card className=\"p-3 w-xl mx-auto\">\n      <CardHeader className=\"p-2\">\n        <CardTitle>Image Cropper</CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex flex-col gap-4 p-2\">\n        <Input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\n\n        {imageSrc && (\n          <div className=\"relative w-full h-[400px] bg-gray-100\">\n            <Cropper\n              image={imageSrc}\n              crop={crop}\n              zoom={zoom}\n              aspect={aspect}\n              onCropChange={setCrop}\n              onZoomChange={setZoom}\n              onCropComplete={onCropComplete}\n            />\n          </div>\n        )}\n\n        {imageSrc && (\n          <div className=\"flex flex-col gap-2 mt-2\">\n            <div className=\"flex items-center gap-2\">\n              <span>Zoom:</span>\n              <Slider\n                value={[zoom]}\n                onValueChange={(v) => setZoom(v[0])}\n                min={1}\n                max={3}\n                step={0.01}\n              />\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <span>Aspect Ratio:</span>\n              <Select\n                value={aspect?.toString()}\n                onValueChange={(v) => setAspect(Number(v))}\n              >\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1\">1:1 (Square)</SelectItem>\n                  <SelectItem value={(4 / 3).toString()}>4:3</SelectItem>\n                  <SelectItem value={(16 / 9).toString()}>16:9</SelectItem>\n                  <SelectItem value=\"undefined\">Free</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button className=\"mt-2\" onClick={handleCrop}>\n              Crop Image\n            </Button>\n          </div>\n        )}\n\n        {croppedImage && (\n          <div className=\"flex flex-col gap-2 mt-4\">\n            <h4 className=\"font-medium\">Cropped Image Preview:</h4>\n            <img\n              src={croppedImage}\n              alt=\"Cropped\"\n              className=\"max-w-full rounded-md border\"\n            />\n            <Button\n              variant=\"outline\"\n              className=\"mt-2\"\n              onClick={() => {\n                const link = document.createElement(\"a\");\n                link.href = croppedImage!;\n                link.download = \"cropped.png\";\n                link.click();\n              }}\n            >\n              Download\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/image-cropper.tsx"
    }
  ]
}