{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "advanced-image-uploader",
  "type": "registry:ui",
  "title": "Advanced Image Uploader",
  "description": "A drag-and-drop image uploader with cropping functionality.",
  "dependencies": [
    "react-easy-crop",
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button"
  ],
  "files": [
    {
      "path": "registry/ruixenui/advanced-image-uploader.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useState, useRef } from \"react\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Trash2, Crop } from \"lucide-react\";\r\n\r\n// /lib/cropImage.ts\r\nexport async function getCroppedImg(imageSrc: string, pixelCrop: any): Promise<string> {\r\n  const image = new Image();\r\n  image.src = imageSrc;\r\n  await new Promise((resolve) => (image.onload = resolve));\r\n\r\n  const canvas = document.createElement(\"canvas\");\r\n  canvas.width = pixelCrop.width;\r\n  canvas.height = pixelCrop.height;\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  ctx!.drawImage(\r\n    image,\r\n    pixelCrop.x,\r\n    pixelCrop.y,\r\n    pixelCrop.width,\r\n    pixelCrop.height,\r\n    0,\r\n    0,\r\n    pixelCrop.width,\r\n    pixelCrop.height\r\n  );\r\n\r\n  return new Promise((resolve) => {\r\n    canvas.toBlob((blob) => {\r\n      const url = URL.createObjectURL(blob!);\r\n      resolve(url);\r\n    }, \"image/png\");\r\n  });\r\n}\r\n\r\ntype UploadedImage = {\r\n  file: File;\r\n  preview: string;\r\n  cropped?: string;\r\n};\r\n\r\nexport default function AdvancedImageUploader() {\r\n  const [images, setImages] = useState<UploadedImage[]>([]);\r\n  const [cropImage, setCropImage] = useState<UploadedImage | null>(null);\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n  const [zoom, setZoom] = useState(1);\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState<any>(null);\r\n\r\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const handleFiles = (files: FileList) => {\r\n    const newImages: UploadedImage[] = Array.from(files).map((file) => ({\r\n      file,\r\n      preview: URL.createObjectURL(file),\r\n    }));\r\n    setImages((prev) => [...prev, ...newImages]);\r\n  };\r\n\r\n  const handleRemove = (index: number) => {\r\n    setImages((prev) => prev.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const showCropper = (image: UploadedImage) => setCropImage(image);\r\n\r\n  const saveCroppedImage = async () => {\r\n    if (!cropImage || !croppedAreaPixels) return;\r\n    const cropped = await getCroppedImg(cropImage.preview, croppedAreaPixels);\r\n    setImages((prev) =>\r\n      prev.map((img) =>\r\n        img.preview === cropImage.preview ? { ...img, cropped } : img\r\n      )\r\n    );\r\n    setCropImage(null);\r\n  };\r\n\r\n  // Drag & Drop Handlers\r\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n      handleFiles(e.dataTransfer.files);\r\n      e.dataTransfer.clearData();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-lg mx-auto\">\r\n      <CardHeader className=\"p-4\">\r\n        <CardTitle>Advanced Image Upload & Crop</CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"p-4\">\r\n        {/* Drag & Drop Area */}\r\n        <div\r\n          onDragOver={handleDragOver}\r\n          onDrop={handleDrop}\r\n          className=\"flex flex-col justify-center items-center border-2 border-dashed border p-8 rounded-lg cursor-pointer mb-4 border-gray-400 dark:border-gray-800 transition\"\r\n          onClick={() => fileInputRef.current?.click()}\r\n        >\r\n          <p className=\"text-muted-foreground\">Drag & Drop images here or click to select</p>\r\n          <input\r\n            type=\"file\"\r\n            ref={fileInputRef}\r\n            multiple\r\n            accept=\"image/*\"\r\n            onChange={(e) => e.target.files && handleFiles(e.target.files)}\r\n            className=\"hidden\"\r\n          />\r\n        </div>\r\n\r\n        {/* Image Previews */}\r\n        {images.length > 0 && (\r\n          <div className=\"mt-4 grid grid-cols-3 gap-4\">\r\n            {images.map((img, index) => (\r\n              <div key={index} className=\"relative group border rounded-lg overflow-hidden\">\r\n                <img\r\n                  src={img.cropped || img.preview}\r\n                  alt={`preview-${index}`}\r\n                  className=\"object-cover w-full h-24\"\r\n                />\r\n                <div className=\"absolute top-1 right-1 flex gap-1 opacity-0 group-hover:opacity-100 transition\">\r\n                  <Button size=\"icon\" variant=\"ghost\" onClick={() => showCropper(img)}>\r\n                    <Crop className=\"w-4 h-4\" />\r\n                  </Button>\r\n                  <Button size=\"icon\" variant=\"ghost\" onClick={() => handleRemove(index)}>\r\n                    <Trash2 className=\"w-4 h-4 text-red-500\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {/* Cropper Modal */}\r\n        {cropImage && (\r\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\">\r\n            <div className=\"bg-background p-4 rounded-lg w-[90%] max-w-md\">\r\n              <div className=\"relative h-64 w-full\">\r\n                <Cropper\r\n                  image={cropImage.preview}\r\n                  crop={crop}\r\n                  zoom={zoom}\r\n                  aspect={1}\r\n                  onCropChange={setCrop}\r\n                  onZoomChange={setZoom}\r\n                  onCropComplete={(_, croppedAreaPixels) =>\r\n                    setCroppedAreaPixels(croppedAreaPixels)\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"flex justify-between mt-4\">\r\n                <Button variant=\"outline\" onClick={() => setCropImage(null)}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={saveCroppedImage}>Save Crop</Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/advanced-image-uploader.tsx"
    }
  ]
}