{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "advanced-image-uploader",
  "type": "registry:ui",
  "title": "Advanced Image Uploader",
  "description": "A drag-and-drop image uploader with cropping functionality.",
  "dependencies": [
    "react-easy-crop",
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button"
  ],
  "files": [
    {
      "path": "registry/ruixenui/advanced-image-uploader.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useState, useRef } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Trash2, Crop } from \"lucide-react\";\n\n// /lib/cropImage.ts\nexport async function getCroppedImg(\n  imageSrc: string,\n  pixelCrop: any,\n): Promise<string> {\n  const image = new Image();\n  image.src = imageSrc;\n  await new Promise((resolve) => (image.onload = resolve));\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n  const ctx = canvas.getContext(\"2d\");\n\n  ctx!.drawImage(\n    image,\n    pixelCrop.x,\n    pixelCrop.y,\n    pixelCrop.width,\n    pixelCrop.height,\n    0,\n    0,\n    pixelCrop.width,\n    pixelCrop.height,\n  );\n\n  return new Promise((resolve) => {\n    canvas.toBlob((blob) => {\n      const url = URL.createObjectURL(blob!);\n      resolve(url);\n    }, \"image/png\");\n  });\n}\n\ntype UploadedImage = {\n  file: File;\n  preview: string;\n  cropped?: string;\n};\n\nexport default function AdvancedImageUploader() {\n  const [images, setImages] = useState<UploadedImage[]>([]);\n  const [cropImage, setCropImage] = useState<UploadedImage | null>(null);\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState<any>(null);\n\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n  const handleFiles = (files: FileList) => {\n    const newImages: UploadedImage[] = Array.from(files).map((file) => ({\n      file,\n      preview: URL.createObjectURL(file),\n    }));\n    setImages((prev) => [...prev, ...newImages]);\n  };\n\n  const handleRemove = (index: number) => {\n    setImages((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  const showCropper = (image: UploadedImage) => setCropImage(image);\n\n  const saveCroppedImage = async () => {\n    if (!cropImage || !croppedAreaPixels) return;\n    const cropped = await getCroppedImg(cropImage.preview, croppedAreaPixels);\n    setImages((prev) =>\n      prev.map((img) =>\n        img.preview === cropImage.preview ? { ...img, cropped } : img,\n      ),\n    );\n    setCropImage(null);\n  };\n\n  // Drag & Drop Handlers\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      handleFiles(e.dataTransfer.files);\n      e.dataTransfer.clearData();\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-lg mx-auto\">\n      <CardHeader className=\"p-4\">\n        <CardTitle>Advanced Image Upload & Crop</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-4\">\n        {/* Drag & Drop Area */}\n        <div\n          onDragOver={handleDragOver}\n          onDrop={handleDrop}\n          className=\"flex flex-col justify-center items-center border-2 border-dashed border p-8 rounded-lg cursor-pointer mb-4 border-gray-400 dark:border-gray-800 transition\"\n          onClick={() => fileInputRef.current?.click()}\n        >\n          <p className=\"text-muted-foreground\">\n            Drag & Drop images here or click to select\n          </p>\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            multiple\n            accept=\"image/*\"\n            onChange={(e) => e.target.files && handleFiles(e.target.files)}\n            className=\"hidden\"\n          />\n        </div>\n\n        {/* Image Previews */}\n        {images.length > 0 && (\n          <div className=\"mt-4 grid grid-cols-3 gap-4\">\n            {images.map((img, index) => (\n              <div\n                key={index}\n                className=\"relative group border rounded-lg overflow-hidden\"\n              >\n                <img\n                  src={img.cropped || img.preview}\n                  alt={`preview-${index}`}\n                  className=\"object-cover w-full h-24\"\n                />\n                <div className=\"absolute top-1 right-1 flex gap-1 opacity-0 group-hover:opacity-100 transition\">\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    onClick={() => showCropper(img)}\n                  >\n                    <Crop className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    onClick={() => handleRemove(index)}\n                  >\n                    <Trash2 className=\"w-4 h-4 text-red-500\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Cropper Modal */}\n        {cropImage && (\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\">\n            <div className=\"bg-background p-4 rounded-lg w-[90%] max-w-md\">\n              <div className=\"relative h-64 w-full\">\n                <Cropper\n                  image={cropImage.preview}\n                  crop={crop}\n                  zoom={zoom}\n                  aspect={1}\n                  onCropChange={setCrop}\n                  onZoomChange={setZoom}\n                  onCropComplete={(_, croppedAreaPixels) =>\n                    setCroppedAreaPixels(croppedAreaPixels)\n                  }\n                />\n              </div>\n              <div className=\"flex justify-between mt-4\">\n                <Button variant=\"outline\" onClick={() => setCropImage(null)}>\n                  Cancel\n                </Button>\n                <Button onClick={saveCroppedImage}>Save Crop</Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/advanced-image-uploader.tsx"
    }
  ]
}