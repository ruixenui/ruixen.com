{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "particle-field",
  "type": "registry:ui",
  "title": "Particle Field",
  "description": "An interactive particle field with mouse attraction and connection lines.",
  "files": [
    {
      "path": "registry/ruixenui/particle-field.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useEffect, CSSProperties } from \"react\";\n\ninterface Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  size: number;\n}\n\ninterface ParticleFieldProps {\n  particleCount?: number;\n  particleSize?: number;\n  particleColor?: string;\n  backgroundColor?: string;\n  speed?: number;\n  connectDistance?: number;\n  style?: CSSProperties;\n  className?: string;\n}\n\nconst ParticleField: React.FC<ParticleFieldProps> = ({\n  particleCount = 100,\n  particleSize = 2,\n  particleColor = \"white\",\n  backgroundColor = \"black\",\n  speed = 0.5,\n  connectDistance = 120,\n  style = {},\n  className = \"\",\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const ctxRef = useRef<CanvasRenderingContext2D | null>(null);\n  const particlesRef = useRef<Particle[]>([]);\n  const frameRef = useRef<number | null>(null);\n  const mouseRef = useRef<{ x: number; y: number } | null>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    ctxRef.current = ctx;\n\n    function resize() {\n      if (!canvas) return;\n      canvas.width = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n    }\n\n    function initParticles() {\n      if (!canvas) return;\n      particlesRef.current = Array.from({ length: particleCount }, () => ({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        vx: (Math.random() - 0.5) * speed,\n        vy: (Math.random() - 0.5) * speed,\n        size: Math.random() * particleSize + 1,\n      }));\n    }\n\n    function drawParticles() {\n      if (!ctx || !canvas) return;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.fillStyle = particleColor;\n\n      const particles = particlesRef.current;\n      particles.forEach((p) => {\n        ctx.beginPath();\n        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);\n        ctx.fill();\n      });\n\n      // Draw connections\n      for (let i = 0; i < particles.length; i++) {\n        for (let j = i + 1; j < particles.length; j++) {\n          const dx = particles[i].x - particles[j].x;\n          const dy = particles[i].y - particles[j].y;\n          const dist = Math.sqrt(dx * dx + dy * dy);\n\n          if (dist < connectDistance) {\n            ctx.strokeStyle = `rgba(255, 255, 255, ${1 - dist / connectDistance})`;\n            ctx.lineWidth = 0.5;\n            ctx.beginPath();\n            ctx.moveTo(particles[i].x, particles[i].y);\n            ctx.lineTo(particles[j].x, particles[j].y);\n            ctx.stroke();\n          }\n        }\n      }\n    }\n\n    function updateParticles() {\n      if (!canvas) return;\n      const particles = particlesRef.current;\n      particles.forEach((p) => {\n        p.x += p.vx;\n        p.y += p.vy;\n\n        if (p.x < 0 || p.x > canvas.width) p.vx *= -1;\n        if (p.y < 0 || p.y > canvas.height) p.vy *= -1;\n\n        // Mouse attraction\n        if (mouseRef.current) {\n          const dx = p.x - mouseRef.current.x;\n          const dy = p.y - mouseRef.current.y;\n          const dist = Math.sqrt(dx * dx + dy * dy);\n          if (dist < 100) {\n            p.vx += dx * -0.0005;\n            p.vy += dy * -0.0005;\n          }\n        }\n      });\n    }\n\n    function animate() {\n      updateParticles();\n      drawParticles();\n      frameRef.current = requestAnimationFrame(animate);\n    }\n\n    function onMouseMove(e: MouseEvent) {\n      if (!canvas) return;\n      const rect = canvas.getBoundingClientRect();\n      mouseRef.current = {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top,\n      };\n    }\n\n    function onMouseLeave() {\n      mouseRef.current = null;\n    }\n\n    resize();\n    initParticles();\n    animate();\n\n    window.addEventListener(\"resize\", resize);\n    canvas.addEventListener(\"mousemove\", onMouseMove);\n    canvas.addEventListener(\"mouseleave\", onMouseLeave);\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n      canvas.removeEventListener(\"mousemove\", onMouseMove);\n      canvas.removeEventListener(\"mouseleave\", onMouseLeave);\n      if (frameRef.current) cancelAnimationFrame(frameRef.current);\n    };\n  }, [particleCount, particleColor, speed, particleSize, connectDistance]);\n\n  return (\n    <div\n      className={`relative w-full h-full overflow-hidden ${className}`}\n      style={{ backgroundColor, ...style }}\n    >\n      <canvas ref={canvasRef} className=\"w-full h-full block\" />\n    </div>\n  );\n};\n\nexport default ParticleField;\n",
      "type": "registry:ui",
      "target": "components/ruixen/particle-field.tsx"
    }
  ]
}