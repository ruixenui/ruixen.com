{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar-twin",
  "type": "registry:ui",
  "title": "Calendar Twin",
  "description": "A dual-view calendar component with month and year selection modes.",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/ruixenui/calendar-twin.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { addMonths, format, startOfYear } from \"date-fns\";\n\ninterface CalendarTwinProps {\n  value?: Date;\n  onChange?: (date: Date) => void;\n  className?: string;\n  yearRange?: [number, number]; // [start, end] years\n}\n\nexport function CalendarTwin({\n  value,\n  onChange,\n  className,\n  yearRange = [2000, 2035],\n}: CalendarTwinProps) {\n  const [view, setView] = React.useState<\"month\" | \"year\">(\"month\");\n  const [current, setCurrent] = React.useState<Date>(value ?? new Date());\n\n  const handleSelect = (date: Date) => {\n    onChange?.(date);\n  };\n\n  const goPrev = () => {\n    if (view === \"month\") setCurrent(addMonths(current, -1));\n    if (view === \"year\") {\n      const prev = new Date(current);\n      prev.setFullYear(prev.getFullYear() - 12);\n      setCurrent(prev);\n    }\n  };\n\n  const goNext = () => {\n    if (view === \"month\") setCurrent(addMonths(current, 1));\n    if (view === \"year\") {\n      const next = new Date(current);\n      next.setFullYear(next.getFullYear() + 12);\n      setCurrent(next);\n    }\n  };\n\n  const renderMonth = (month: Date) => {\n    const start = new Date(month.getFullYear(), month.getMonth(), 1);\n    const end = new Date(month.getFullYear(), month.getMonth() + 1, 0);\n    const days: Date[] = [];\n    for (let i = 1; i <= end.getDate(); i++) {\n      days.push(new Date(month.getFullYear(), month.getMonth(), i));\n    }\n\n    return (\n      <div className=\"w-full\">\n        <div className=\"mb-2 text-center text-sm font-medium\">\n          {format(month, \"MMMM yyyy\")}\n        </div>\n        <div className=\"grid grid-cols-7 text-xs text-muted-foreground\">\n          {[\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"].map((d) => (\n            <div key={d} className=\"h-7 flex items-center justify-center\">\n              {d}\n            </div>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-7\">\n          {Array.from({ length: start.getDay() }).map((_, i) => (\n            <div key={`empty-${i}`} className=\"h-9\" />\n          ))}\n          {days.map((day) => {\n            const isSelected =\n              value && day.toDateString() === value.toDateString();\n            return (\n              <button\n                key={day.toISOString()}\n                onClick={() => handleSelect(day)}\n                className={cn(\n                  \"h-9 w-9 m-0.5 flex items-center justify-center rounded-md text-sm transition-colors\",\n                  isSelected\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"hover:bg-accent hover:text-foreground\",\n                )}\n              >\n                {day.getDate()}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  const renderYearGrid = () => {\n    const currentYear = current.getFullYear();\n    const start = Math.max(yearRange[0], currentYear - (currentYear % 12));\n    const years = Array.from({ length: 12 }, (_, i) => start + i);\n\n    return (\n      <div className=\"p-2\">\n        <div className=\"grid grid-cols-3 gap-2\">\n          {years.map((y) => (\n            <button\n              key={y}\n              onClick={() => {\n                const newDate = startOfYear(current);\n                newDate.setFullYear(y);\n                setCurrent(newDate);\n                setView(\"month\");\n              }}\n              className={cn(\n                \"h-10 rounded-md text-sm font-medium transition-colors\",\n                y === currentYear\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"hover:bg-accent hover:text-foreground\",\n              )}\n            >\n              {y}\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div\n      className={cn(\"rounded-lg border bg-background p-3 w-[600px]\", className)}\n    >\n      <div className=\"flex items-center justify-between mb-2\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={goPrev}\n          className=\"h-8 w-8\"\n        >\n          <ChevronLeft className=\"h-4 w-4\" />\n        </Button>\n\n        <button\n          onClick={() => setView(view === \"month\" ? \"year\" : \"month\")}\n          className=\"text-sm font-semibold hover:underline\"\n        >\n          {view === \"month\"\n            ? format(current, \"MMMM yyyy\")\n            : `${current.getFullYear()}`}\n        </button>\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={goNext}\n          className=\"h-8 w-8\"\n        >\n          <ChevronRight className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {view === \"month\" ? (\n        <div className=\"flex gap-6\">\n          {renderMonth(current)}\n          {renderMonth(addMonths(current, 1))}\n        </div>\n      ) : (\n        renderYearGrid()\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/calendar-twin.tsx"
    }
  ]
}