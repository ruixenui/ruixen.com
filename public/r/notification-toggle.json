{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "notification-toggle",
  "type": "registry:ui",
  "title": "Notification Toggle",
  "description": "A versatile notification component that toggles between carousel and list view modes.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/notification-toggle.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Bell,\n  ChevronLeft,\n  ChevronRight,\n  List,\n  PanelsTopLeft,\n  Info,\n  AlertCircle,\n  Calendar,\n} from \"lucide-react\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface NotificationItem {\n  id: string;\n  icon: React.ReactNode;\n  title: string;\n  description: string;\n  time: string;\n}\n\ninterface NotificationsProps {\n  items?: NotificationItem[];\n  placement?: \"top\" | \"bottom\" | \"left\" | \"right\";\n}\n\nconst defaultNotifications: NotificationItem[] = [\n  {\n    id: \"1\",\n    icon: <Info className=\"h-4 w-4\" />,\n    title: \"Welcome\",\n    description: \"Thanks for checking out notifications.\",\n    time: \"just now\",\n  },\n  {\n    id: \"2\",\n    icon: <AlertCircle className=\"h-4 w-4\" />,\n    title: \"System Update\",\n    description: \"A new feature has been rolled out.\",\n    time: \"1h ago\",\n  },\n  {\n    id: \"3\",\n    icon: <Calendar className=\"h-4 w-4\" />,\n    title: \"Reminder\",\n    description: \"Complete your profile setup.\",\n    time: \"3h ago\",\n  },\n];\n\nexport default function NotificationsToggle({\n  items = defaultNotifications,\n  placement = \"bottom\",\n}: NotificationsProps) {\n  const [index, setIndex] = React.useState(0);\n  const [isCarousel, setIsCarousel] = React.useState(true);\n\n  const next = () => setIndex((prev) => (prev + 1) % items.length);\n  const prev = () =>\n    setIndex((prev) => (prev - 1 + items.length) % items.length);\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <button className=\"relative inline-flex items-center justify-center rounded-full p-2 hover:bg-muted\">\n          <Bell className=\"h-5 w-5\" />\n          {items.length > 0 && (\n            <Badge\n              variant=\"default\"\n              className=\"absolute -top-1 -right-1 text-xs px-1.5 py-0\"\n            >\n              {items.length}\n            </Badge>\n          )}\n        </button>\n      </PopoverTrigger>\n\n      <PopoverContent side={placement} align=\"center\" className=\"w-80 p-0\">\n        {/* Header with toggle */}\n        <div className=\"flex justify-between items-center border-b px-4 py-2\">\n          <h2 className=\"text-sm font-medium\">Notifications</h2>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setIsCarousel((prev) => !prev)}\n          >\n            {isCarousel ? (\n              <List className=\"h-4 w-4\" />\n            ) : (\n              <PanelsTopLeft className=\"h-4 w-4\" />\n            )}\n          </Button>\n        </div>\n\n        {items.length === 0 ? (\n          <div className=\"p-4 text-sm text-muted-foreground text-center\">\n            No notifications\n          </div>\n        ) : isCarousel ? (\n          // Carousel view\n          <div className=\"relative flex items-center w-full py-4\">\n            {/* Prev button */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute left-0 z-10\"\n              onClick={prev}\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n\n            {/* Notification card */}\n            <Card className=\"w-full mx-8 p-4 flex flex-col items-start text-left transition-all duration-300 shadow-none border-0\">\n              <div className=\"flex items-center gap-2 mb-2 w-full justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  {items[index].icon}\n                  <span className=\"font-medium text-sm\">\n                    {items[index].title}\n                  </span>\n                </div>\n                <span className=\"text-xs text-muted-foreground\">\n                  {items[index].time}\n                </span>\n              </div>\n              <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                {items[index].description}\n              </p>\n            </Card>\n\n            {/* Next button */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute right-0 z-10\"\n              onClick={next}\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        ) : (\n          // Vertical list view\n          <div className=\"max-h-80 overflow-y-auto divide-y divide-border\">\n            {items.map((item) => (\n              <div key={item.id} className=\"p-4 hover:bg-muted/50 transition\">\n                <div className=\"flex justify-between items-center mb-1\">\n                  <div className=\"flex items-center gap-2\">\n                    {item.icon}\n                    <span className=\"font-medium text-sm\">{item.title}</span>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {item.time}\n                  </span>\n                </div>\n                <p className=\"text-xs text-muted-foreground leading-relaxed\">\n                  {item.description}\n                </p>\n              </div>\n            ))}\n          </div>\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/notification-toggle.tsx"
    }
  ]
}