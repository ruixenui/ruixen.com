{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "playlist-carousel",
  "type": "registry:ui",
  "title": "Playlist Carousel",
  "description": "Horizontal scrolling playlist with individual audio players and progress indicators.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/playlist-carousel.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { LucidePlay, LucidePause } from \"lucide-react\";\n\nexport interface PlaylistItem {\n  id: string;\n  title: string;\n  duration: string;\n  image: string;\n  audioSrc: string;\n}\n\ninterface PlaylistCarouselProps {\n  items: PlaylistItem[];\n  width?: number;\n  height?: number;\n  className?: string;\n}\n\nexport default function PlaylistCarousel({\n  items,\n  width = 200,\n  height = 250,\n  className,\n}: PlaylistCarouselProps) {\n  const [playingId, setPlayingId] = React.useState<string | null>(null);\n  const [progressMap, setProgressMap] = React.useState<Record<string, number>>(\n    {},\n  );\n  const [audioMap, setAudioMap] = React.useState<\n    Record<string, HTMLAudioElement>\n  >({});\n\n  // Setup audio instances and listeners on client side only\n  React.useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      const newAudioMap: Record<string, HTMLAudioElement> = {};\n\n      items.forEach((item) => {\n        const audio = new Audio(item.audioSrc);\n        newAudioMap[item.id] = audio;\n\n        const updateProgress = () => {\n          setProgressMap((prev) => ({\n            ...prev,\n            [item.id]: (audio.currentTime / (audio.duration || 1)) * 100,\n          }));\n        };\n\n        audio.addEventListener(\"timeupdate\", updateProgress);\n        audio.addEventListener(\"ended\", () => setPlayingId(null));\n      });\n\n      setAudioMap(newAudioMap);\n\n      return () => {\n        Object.values(newAudioMap).forEach((audio) => {\n          audio.pause();\n          audio.removeEventListener(\"timeupdate\", () => {});\n          audio.removeEventListener(\"ended\", () => {});\n        });\n      };\n    }\n  }, [items]);\n\n  const togglePlay = (id: string) => {\n    const currentAudio = audioMap[id];\n    if (!currentAudio) return;\n\n    if (playingId && playingId !== id && audioMap[playingId]) {\n      audioMap[playingId].pause();\n      audioMap[playingId].currentTime = 0;\n    }\n\n    if (playingId === id && !currentAudio.paused) {\n      currentAudio.pause();\n      setPlayingId(null);\n    } else {\n      currentAudio.play();\n      setPlayingId(id);\n    }\n  };\n\n  const formatTime = (audio: HTMLAudioElement) => {\n    const minutes = Math.floor(audio.currentTime / 60);\n    const seconds = Math.floor(audio.currentTime % 60);\n    return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\n  };\n\n  return (\n    <div className={cn(\"flex overflow-x-auto gap-4 p-4\", className)}>\n      {items.map((item) => {\n        const progress = progressMap[item.id] || 0;\n        const audio = audioMap[item.id];\n        return (\n          <div\n            key={item.id}\n            className=\"flex-shrink-0 rounded-xl shadow-md bg-white dark:bg-gray-800 flex flex-col items-center p-3\"\n            style={{ width, height }}\n          >\n            <img\n              src={item.image}\n              alt={item.title}\n              className=\"w-full h-32 object-cover rounded-md mb-3\"\n            />\n            <h4 className=\"text-sm font-semibold text-gray-900 dark:text-gray-100 text-center mb-1\">\n              {item.title}\n            </h4>\n\n            {/* Linear progress */}\n            <div className=\"w-full h-1 bg-gray-200 dark:bg-gray-700 rounded-full mb-2\">\n              <div\n                className=\"h-full bg-black dark:bg-white rounded-full\"\n                style={{ width: `${progress}%` }}\n              />\n            </div>\n            <p className=\"text-xs text-gray-500 dark:text-gray-400 mb-2\">\n              {audio\n                ? `${formatTime(audio)} / ${item.duration}`\n                : `0:00 / ${item.duration}`}\n            </p>\n\n            {/* Circular button with progress */}\n            <div className=\"relative\">\n              <svg className=\"w-12 h-12\">\n                <circle\n                  cx=\"24\"\n                  cy=\"24\"\n                  r=\"22\"\n                  stroke=\"gray\"\n                  strokeWidth=\"3\"\n                  fill=\"none\"\n                />\n                <circle\n                  cx=\"24\"\n                  cy=\"24\"\n                  r=\"22\"\n                  stroke=\"black\"\n                  strokeWidth=\"3\"\n                  fill=\"none\"\n                  strokeDasharray={138.2} // 2Ï€r\n                  strokeDashoffset={138.2 - (138.2 * progress) / 100}\n                  transform=\"rotate(-90 24 24)\"\n                />\n              </svg>\n              <Button\n                className=\"absolute top-0 left-0 w-12 h-12 flex items-center justify-center rounded-full p-0\"\n                onClick={() => togglePlay(item.id)}\n                variant=\"outline\"\n              >\n                {playingId === item.id ? (\n                  <LucidePause className=\"w-5 h-5\" />\n                ) : (\n                  <LucidePlay className=\"w-5 h-5\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/playlist-carousel.tsx"
    }
  ]
}