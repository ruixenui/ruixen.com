{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "waveform-player",
  "type": "registry:ui",
  "title": "Waveform Player",
  "description": "Audio player with visual waveform representation and seek controls.",
  "dependencies": [],
  "files": [
    {
      "path": "registry/ruixenui/waveform-player.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface WaveformPlayerProps {\n  audioSrc: string;\n  width?: number;\n  height?: number;\n  className?: string;\n}\n\nexport default function WaveformPlayer({\n  audioSrc,\n  width = 400,\n  height = 60,\n  className,\n}: WaveformPlayerProps) {\n  const [audio, setAudio] = React.useState<HTMLAudioElement | null>(null);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    // Only create Audio instance on client side\n    if (typeof window !== \"undefined\") {\n      const audioElement = new Audio(audioSrc);\n      setAudio(audioElement);\n\n      const handleTimeUpdate = () => {\n        setProgress((audioElement.currentTime / audioElement.duration) * 100);\n      };\n\n      audioElement.addEventListener(\"timeupdate\", handleTimeUpdate);\n      return () => {\n        audioElement.removeEventListener(\"timeupdate\", handleTimeUpdate);\n        audioElement.pause();\n      };\n    }\n  }, [audioSrc]);\n\n  const togglePlay = () => {\n    if (!audio) return;\n    if (isPlaying) audio.pause();\n    else audio.play();\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleSeek = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!audio) return;\n    const rect = e.currentTarget.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const seekTime = (clickX / rect.width) * audio.duration;\n    audio.currentTime = seekTime;\n  };\n\n  return (\n    <div className={cn(\"flex flex-col items-center gap-2\", className)}>\n      <div\n        className=\"relative w-full rounded-md cursor-pointer overflow-hidden\"\n        style={{ width, height }}\n        onClick={handleSeek}\n      >\n        {/* Background wave */}\n        <div className=\"absolute inset-0 flex justify-between items-center px-0.5\">\n          {Array.from({ length: 40 }).map((_, idx) => (\n            <div\n              key={idx}\n              className=\"rounded-sm bg-black dark:bg-white\"\n              style={{\n                width: 2,\n                height: `${10 + Math.random() * (height - 20)}px`,\n              }}\n            />\n          ))}\n        </div>\n\n        {/* Progress overlay */}\n        <div\n          className=\"absolute top-0 left-0 h-full rounded-md bg-black dark:bg-white\"\n          style={{\n            width: `${progress}%`,\n          }}\n        />\n      </div>\n\n      <Button\n        onClick={togglePlay}\n        className=\"w-20 text-sm px-2 py-1\"\n        variant=\"outline\"\n      >\n        {isPlaying ? \"Pause\" : \"Play\"}\n      </Button>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/waveform-player.tsx"
    }
  ]
}