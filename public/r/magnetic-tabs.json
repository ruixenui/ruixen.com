{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "magnetic-tabs",
  "type": "registry:ui",
  "title": "Magnetic Tabs",
  "description": "Tab component with magnetic hover effects and smooth indicator animations.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/ruixenui/magnetic-tabs.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  motion,\n  AnimatePresence,\n  useMotionValue,\n  useSpring,\n} from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface MagneticTabItem {\n  value: string;\n  label: string;\n  content?: React.ReactNode;\n}\n\ninterface MagneticTabsProps {\n  items?: MagneticTabItem[];\n  defaultValue?: string;\n  className?: string;\n  indicatorPadding?: number; // padding around tab for indicator\n}\n\nexport default function MagneticTabs({\n  items = [\n    { value: \"overview\", label: \"Overview\", content: \"Overview content here.\" },\n    { value: \"activity\", label: \"Activity\", content: \"Activity content here.\" },\n    { value: \"settings\", label: \"Settings\", content: \"Settings content here.\" },\n    { value: \"faq\", label: \"FAQ\", content: \"FAQ content here.\" },\n  ],\n  defaultValue = \"overview\",\n  className,\n  indicatorPadding = 6,\n}: MagneticTabsProps) {\n  const [active, setActive] = React.useState(defaultValue);\n  const [hovered, setHovered] = React.useState<string | null>(null);\n\n  const containerRef = React.useRef<HTMLDivElement | null>(null);\n  const tabRefs = React.useRef<Array<HTMLButtonElement | null>>([]);\n  const indicatorX = useMotionValue(0);\n  const indicatorWidth = useMotionValue(0);\n  const indicatorTop = useMotionValue(0);\n  const indicatorHeight = useMotionValue(0);\n\n  const springConfig = { stiffness: 300, damping: 25 };\n  const springX = useSpring(indicatorX, springConfig);\n  const springW = useSpring(indicatorWidth, springConfig);\n  const springTop = useSpring(indicatorTop, springConfig);\n  const springH = useSpring(indicatorHeight, springConfig);\n\n  const updateIndicator = (value: string) => {\n    const idx = items.findIndex((item) => item.value === value);\n    const btn = tabRefs.current[idx];\n    const container = containerRef.current;\n    if (btn && container) {\n      const cRect = container.getBoundingClientRect();\n      const tRect = btn.getBoundingClientRect();\n      indicatorX.set(tRect.left - cRect.left - indicatorPadding);\n      indicatorWidth.set(tRect.width + indicatorPadding * 2);\n      indicatorTop.set(tRect.top - cRect.top - indicatorPadding);\n      indicatorHeight.set(tRect.height + indicatorPadding * 2);\n    }\n  };\n\n  React.useEffect(() => {\n    updateIndicator(active);\n    const ro = new ResizeObserver(() => updateIndicator(active));\n    if (containerRef.current) ro.observe(containerRef.current);\n    tabRefs.current.forEach((el) => el && ro.observe(el));\n    window.addEventListener(\"resize\", () => updateIndicator(active));\n    return () => {\n      ro.disconnect();\n      window.removeEventListener(\"resize\", () => updateIndicator(active));\n    };\n  }, [active, indicatorPadding]);\n\n  React.useEffect(() => {\n    if (hovered) updateIndicator(hovered);\n    else updateIndicator(active);\n  }, [hovered, active, indicatorPadding]);\n\n  return (\n    <div\n      className={cn(\n        \"flex flex-col items-center justify-center min-h-[70vh]\",\n        className,\n      )}\n    >\n      <Tabs\n        defaultValue={defaultValue}\n        onValueChange={setActive}\n        className=\"w-full max-w-lg\"\n      >\n        <TabsList\n          ref={containerRef}\n          className=\"relative flex justify-center gap-2 p-2 bg-background/60 \"\n        >\n          {/* Magnetic Indicator */}\n          <motion.div\n            style={{\n              left: springX,\n              width: springW,\n              top: springTop,\n              height: springH,\n            }}\n            className=\"absolute rounded-lg bg-primary/30 pointer-events-none\"\n          >\n            <motion.div\n              className={cn(\n                \"absolute inset-0 rounded-lg filter blur-md opacity-40\",\n              )}\n              initial={false}\n              animate={{ opacity: 0.4 }}\n            />\n          </motion.div>\n\n          {items.map((item, i) => (\n            <TabsTrigger\n              key={item.value}\n              ref={(el) => (tabRefs.current[i] = el)}\n              value={item.value}\n              asChild\n              onMouseEnter={() => setHovered(item.value)}\n              onMouseLeave={() => setHovered(null)}\n            >\n              <motion.button\n                className={cn(\n                  \"relative z-10 px-3 py-2 rounded-lg text-sm font-medium transition-colors\",\n                  active === item.value ? \"text-white\" : \"text-foreground/80\",\n                )}\n                whileHover={{ scale: 1.05 }}\n                transition={{ type: \"spring\", stiffness: 300, damping: 25 }}\n              >\n                {item.label}\n              </motion.button>\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        {/* Tab Content */}\n        <div className=\"mt-4 w-full max-w-lg relative\">\n          <AnimatePresence mode=\"wait\">\n            {items.map(\n              (item) =>\n                item.value === active && (\n                  <motion.div\n                    key={item.value}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -10 }}\n                    transition={{ type: \"spring\", stiffness: 250, damping: 25 }}\n                    className=\"absolute inset-0 p-4 bg-card rounded-lg\"\n                  >\n                    {item.content}\n                  </motion.div>\n                ),\n            )}\n          </AnimatePresence>\n        </div>\n      </Tabs>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/magnetic-tabs.tsx"
    }
  ]
}