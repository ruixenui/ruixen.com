{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sortable-table",
  "type": "registry:ui",
  "title": "Sortable Table",
  "description": "A sortable and filterable data table with search functionality.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "table",
    "input",
    "button",
    "badge"
  ],
  "files": [
    {
      "path": "registry/ruixenui/sortable-table.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowUpDown, Search } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport type TableUser = {\n  id: string;\n  name: string;\n  email: string;\n  department: string;\n  role: string;\n  status: \"Active\" | \"Inactive\" | \"Pending\";\n  salary: number;\n};\n\ntype SortableTableProps = {\n  data?: TableUser[];\n  title?: string;\n};\n\nconst defaultData: TableUser[] = [\n  {\n    id: \"1\",\n    name: \"Alice Johnson\",\n    email: \"alice.j@company.com\",\n    department: \"Engineering\",\n    role: \"Senior Engineer\",\n    status: \"Active\",\n    salary: 120000,\n  },\n  {\n    id: \"2\",\n    name: \"Bob Smith\",\n    email: \"bob.s@company.com\",\n    department: \"Marketing\",\n    role: \"Marketing Manager\",\n    status: \"Active\",\n    salary: 95000,\n  },\n  {\n    id: \"3\",\n    name: \"Charlie Brown\",\n    email: \"charlie.b@company.com\",\n    department: \"Sales\",\n    role: \"Sales Rep\",\n    status: \"Inactive\",\n    salary: 70000,\n  },\n  {\n    id: \"4\",\n    name: \"Diana Prince\",\n    email: \"diana.p@company.com\",\n    department: \"Engineering\",\n    role: \"Lead Developer\",\n    status: \"Active\",\n    salary: 135000,\n  },\n  {\n    id: \"5\",\n    name: \"Ethan Hunt\",\n    email: \"ethan.h@company.com\",\n    department: \"Operations\",\n    role: \"Operations Manager\",\n    status: \"Pending\",\n    salary: 85000,\n  },\n  {\n    id: \"6\",\n    name: \"Fiona Green\",\n    email: \"fiona.g@company.com\",\n    department: \"HR\",\n    role: \"HR Specialist\",\n    status: \"Active\",\n    salary: 75000,\n  },\n  {\n    id: \"7\",\n    name: \"George Miller\",\n    email: \"george.m@company.com\",\n    department: \"Engineering\",\n    role: \"Junior Developer\",\n    status: \"Active\",\n    salary: 80000,\n  },\n  {\n    id: \"8\",\n    name: \"Hannah Lee\",\n    email: \"hannah.l@company.com\",\n    department: \"Sales\",\n    role: \"Account Executive\",\n    status: \"Active\",\n    salary: 90000,\n  },\n];\n\nexport default function SortableTable({\n  data = defaultData,\n  title = \"Employee Directory\",\n}: SortableTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortColumn, setSortColumn] = useState<keyof TableUser | null>(null);\n  const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"asc\");\n\n  const handleSort = (column: keyof TableUser) => {\n    if (sortColumn === column) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortColumn(column);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  const filteredData = React.useMemo(() => {\n    return data.filter((user) =>\n      Object.values(user).some((value) =>\n        value.toString().toLowerCase().includes(searchTerm.toLowerCase()),\n      ),\n    );\n  }, [data, searchTerm]);\n\n  const sortedData = React.useMemo(() => {\n    if (!sortColumn) return filteredData;\n\n    return [...filteredData].sort((a, b) => {\n      const aVal = a[sortColumn];\n      const bVal = b[sortColumn];\n\n      if (typeof aVal === \"number\" && typeof bVal === \"number\") {\n        return sortDirection === \"asc\" ? aVal - bVal : bVal - aVal;\n      }\n\n      const aStr = String(aVal).toLowerCase();\n      const bStr = String(bVal).toLowerCase();\n\n      if (sortDirection === \"asc\") {\n        return aStr < bStr ? -1 : aStr > bStr ? 1 : 0;\n      } else {\n        return bStr < aStr ? -1 : bStr > aStr ? 1 : 0;\n      }\n    });\n  }, [filteredData, sortColumn, sortDirection]);\n\n  return (\n    <div className=\"w-full max-w-6xl mx-auto space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">{title}</h2>\n        <div className=\"relative w-64\">\n          <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-8\"\n          />\n        </div>\n      </div>\n\n      <div className=\"border rounded-lg overflow-hidden\">\n        <div className=\"max-h-[500px] overflow-y-auto\">\n          <Table>\n            <TableHeader className=\"sticky top-0 bg-background z-10\">\n              <TableRow>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleSort(\"name\")}\n                    className=\"flex items-center gap-1 p-0 h-auto font-semibold\"\n                  >\n                    Name <ArrowUpDown className=\"h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleSort(\"email\")}\n                    className=\"flex items-center gap-1 p-0 h-auto font-semibold\"\n                  >\n                    Email <ArrowUpDown className=\"h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleSort(\"department\")}\n                    className=\"flex items-center gap-1 p-0 h-auto font-semibold\"\n                  >\n                    Department <ArrowUpDown className=\"h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleSort(\"role\")}\n                    className=\"flex items-center gap-1 p-0 h-auto font-semibold\"\n                  >\n                    Role <ArrowUpDown className=\"h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleSort(\"status\")}\n                    className=\"flex items-center gap-1 p-0 h-auto font-semibold\"\n                  >\n                    Status <ArrowUpDown className=\"h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead className=\"text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleSort(\"salary\")}\n                    className=\"flex items-center gap-1 p-0 h-auto font-semibold ml-auto\"\n                  >\n                    Salary <ArrowUpDown className=\"h-4 w-4\" />\n                  </Button>\n                </TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {sortedData.length === 0 ? (\n                <TableRow>\n                  <TableCell\n                    colSpan={6}\n                    className=\"text-center text-muted-foreground\"\n                  >\n                    No results found\n                  </TableCell>\n                </TableRow>\n              ) : (\n                sortedData.map((user) => (\n                  <TableRow key={user.id}>\n                    <TableCell className=\"font-medium\">{user.name}</TableCell>\n                    <TableCell>{user.email}</TableCell>\n                    <TableCell>{user.department}</TableCell>\n                    <TableCell>{user.role}</TableCell>\n                    <TableCell>\n                      <Badge\n                        variant={\n                          user.status === \"Active\"\n                            ? \"default\"\n                            : user.status === \"Inactive\"\n                              ? \"secondary\"\n                              : \"outline\"\n                        }\n                      >\n                        {user.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      ${user.salary.toLocaleString()}\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n      </div>\n      <div className=\"text-sm text-muted-foreground\">\n        Showing {sortedData.length} of {data.length} entries\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/sortable-table.tsx"
    }
  ]
}