{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flexi-filter-table",
  "type": "registry:ui",
  "title": "Flexi Filter Table",
  "description": "A flexible table with multiple filter options including date range, balance, and location.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "table",
    "checkbox",
    "button",
    "input",
    "badge",
    "dropdown-menu",
    "calendar",
    "popover"
  ],
  "files": [
    {
      "path": "registry/ruixenui/flexi-filter-table.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useState, useMemo } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n} from \"@/components/ui/dropdown-menu\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport { MoreVertical } from \"lucide-react\";\n\n/* --------------------------------\n   Default Data\n----------------------------------*/\nconst defaultData = [\n  {\n    id: 1,\n    name: \"Alex Thompson\",\n    email: \"alex.t@company.com\",\n    location: \"San Francisco\",\n    status: \"Active\",\n    balance: 1250,\n    joined: new Date(2023, 3, 10),\n  },\n  {\n    id: 2,\n    name: \"Sarah Chen\",\n    email: \"sarah.c@company.com\",\n    location: \"Singapore\",\n    status: \"Active\",\n    balance: 600,\n    joined: new Date(2023, 6, 20),\n  },\n  {\n    id: 3,\n    name: \"James Wilson\",\n    email: \"j.wilson@company.com\",\n    location: \"London\",\n    status: \"Inactive\",\n    balance: 650,\n    joined: new Date(2022, 11, 5),\n  },\n  {\n    id: 4,\n    name: \"Maria Garcia\",\n    email: \"m.garcia@company.com\",\n    location: \"Madrid\",\n    status: \"Active\",\n    balance: 0,\n    joined: new Date(2023, 0, 15),\n  },\n  {\n    id: 5,\n    name: \"David Kim\",\n    email: \"d.kim@company.com\",\n    location: \"Seoul\",\n    status: \"Active\",\n    balance: -1000,\n    joined: new Date(2024, 2, 2),\n  },\n];\n\nconst defaultLocations = [\n  \"San Francisco\",\n  \"Singapore\",\n  \"London\",\n  \"Madrid\",\n  \"Seoul\",\n];\nconst defaultStatuses = [\"Active\", \"Inactive\"];\n\n/* --------------------------------\n   Props Interface\n----------------------------------*/\ninterface FlexiFilterTableProps {\n  data?: typeof defaultData; // Table data\n  statuses?: string[]; // Filter options for status\n  locations?: string[]; // Filter options for location\n  title?: string; // Optional table title\n}\n\nexport default function FlexiFilterTable({\n  data = defaultData,\n  statuses = defaultStatuses,\n  locations = defaultLocations,\n  title = \"Flexi Filter Table\",\n}: FlexiFilterTableProps) {\n  const [selectedRows, setSelectedRows] = useState<Set<number>>(new Set());\n\n  // Filters\n  const [search, setSearch] = useState(\"\");\n  const [status, setStatus] = useState(\"All\");\n  const [location, setLocation] = useState(\"Location\");\n  const [minBalance, setMinBalance] = useState(\"\");\n  const [maxBalance, setMaxBalance] = useState(\"\");\n  const [joinedAfter, setJoinedAfter] = useState<Date | undefined>();\n\n  // Filter Logic\n  const filteredData = useMemo(() => {\n    return data.filter((item) => {\n      if (status !== \"All\" && item.status !== status) return false;\n      if (location !== \"Location\" && item.location !== location) return false;\n      if (\n        search &&\n        !`${item.name} ${item.email}`\n          .toLowerCase()\n          .includes(search.toLowerCase())\n      )\n        return false;\n      if (minBalance && item.balance < Number(minBalance)) return false;\n      if (maxBalance && item.balance > Number(maxBalance)) return false;\n      if (joinedAfter && item.joined < joinedAfter) return false;\n      return true;\n    });\n  }, [data, search, status, location, minBalance, maxBalance, joinedAfter]);\n\n  const toggleRow = (id: number) => {\n    setSelectedRows((prev) => {\n      const newSet = new Set(prev);\n      newSet.has(id) ? newSet.delete(id) : newSet.add(id);\n      return newSet;\n    });\n  };\n\n  return (\n    <div className=\"bg-background border rounded-lg overflow-hidden shadow-md\">\n      {/* Optional Title */}\n      <h2 className=\"px-4 pt-4 text-lg font-semibold\">{title}</h2>\n\n      {/* Filters */}\n      <div className=\"p-4 flex flex-col gap-3 md:flex-row md:flex-wrap items-start md:items-center\">\n        <Input\n          placeholder=\"Search name or email\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          className=\"md:w-1/4\"\n        />\n\n        {/* Status Filter */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\">{status}</Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            {[\"All\", ...statuses].map((s) => (\n              <DropdownMenuItem key={s} onClick={() => setStatus(s)}>\n                {s}\n              </DropdownMenuItem>\n            ))}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Location Filter */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\">{location}</Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            {[\"Location\", ...locations].map((loc) => (\n              <DropdownMenuItem key={loc} onClick={() => setLocation(loc)}>\n                {loc}\n              </DropdownMenuItem>\n            ))}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Balance Range */}\n        <div className=\"flex gap-2\">\n          <Input\n            type=\"number\"\n            placeholder=\"Min $\"\n            value={minBalance}\n            onChange={(e) => setMinBalance(e.target.value)}\n            className=\"w-24\"\n          />\n          <Input\n            type=\"number\"\n            placeholder=\"Max $\"\n            value={maxBalance}\n            onChange={(e) => setMaxBalance(e.target.value)}\n            className=\"w-24\"\n          />\n        </div>\n\n        {/* Date Joined */}\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button variant=\"outline\">\n              {joinedAfter ? joinedAfter.toDateString() : \"Joined After\"}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"p-0\">\n            <Calendar\n              mode=\"single\"\n              selected={joinedAfter}\n              onSelect={setJoinedAfter}\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n\n      {/* Table */}\n      <div className=\"max-h-[400px] overflow-y-auto\">\n        <Table>\n          <TableHeader className=\"sticky top-0 bg-background z-10\">\n            <TableRow>\n              <TableHead>\n                <Checkbox\n                  checked={selectedRows.size === data.length}\n                  onCheckedChange={(checked) =>\n                    setSelectedRows(\n                      checked ? new Set(data.map((d) => d.id)) : new Set(),\n                    )\n                  }\n                />\n              </TableHead>\n              <TableHead>Name</TableHead>\n              <TableHead>Email</TableHead>\n              <TableHead>Location</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Balance</TableHead>\n              <TableHead>Joined</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredData.map((row) => (\n              <TableRow key={row.id} className=\"hover:bg-muted/30\">\n                <TableCell>\n                  <Checkbox\n                    checked={selectedRows.has(row.id)}\n                    onCheckedChange={() => toggleRow(row.id)}\n                  />\n                </TableCell>\n                <TableCell className=\"font-medium\">{row.name}</TableCell>\n                <TableCell>{row.email}</TableCell>\n                <TableCell>{row.location}</TableCell>\n                <TableCell>\n                  <Badge\n                    variant={\n                      row.status === \"Active\" ? \"secondary\" : \"destructive\"\n                    }\n                  >\n                    {row.status}\n                  </Badge>\n                </TableCell>\n                <TableCell>${row.balance.toLocaleString()}</TableCell>\n                <TableCell>{row.joined.toDateString()}</TableCell>\n                <TableCell>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button size=\"icon\" variant=\"ghost\">\n                        <MoreVertical className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent>\n                      <DropdownMenuItem>View</DropdownMenuItem>\n                      <DropdownMenuItem>Edit</DropdownMenuItem>\n                      <DropdownMenuItem className=\"text-red-600\">\n                        Delete\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n          <TableFooter className=\"sticky bottom-0 bg-background\">\n            <TableRow>\n              <TableCell colSpan={7}>Total Users</TableCell>\n              <TableCell>{filteredData.length}</TableCell>\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/flexi-filter-table.tsx"
    }
  ]
}