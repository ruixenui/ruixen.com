{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flexi-filter-table",
  "type": "registry:ui",
  "title": "Flexi Filter Table",
  "description": "A flexible table with multiple filter options including date range, balance, and location.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "table",
    "checkbox",
    "button",
    "input",
    "badge",
    "dropdown-menu",
    "calendar",
    "popover"
  ],
  "files": [
    {
      "path": "registry/ruixenui/flexi-filter-table.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useState, useMemo } from \"react\";\r\nimport {\r\n  Table, TableBody, TableCell, TableFooter, TableHead, TableHeader, TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport {\r\n  DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\";\r\nimport { MoreVertical } from \"lucide-react\";\r\n\r\n/* --------------------------------\r\n   Default Data\r\n----------------------------------*/\r\nconst defaultData = [\r\n  { id: 1, name: \"Alex Thompson\", email: \"alex.t@company.com\", location: \"San Francisco\", status: \"Active\", balance: 1250, joined: new Date(2023, 3, 10) },\r\n  { id: 2, name: \"Sarah Chen\", email: \"sarah.c@company.com\", location: \"Singapore\", status: \"Active\", balance: 600, joined: new Date(2023, 6, 20) },\r\n  { id: 3, name: \"James Wilson\", email: \"j.wilson@company.com\", location: \"London\", status: \"Inactive\", balance: 650, joined: new Date(2022, 11, 5) },\r\n  { id: 4, name: \"Maria Garcia\", email: \"m.garcia@company.com\", location: \"Madrid\", status: \"Active\", balance: 0, joined: new Date(2023, 0, 15) },\r\n  { id: 5, name: \"David Kim\", email: \"d.kim@company.com\", location: \"Seoul\", status: \"Active\", balance: -1000, joined: new Date(2024, 2, 2) },\r\n];\r\n\r\nconst defaultLocations = [\"San Francisco\", \"Singapore\", \"London\", \"Madrid\", \"Seoul\"];\r\nconst defaultStatuses = [\"Active\", \"Inactive\"];\r\n\r\n/* --------------------------------\r\n   Props Interface\r\n----------------------------------*/\r\ninterface FlexiFilterTableProps {\r\n  data?: typeof defaultData;          // Table data\r\n  statuses?: string[];                // Filter options for status\r\n  locations?: string[];               // Filter options for location\r\n  title?: string;                     // Optional table title\r\n}\r\n\r\nexport default function FlexiFilterTable({\r\n  data = defaultData,\r\n  statuses = defaultStatuses,\r\n  locations = defaultLocations,\r\n  title = \"Flexi Filter Table\",\r\n}: FlexiFilterTableProps) {\r\n\r\n  const [selectedRows, setSelectedRows] = useState<Set<number>>(new Set());\r\n\r\n  // Filters\r\n  const [search, setSearch] = useState(\"\");\r\n  const [status, setStatus] = useState(\"All\");\r\n  const [location, setLocation] = useState(\"Location\");\r\n  const [minBalance, setMinBalance] = useState(\"\");\r\n  const [maxBalance, setMaxBalance] = useState(\"\");\r\n  const [joinedAfter, setJoinedAfter] = useState<Date | undefined>();\r\n\r\n  // Filter Logic\r\n  const filteredData = useMemo(() => {\r\n    return data.filter((item) => {\r\n      if (status !== \"All\" && item.status !== status) return false;\r\n      if (location !== \"Location\" && item.location !== location) return false;\r\n      if (search && !`${item.name} ${item.email}`.toLowerCase().includes(search.toLowerCase())) return false;\r\n      if (minBalance && item.balance < Number(minBalance)) return false;\r\n      if (maxBalance && item.balance > Number(maxBalance)) return false;\r\n      if (joinedAfter && item.joined < joinedAfter) return false;\r\n      return true;\r\n    });\r\n  }, [data, search, status, location, minBalance, maxBalance, joinedAfter]);\r\n\r\n  const toggleRow = (id: number) => {\r\n    setSelectedRows((prev) => {\r\n      const newSet = new Set(prev);\r\n      newSet.has(id) ? newSet.delete(id) : newSet.add(id);\r\n      return newSet;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-background border rounded-lg overflow-hidden shadow-md\">\r\n      {/* Optional Title */}\r\n      <h2 className=\"px-4 pt-4 text-lg font-semibold\">{title}</h2>\r\n\r\n      {/* Filters */}\r\n      <div className=\"p-4 flex flex-col gap-3 md:flex-row md:flex-wrap items-start md:items-center\">\r\n        <Input\r\n          placeholder=\"Search name or email\"\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n          className=\"md:w-1/4\"\r\n        />\r\n\r\n        {/* Status Filter */}\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button variant=\"outline\">{status}</Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent>\r\n            {[\"All\", ...statuses].map((s) => (\r\n              <DropdownMenuItem key={s} onClick={() => setStatus(s)}>\r\n                {s}\r\n              </DropdownMenuItem>\r\n            ))}\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n\r\n        {/* Location Filter */}\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button variant=\"outline\">{location}</Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent>\r\n            {[\"Location\", ...locations].map((loc) => (\r\n              <DropdownMenuItem key={loc} onClick={() => setLocation(loc)}>\r\n                {loc}\r\n              </DropdownMenuItem>\r\n            ))}\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n\r\n        {/* Balance Range */}\r\n        <div className=\"flex gap-2\">\r\n          <Input type=\"number\" placeholder=\"Min $\" value={minBalance} onChange={(e) => setMinBalance(e.target.value)} className=\"w-24\" />\r\n          <Input type=\"number\" placeholder=\"Max $\" value={maxBalance} onChange={(e) => setMaxBalance(e.target.value)} className=\"w-24\" />\r\n        </div>\r\n\r\n        {/* Date Joined */}\r\n        <Popover>\r\n          <PopoverTrigger asChild>\r\n            <Button variant=\"outline\">{joinedAfter ? joinedAfter.toDateString() : \"Joined After\"}</Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent className=\"p-0\">\r\n            <Calendar mode=\"single\" selected={joinedAfter} onSelect={setJoinedAfter} />\r\n          </PopoverContent>\r\n        </Popover>\r\n      </div>\r\n\r\n      {/* Table */}\r\n      <div className=\"max-h-[400px] overflow-y-auto\">\r\n        <Table>\r\n          <TableHeader className=\"sticky top-0 bg-background z-10\">\r\n            <TableRow>\r\n              <TableHead>\r\n                <Checkbox\r\n                  checked={selectedRows.size === data.length}\r\n                  onCheckedChange={(checked) =>\r\n                    setSelectedRows(checked ? new Set(data.map((d) => d.id)) : new Set())\r\n                  }\r\n                />\r\n              </TableHead>\r\n              <TableHead>Name</TableHead>\r\n              <TableHead>Email</TableHead>\r\n              <TableHead>Location</TableHead>\r\n              <TableHead>Status</TableHead>\r\n              <TableHead>Balance</TableHead>\r\n              <TableHead>Joined</TableHead>\r\n              <TableHead>Actions</TableHead>\r\n            </TableRow>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {filteredData.map((row) => (\r\n              <TableRow key={row.id} className=\"hover:bg-muted/30\">\r\n                <TableCell>\r\n                  <Checkbox checked={selectedRows.has(row.id)} onCheckedChange={() => toggleRow(row.id)} />\r\n                </TableCell>\r\n                <TableCell className=\"font-medium\">{row.name}</TableCell>\r\n                <TableCell>{row.email}</TableCell>\r\n                <TableCell>{row.location}</TableCell>\r\n                <TableCell>\r\n                  <Badge variant={row.status === \"Active\" ? \"secondary\" : \"destructive\"}>{row.status}</Badge>\r\n                </TableCell>\r\n                <TableCell>${row.balance.toLocaleString()}</TableCell>\r\n                <TableCell>{row.joined.toDateString()}</TableCell>\r\n                <TableCell>\r\n                  <DropdownMenu>\r\n                    <DropdownMenuTrigger asChild>\r\n                      <Button size=\"icon\" variant=\"ghost\">\r\n                        <MoreVertical className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </DropdownMenuTrigger>\r\n                    <DropdownMenuContent>\r\n                      <DropdownMenuItem>View</DropdownMenuItem>\r\n                      <DropdownMenuItem>Edit</DropdownMenuItem>\r\n                      <DropdownMenuItem className=\"text-red-600\">Delete</DropdownMenuItem>\r\n                    </DropdownMenuContent>\r\n                  </DropdownMenu>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n          <TableFooter className=\"sticky bottom-0 bg-background\">\r\n            <TableRow>\r\n              <TableCell colSpan={7}>Total Users</TableCell>\r\n              <TableCell>{filteredData.length}</TableCell>\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/flexi-filter-table.tsx"
    }
  ]
}