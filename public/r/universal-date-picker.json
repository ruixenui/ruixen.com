{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "universal-date-picker",
  "type": "registry:ui",
  "title": "Universal Date Picker",
  "description": "A versatile date picker with single/range mode toggle, preset shortcuts, and year selector.",
  "dependencies": [
    "react-day-picker",
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "label",
    "card",
    "popover"
  ],
  "files": [
    {
      "path": "registry/ruixenui/universal-date-picker.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { format, startOfMonth, endOfMonth, startOfYear, endOfYear, subDays, subMonths } from \"date-fns\";\r\nimport { CalendarIcon } from \"lucide-react\";\r\nimport { useId, useState } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\nimport type { DateRange } from \"react-day-picker\";\r\n\r\ntype Mode = \"single\" | \"range\";\r\n\r\ninterface Preset {\r\n  label: string;\r\n  range: { from: Date; to: Date };\r\n}\r\n\r\ninterface UniversalDatePickerProps {\r\n  mode?: Mode;\r\n  onChange?: (date: Date | DateRange | undefined) => void;\r\n  selected?: Date | DateRange;\r\n  className?: string;\r\n  presets?: Preset[];\r\n  label?: string;\r\n}\r\n\r\nexport function UniversalDatePicker({\r\n  mode: initialMode = \"single\",\r\n  onChange,\r\n  selected,\r\n  className,\r\n  presets: customPresets,\r\n  label = \"Date picker\",\r\n}: UniversalDatePickerProps) {\r\n  const id = useId();\r\n  const [mode, setMode] = useState<Mode>(initialMode);\r\n  const [date, setDate] = useState<Date | undefined>(selected instanceof Date ? selected : undefined);\r\n  const [range, setRange] = useState<DateRange | undefined>(\r\n    selected && typeof selected !== \"object\" ? undefined : (selected as DateRange | undefined)\r\n  );\r\n\r\n  const today = new Date();\r\n  const defaultPresets: Preset[] = [\r\n    { label: \"Today\", range: { from: today, to: today } },\r\n    { label: \"Yesterday\", range: { from: subDays(today, 1), to: subDays(today, 1) } },\r\n    { label: \"Last 7 days\", range: { from: subDays(today, 6), to: today } },\r\n    { label: \"Last 30 days\", range: { from: subDays(today, 29), to: today } },\r\n    { label: \"This Month\", range: { from: startOfMonth(today), to: endOfMonth(today) } },\r\n    { label: \"Last Month\", range: { from: startOfMonth(subMonths(today, 1)), to: endOfMonth(subMonths(today, 1)) } },\r\n    { label: \"This Year\", range: { from: startOfYear(today), to: endOfYear(today) } },\r\n  ];\r\n\r\n  const presets = customPresets ?? defaultPresets;\r\n\r\n  const handleSelect = (value: Date | DateRange | undefined) => {\r\n    if (mode === \"single\") {\r\n      setDate(value as Date | undefined);\r\n    } else {\r\n      setRange(value as DateRange | undefined);\r\n    }\r\n    onChange?.(value);\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"space-y-3\", className)}>\r\n      <div className=\"flex items-center justify-between\">\r\n        <Label htmlFor={id}>{label}</Label>\r\n        <div className=\"flex gap-2\">\r\n          <Button size=\"sm\" variant={mode === \"single\" ? \"default\" : \"outline\"} onClick={() => setMode(\"single\")}>\r\n            Single\r\n          </Button>\r\n          <Button size=\"sm\" variant={mode === \"range\" ? \"default\" : \"outline\"} onClick={() => setMode(\"range\")}>\r\n            Range\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Popover>\r\n        <PopoverTrigger asChild>\r\n          <Button\r\n            id={id}\r\n            variant=\"outline\"\r\n            className={cn(\r\n              \"group w-full justify-between bg-background px-3 font-normal outline-offset-0 hover:bg-background focus-visible:border-ring focus-visible:outline-[3px] focus-visible:outline-ring/20\",\r\n              !date && !range && \"text-muted-foreground\"\r\n            )}\r\n          >\r\n            <span className=\"truncate\">\r\n              {mode === \"single\" && date\r\n                ? format(date, \"PPP\")\r\n                : mode === \"range\" && range\r\n                ? `${range.from ? format(range.from, \"PPP\") : \"—\"} – ${\r\n                    range.to ? format(range.to, \"PPP\") : \"—\"\r\n                  }`\r\n                : \"Pick a date\"}\r\n            </span>\r\n            <CalendarIcon size={16} strokeWidth={2} className=\"shrink-0 text-muted-foreground/80 transition-colors group-hover:text-foreground\" aria-hidden=\"true\" />\r\n          </Button>\r\n        </PopoverTrigger>\r\n\r\n        <PopoverContent className=\"w-auto max-h-[300px] overflow-y-auto p-3 space-y-3\" align=\"start\">\r\n          {/* Presets */}\r\n          <Card className=\"p-2\">\r\n            <div className=\"grid grid-cols-2 gap-2\">\r\n              {presets.map((p) => (\r\n                <Button\r\n                  key={p.label}\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  className=\"justify-start\"\r\n                  onClick={() => handleSelect(mode === \"single\" ? p.range.to : p.range)}\r\n                >\r\n                  {p.label}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </Card>\r\n\r\n          {/* Calendar */}\r\n          {mode === \"single\" ? (\r\n            <Calendar mode=\"single\" selected={date} onSelect={handleSelect} showOutsideDays className=\"rounded-md border\" />\r\n          ) : (\r\n            <Calendar mode=\"range\" selected={range} onSelect={handleSelect} showOutsideDays className=\"rounded-md border\" />\r\n          )}\r\n\r\n          {/* Year Selector */}\r\n          <Card className=\"p-3\">\r\n            <div className=\"grid grid-cols-4 gap-2\">\r\n              {Array.from({ length: 9 }, (_, i) => today.getFullYear() - 4 + i).map((year) => (\r\n                <Button\r\n                  key={year}\r\n                  size=\"sm\"\r\n                  variant=\"ghost\"\r\n                  onClick={() => {\r\n                    const yDate = new Date(year, today.getMonth(), today.getDate());\r\n                    handleSelect(mode === \"single\" ? yDate : { from: startOfYear(yDate), to: endOfYear(yDate) });\r\n                  }}\r\n                >\r\n                  {year}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </Card>\r\n        </PopoverContent>\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/universal-date-picker.tsx"
    }
  ]
}