{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "universal-date-picker",
  "type": "registry:ui",
  "title": "Universal Date Picker",
  "description": "A versatile date picker with single/range mode toggle, preset shortcuts, and year selector.",
  "dependencies": [
    "react-day-picker",
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "label",
    "card",
    "popover"
  ],
  "files": [
    {
      "path": "registry/ruixenui/universal-date-picker.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  format,\n  startOfMonth,\n  endOfMonth,\n  startOfYear,\n  endOfYear,\n  subDays,\n  subMonths,\n} from \"date-fns\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { useId, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card } from \"@/components/ui/card\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport type { DateRange } from \"react-day-picker\";\n\ntype Mode = \"single\" | \"range\";\n\ninterface Preset {\n  label: string;\n  range: { from: Date; to: Date };\n}\n\ninterface UniversalDatePickerProps {\n  mode?: Mode;\n  onChange?: (date: Date | DateRange | undefined) => void;\n  selected?: Date | DateRange;\n  className?: string;\n  presets?: Preset[];\n  label?: string;\n}\n\nexport function UniversalDatePicker({\n  mode: initialMode = \"single\",\n  onChange,\n  selected,\n  className,\n  presets: customPresets,\n  label = \"Date picker\",\n}: UniversalDatePickerProps) {\n  const id = useId();\n  const [mode, setMode] = useState<Mode>(initialMode);\n  const [date, setDate] = useState<Date | undefined>(\n    selected instanceof Date ? selected : undefined,\n  );\n  const [range, setRange] = useState<DateRange | undefined>(\n    selected && typeof selected !== \"object\"\n      ? undefined\n      : (selected as DateRange | undefined),\n  );\n\n  const today = new Date();\n  const defaultPresets: Preset[] = [\n    { label: \"Today\", range: { from: today, to: today } },\n    {\n      label: \"Yesterday\",\n      range: { from: subDays(today, 1), to: subDays(today, 1) },\n    },\n    { label: \"Last 7 days\", range: { from: subDays(today, 6), to: today } },\n    { label: \"Last 30 days\", range: { from: subDays(today, 29), to: today } },\n    {\n      label: \"This Month\",\n      range: { from: startOfMonth(today), to: endOfMonth(today) },\n    },\n    {\n      label: \"Last Month\",\n      range: {\n        from: startOfMonth(subMonths(today, 1)),\n        to: endOfMonth(subMonths(today, 1)),\n      },\n    },\n    {\n      label: \"This Year\",\n      range: { from: startOfYear(today), to: endOfYear(today) },\n    },\n  ];\n\n  const presets = customPresets ?? defaultPresets;\n\n  const handleSelect = (value: Date | DateRange | undefined) => {\n    if (mode === \"single\") {\n      setDate(value as Date | undefined);\n    } else {\n      setRange(value as DateRange | undefined);\n    }\n    onChange?.(value);\n  };\n\n  return (\n    <div className={cn(\"space-y-3\", className)}>\n      <div className=\"flex items-center justify-between\">\n        <Label htmlFor={id}>{label}</Label>\n        <div className=\"flex gap-2\">\n          <Button\n            size=\"sm\"\n            variant={mode === \"single\" ? \"default\" : \"outline\"}\n            onClick={() => setMode(\"single\")}\n          >\n            Single\n          </Button>\n          <Button\n            size=\"sm\"\n            variant={mode === \"range\" ? \"default\" : \"outline\"}\n            onClick={() => setMode(\"range\")}\n          >\n            Range\n          </Button>\n        </div>\n      </div>\n\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button\n            id={id}\n            variant=\"outline\"\n            className={cn(\n              \"group w-full justify-between bg-background px-3 font-normal outline-offset-0 hover:bg-background focus-visible:border-ring focus-visible:outline-[3px] focus-visible:outline-ring/20\",\n              !date && !range && \"text-muted-foreground\",\n            )}\n          >\n            <span className=\"truncate\">\n              {mode === \"single\" && date\n                ? format(date, \"PPP\")\n                : mode === \"range\" && range\n                  ? `${range.from ? format(range.from, \"PPP\") : \"—\"} – ${\n                      range.to ? format(range.to, \"PPP\") : \"—\"\n                    }`\n                  : \"Pick a date\"}\n            </span>\n            <CalendarIcon\n              size={16}\n              strokeWidth={2}\n              className=\"shrink-0 text-muted-foreground/80 transition-colors group-hover:text-foreground\"\n              aria-hidden=\"true\"\n            />\n          </Button>\n        </PopoverTrigger>\n\n        <PopoverContent\n          className=\"w-auto max-h-[300px] overflow-y-auto p-3 space-y-3\"\n          align=\"start\"\n        >\n          {/* Presets */}\n          <Card className=\"p-2\">\n            <div className=\"grid grid-cols-2 gap-2\">\n              {presets.map((p) => (\n                <Button\n                  key={p.label}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"justify-start\"\n                  onClick={() =>\n                    handleSelect(mode === \"single\" ? p.range.to : p.range)\n                  }\n                >\n                  {p.label}\n                </Button>\n              ))}\n            </div>\n          </Card>\n\n          {/* Calendar */}\n          {mode === \"single\" ? (\n            <Calendar\n              mode=\"single\"\n              selected={date}\n              onSelect={handleSelect}\n              showOutsideDays\n              className=\"rounded-md border\"\n            />\n          ) : (\n            <Calendar\n              mode=\"range\"\n              selected={range}\n              onSelect={handleSelect}\n              showOutsideDays\n              className=\"rounded-md border\"\n            />\n          )}\n\n          {/* Year Selector */}\n          <Card className=\"p-3\">\n            <div className=\"grid grid-cols-4 gap-2\">\n              {Array.from(\n                { length: 9 },\n                (_, i) => today.getFullYear() - 4 + i,\n              ).map((year) => (\n                <Button\n                  key={year}\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => {\n                    const yDate = new Date(\n                      year,\n                      today.getMonth(),\n                      today.getDate(),\n                    );\n                    handleSelect(\n                      mode === \"single\"\n                        ? yDate\n                        : { from: startOfYear(yDate), to: endOfYear(yDate) },\n                    );\n                  }}\n                >\n                  {year}\n                </Button>\n              ))}\n            </div>\n          </Card>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/universal-date-picker.tsx"
    }
  ]
}