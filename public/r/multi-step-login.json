{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-step-login",
  "type": "registry:ui",
  "title": "Multi Step Login",
  "description": "Multi-step authentication form with progress indicator.",
  "dependencies": [],
  "files": [
    {
      "path": "registry/ruixenui/multi-step-login.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface MultiStepInput {\n  id: string;\n  type: string;\n  label: string;\n  placeholder?: string;\n  optional?: boolean;\n}\n\nexport interface MultiStep {\n  title?: string;\n  inputs: MultiStepInput[];\n  nextLabel?: string;\n  backLabel?: string;\n  submitLabel?: string;\n}\n\ninterface MultiStepLoginProps {\n  steps: MultiStep[];\n  className?: string;\n  onChange?: (values: Record<string, string>) => void;\n  onSubmit?: (values: Record<string, string>) => void;\n}\n\nexport default function MultiStepLogin({\n  steps,\n  className,\n  onChange,\n  onSubmit,\n}: MultiStepLoginProps) {\n  const [currentStep, setCurrentStep] = React.useState(0);\n  const [values, setValues] = React.useState<Record<string, string>>(\n    steps.reduce(\n      (acc, step) => {\n        step.inputs.forEach((input) => {\n          acc[input.id] = \"\";\n        });\n        return acc;\n      },\n      {} as Record<string, string>,\n    ),\n  );\n\n  const nextStep = () =>\n    setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));\n  const prevStep = () => setCurrentStep((prev) => Math.max(prev - 1, 0));\n\n  const handleChange = (id: string, value: string) => {\n    const newValues = { ...values, [id]: value };\n    setValues(newValues);\n    onChange?.(newValues);\n  };\n\n  const handleSubmit = () => {\n    onSubmit?.(values);\n  };\n\n  return (\n    <div\n      className={cn(\n        \"w-full max-w-md mx-auto bg-white dark:bg-gray-800 border rounded-lg shadow-md overflow-hidden p-6 flex flex-col gap-6\",\n        className,\n      )}\n    >\n      {/* Step Indicator */}\n      <div className=\"flex justify-between mb-4\">\n        {steps.map((_, index) => (\n          <div\n            key={index}\n            className={cn(\n              \"flex-1 h-1 rounded bg-gray-300 dark:bg-gray-600\",\n              currentStep >= index && \"bg-blue-500\",\n            )}\n          />\n        ))}\n      </div>\n\n      {/* Step Content */}\n      <div className=\"flex flex-col gap-4\">\n        {steps[currentStep].inputs.map((input) => (\n          <div key={input.id}>\n            <Label htmlFor={input.id}>\n              {input.label}\n              {input.optional ? \" (Optional)\" : \"\"}\n            </Label>\n            <Input\n              id={input.id}\n              type={input.type}\n              placeholder={input.placeholder}\n              value={values[input.id]}\n              onChange={(e) => handleChange(input.id, e.target.value)}\n            />\n          </div>\n        ))}\n      </div>\n\n      {/* Step Buttons */}\n      <div className=\"flex justify-between mt-2\">\n        {currentStep > 0 && (\n          <Button variant=\"outline\" onClick={prevStep}>\n            {steps[currentStep].backLabel || \"Back\"}\n          </Button>\n        )}\n        {currentStep < steps.length - 1 ? (\n          <Button onClick={nextStep}>\n            {steps[currentStep].nextLabel || \"Next\"}\n          </Button>\n        ) : (\n          <Button onClick={handleSubmit}>\n            {steps[currentStep].submitLabel || \"Submit\"}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/multi-step-login.tsx"
    }
  ]
}