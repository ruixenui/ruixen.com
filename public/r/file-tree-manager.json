{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "file-tree-manager",
  "type": "registry:ui",
  "title": "File Tree Manager",
  "description": "A comprehensive file tree component with CRUD operations and management features.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "card",
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/ruixenui/file-tree-manager.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  TooltipProvider,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Folder,\n  File as FileIcon,\n  ChevronDown,\n  ChevronRight,\n  Trash2,\n  FilePlus,\n  Edit2,\n} from \"lucide-react\";\n\n// File/folder node type\nexport type FileNode = {\n  id: string;\n  name: string;\n  type: \"file\" | \"folder\";\n  children?: FileNode[];\n};\n\n// Props for configurable FileTree\ninterface FileTreeProps {\n  treeData?: FileNode[];\n  initialExpanded?: string[];\n  initialSelected?: string | null;\n  onSelect?: (node: FileNode) => void;\n  onDelete?: (node: FileNode) => void;\n  onCreate?: (\n    parent?: FileNode,\n    type?: \"file\" | \"folder\",\n    name?: string,\n  ) => void;\n  onRename?: (node: FileNode, newName: string) => void;\n}\n\nexport default function FileTree({\n  treeData = [],\n  initialExpanded = [],\n  initialSelected = null,\n  onSelect,\n  onDelete,\n  onCreate,\n  onRename,\n}: FileTreeProps) {\n  const [tree, setTree] = useState<FileNode[]>(treeData);\n  const [expanded, setExpanded] = useState<Record<string, boolean>>(\n    initialExpanded.reduce((acc, id) => ({ ...acc, [id]: true }), {}),\n  );\n  const [selected, setSelected] = useState<string | null>(initialSelected);\n  const [newName, setNewName] = useState(\"\");\n\n  const toggle = (id: string) => setExpanded((s) => ({ ...s, [id]: !s[id] }));\n\n  const handleSelect = (id: string) => {\n    setSelected(id);\n    if (onSelect) {\n      const node = findNodeById(tree, id);\n      if (node) onSelect(node);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    const node = findNodeById(tree, id);\n    if (!node) return;\n\n    const next = mutateTree(tree, (nodes) => {\n      function remove(nodesArr: FileNode[]) {\n        for (let i = nodesArr.length - 1; i >= 0; i--) {\n          if (nodesArr[i].id === id) {\n            nodesArr.splice(i, 1);\n            return true;\n          }\n          if (nodesArr[i].children) remove(nodesArr[i].children!);\n        }\n        return false;\n      }\n      remove(nodes);\n    });\n\n    setTree(next);\n    if (selected === id) setSelected(null);\n    onDelete?.(node);\n  };\n\n  const handleCreate = (\n    parentId?: string,\n    type: \"file\" | \"folder\" = \"file\",\n  ) => {\n    if (!newName.trim()) return;\n    const node: FileNode = { id: `${Date.now()}`, name: newName.trim(), type };\n    const next = mutateTree(tree, (nodes) => {\n      if (!parentId) {\n        nodes.push(node);\n        return;\n      }\n      const parent = findNodeById(nodes, parentId);\n      if (parent && parent.type === \"folder\") {\n        parent.children = parent.children || [];\n        parent.children.push(node);\n      }\n    });\n    setTree(next);\n    setNewName(\"\");\n    if (parentId) setExpanded((s) => ({ ...s, [parentId]: true }));\n    const parentNode = parentId\n      ? (findNodeById(tree, parentId) ?? undefined)\n      : undefined;\n    onCreate?.(parentNode, type, node.name);\n  };\n\n  const handleRename = (id: string, name: string) => {\n    const node = findNodeById(tree, id);\n    if (!node) return;\n\n    const next = mutateTree(tree, (nodes) => {\n      const nodeToRename = findNodeById(nodes, id);\n      if (nodeToRename) nodeToRename.name = name;\n    });\n\n    setTree(next);\n    onRename?.(node, name);\n  };\n\n  const renderNodes = (nodes: FileNode[], level = 0) => {\n    return nodes.map((n) => (\n      <div key={n.id} className=\"group\">\n        <div\n          role=\"treeitem\"\n          aria-expanded={n.type === \"folder\" ? !!expanded[n.id] : undefined}\n          className={cn(\n            \"flex items-center gap-2 px-2 py-1 rounded-md cursor-pointer hover:bg-muted\",\n            selected === n.id ? \"bg-muted/50\" : \"\",\n          )}\n          style={{ paddingLeft: level * 12 + 8 }}\n          onClick={() => {\n            handleSelect(n.id);\n            if (n.type === \"folder\") toggle(n.id);\n          }}\n        >\n          {n.type === \"folder\" ? (\n            <span className=\"flex items-center gap-2\">\n              <button\n                aria-label={expanded[n.id] ? \"collapse\" : \"expand\"}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  toggle(n.id);\n                }}\n                className=\"inline-flex items-center justify-center w-6 h-6\"\n              >\n                {expanded[n.id] ? (\n                  <ChevronDown size={16} />\n                ) : (\n                  <ChevronRight size={16} />\n                )}\n              </button>\n              <Folder size={18} />\n            </span>\n          ) : (\n            <FileIcon size={16} />\n          )}\n\n          <div className=\"flex-1 text-sm truncate\">{n.name}</div>\n\n          <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <Edit2 size={14} />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>Rename</TooltipContent>\n            </Tooltip>\n\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleDelete(n.id);\n                  }}\n                >\n                  <Trash2 size={14} />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>Delete</TooltipContent>\n            </Tooltip>\n          </div>\n        </div>\n\n        {n.children && n.children.length > 0 && expanded[n.id] && (\n          <div role=\"group\">{renderNodes(n.children, level + 1)}</div>\n        )}\n      </div>\n    ));\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl\">\n      <CardHeader>\n        <CardTitle>File Tree — shadcn UI + lucide-react</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <TooltipProvider>\n          <div className=\"flex gap-2 items-center mb-3\">\n            <Input\n              placeholder=\"New file or folder name\"\n              value={newName}\n              onChange={(e) => setNewName(e.target.value)}\n              className=\"flex-1\"\n            />\n            <Button onClick={() => handleCreate(undefined, \"file\")}>\n              Add File\n            </Button>\n            <Button onClick={() => handleCreate(undefined, \"folder\")}>\n              Add Folder\n            </Button>\n          </div>\n\n          <Separator className=\"my-2\" />\n          <div role=\"tree\" className=\"space-y-1\">\n            {renderNodes(tree)}\n          </div>\n          <Separator className=\"my-3\" />\n\n          <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n            <div>\n              Selected: <span className=\"font-medium\">{selected ?? \"—\"}</span>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => {\n                  if (!selected) return;\n                  const node = findNodeById(tree, selected);\n                  if (node && node.type === \"folder\")\n                    handleCreate(selected, \"file\");\n                }}\n              >\n                <FilePlus size={14} /> Add file in selected\n              </Button>\n              <Button size=\"sm\" variant=\"ghost\" onClick={() => setExpanded({})}>\n                <ChevronRight size={14} /> Collapse all\n              </Button>\n            </div>\n          </div>\n        </TooltipProvider>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Utility functions remain unchanged\nfunction findNodeById(nodes: FileNode[], id: string): FileNode | null {\n  for (const n of nodes) {\n    if (n.id === id) return n;\n    if (n.children) {\n      const found = findNodeById(n.children, id);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n\nfunction mutateTree(nodes: FileNode[], cb: (nodes: FileNode[]) => void) {\n  const cloned = JSON.parse(JSON.stringify(nodes)) as FileNode[];\n  cb(cloned);\n  return cloned;\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/file-tree-manager.tsx"
    }
  ]
}