{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "file-tree-manager",
  "type": "registry:ui",
  "title": "File Tree Manager",
  "description": "A comprehensive file tree component with CRUD operations and management features.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "card",
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/ruixenui/file-tree-manager.tsx",
      "content": "\"use client\"\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider } from \"@/components/ui/tooltip\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport { Folder, File as FileIcon, ChevronDown, ChevronRight, Trash2, FilePlus, Edit2 } from \"lucide-react\";\r\n\r\n// File/folder node type\r\nexport type FileNode = {\r\n  id: string;\r\n  name: string;\r\n  type: \"file\" | \"folder\";\r\n  children?: FileNode[];\r\n};\r\n\r\n// Props for configurable FileTree\r\ninterface FileTreeProps {\r\n  treeData?: FileNode[];\r\n  initialExpanded?: string[];\r\n  initialSelected?: string | null;\r\n  onSelect?: (node: FileNode) => void;\r\n  onDelete?: (node: FileNode) => void;\r\n  onCreate?: (parent?: FileNode, type?: \"file\" | \"folder\", name?: string) => void;\r\n  onRename?: (node: FileNode, newName: string) => void;\r\n}\r\n\r\nexport default function FileTree({\r\n  treeData = [],\r\n  initialExpanded = [],\r\n  initialSelected = null,\r\n  onSelect,\r\n  onDelete,\r\n  onCreate,\r\n  onRename,\r\n}: FileTreeProps) {\r\n  const [tree, setTree] = useState<FileNode[]>(treeData);\r\n  const [expanded, setExpanded] = useState<Record<string, boolean>>(\r\n    initialExpanded.reduce((acc, id) => ({ ...acc, [id]: true }), {})\r\n  );\r\n  const [selected, setSelected] = useState<string | null>(initialSelected);\r\n  const [newName, setNewName] = useState(\"\");\r\n\r\n  const toggle = (id: string) => setExpanded((s) => ({ ...s, [id]: !s[id] }));\r\n\r\n  const handleSelect = (id: string) => {\r\n    setSelected(id);\r\n    if (onSelect) {\r\n      const node = findNodeById(tree, id);\r\n      if (node) onSelect(node);\r\n    }\r\n  };\r\n\r\n  const handleDelete = (id: string) => {\r\n    const node = findNodeById(tree, id);\r\n    if (!node) return;\r\n\r\n    const next = mutateTree(tree, (nodes) => {\r\n      function remove(nodesArr: FileNode[]) {\r\n        for (let i = nodesArr.length - 1; i >= 0; i--) {\r\n          if (nodesArr[i].id === id) {\r\n            nodesArr.splice(i, 1);\r\n            return true;\r\n          }\r\n          if (nodesArr[i].children) remove(nodesArr[i].children!);\r\n        }\r\n        return false;\r\n      }\r\n      remove(nodes);\r\n    });\r\n\r\n    setTree(next);\r\n    if (selected === id) setSelected(null);\r\n    onDelete?.(node);\r\n  };\r\n\r\n  const handleCreate = (parentId?: string, type: \"file\" | \"folder\" = \"file\") => {\r\n    if (!newName.trim()) return;\r\n    const node: FileNode = { id: `${Date.now()}`, name: newName.trim(), type };\r\n    const next = mutateTree(tree, (nodes) => {\r\n      if (!parentId) {\r\n        nodes.push(node);\r\n        return;\r\n      }\r\n      const parent = findNodeById(nodes, parentId);\r\n      if (parent && parent.type === \"folder\") {\r\n        parent.children = parent.children || [];\r\n        parent.children.push(node);\r\n      }\r\n    });\r\n    setTree(next);\r\n    setNewName(\"\");\r\n    if (parentId) setExpanded((s) => ({ ...s, [parentId]: true }));\r\n    const parentNode = parentId ? findNodeById(tree, parentId) ?? undefined : undefined;\r\n    onCreate?.(parentNode, type, node.name);    \r\n  };\r\n\r\n  const handleRename = (id: string, name: string) => {\r\n    const node = findNodeById(tree, id);\r\n    if (!node) return;\r\n\r\n    const next = mutateTree(tree, (nodes) => {\r\n      const nodeToRename = findNodeById(nodes, id);\r\n      if (nodeToRename) nodeToRename.name = name;\r\n    });\r\n\r\n    setTree(next);\r\n    onRename?.(node, name);\r\n  };\r\n\r\n  const renderNodes = (nodes: FileNode[], level = 0) => {\r\n    return nodes.map((n) => (\r\n      <div key={n.id} className=\"group\">\r\n        <div\r\n          role=\"treeitem\"\r\n          aria-expanded={n.type === \"folder\" ? !!expanded[n.id] : undefined}\r\n          className={cn(\r\n            \"flex items-center gap-2 px-2 py-1 rounded-md cursor-pointer hover:bg-muted\",\r\n            selected === n.id ? \"bg-muted/50\" : \"\"\r\n          )}\r\n          style={{ paddingLeft: level * 12 + 8 }}\r\n          onClick={() => {\r\n            handleSelect(n.id);\r\n            if (n.type === \"folder\") toggle(n.id);\r\n          }}\r\n        >\r\n          {n.type === \"folder\" ? (\r\n            <span className=\"flex items-center gap-2\">\r\n              <button\r\n                aria-label={expanded[n.id] ? \"collapse\" : \"expand\"}\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  toggle(n.id);\r\n                }}\r\n                className=\"inline-flex items-center justify-center w-6 h-6\"\r\n              >\r\n                {expanded[n.id] ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\r\n              </button>\r\n              <Folder size={18} />\r\n            </span>\r\n          ) : (\r\n            <FileIcon size={16} />\r\n          )}\r\n\r\n          <div className=\"flex-1 text-sm truncate\">{n.name}</div>\r\n\r\n          <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\r\n            <Tooltip>\r\n              <TooltipTrigger asChild>\r\n                <Button variant=\"ghost\" size=\"sm\" onClick={(e) => e.stopPropagation()}>\r\n                  <Edit2 size={14} />\r\n                </Button>\r\n              </TooltipTrigger>\r\n              <TooltipContent>Rename</TooltipContent>\r\n            </Tooltip>\r\n\r\n            <Tooltip>\r\n              <TooltipTrigger asChild>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleDelete(n.id);\r\n                  }}\r\n                >\r\n                  <Trash2 size={14} />\r\n                </Button>\r\n              </TooltipTrigger>\r\n              <TooltipContent>Delete</TooltipContent>\r\n            </Tooltip>\r\n          </div>\r\n        </div>\r\n\r\n        {n.children && n.children.length > 0 && expanded[n.id] && (\r\n          <div role=\"group\">{renderNodes(n.children, level + 1)}</div>\r\n        )}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-2xl\">\r\n      <CardHeader>\r\n        <CardTitle>File Tree — shadcn UI + lucide-react</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <TooltipProvider>\r\n          <div className=\"flex gap-2 items-center mb-3\">\r\n            <Input\r\n              placeholder=\"New file or folder name\"\r\n              value={newName}\r\n              onChange={(e) => setNewName(e.target.value)}\r\n              className=\"flex-1\"\r\n            />\r\n            <Button onClick={() => handleCreate(undefined, \"file\")}>Add File</Button>\r\n            <Button onClick={() => handleCreate(undefined, \"folder\")}>Add Folder</Button>\r\n          </div>\r\n\r\n          <Separator className=\"my-2\" />\r\n          <div role=\"tree\" className=\"space-y-1\">\r\n            {renderNodes(tree)}\r\n          </div>\r\n          <Separator className=\"my-3\" />\r\n\r\n          <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\r\n            <div>\r\n              Selected: <span className=\"font-medium\">{selected ?? \"—\"}</span>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"ghost\"\r\n                onClick={() => {\r\n                  if (!selected) return;\r\n                  const node = findNodeById(tree, selected);\r\n                  if (node && node.type === \"folder\") handleCreate(selected, \"file\");\r\n                }}\r\n              >\r\n                <FilePlus size={14} /> Add file in selected\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"ghost\"\r\n                onClick={() => setExpanded({})}\r\n              >\r\n                <ChevronRight size={14} /> Collapse all\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </TooltipProvider>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// Utility functions remain unchanged\r\nfunction findNodeById(nodes: FileNode[], id: string): FileNode | null {\r\n  for (const n of nodes) {\r\n    if (n.id === id) return n;\r\n    if (n.children) {\r\n      const found = findNodeById(n.children, id);\r\n      if (found) return found;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction mutateTree(nodes: FileNode[], cb: (nodes: FileNode[]) => void) {\r\n  const cloned = JSON.parse(JSON.stringify(nodes)) as FileNode[];\r\n  cb(cloned);\r\n  return cloned;\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/file-tree-manager.tsx"
    }
  ]
}