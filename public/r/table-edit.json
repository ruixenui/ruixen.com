{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table-edit",
  "type": "registry:ui",
  "title": "Table Edit",
  "description": "An editable table component with inline editing and dropdown menus.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "table",
    "checkbox",
    "badge",
    "button",
    "dropdown-menu",
    "input",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/table-edit.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { MoreHorizontal } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n} from \"@/components/ui/select\";\n\nexport type User = {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: \"Active\" | \"Inactive\";\n  balance: string;\n};\n\nexport type ConfigurableTableProps = {\n  data?: User[];\n  footerTotal?: string;\n};\n\nconst defaultUsers: User[] = [\n  {\n    id: \"1\",\n    name: \"Arjun Mehta\",\n    email: \"arjun.mehta@company.com\",\n    role: \"Manager\",\n    status: \"Active\",\n    balance: \"$1,250.00\",\n  },\n  {\n    id: \"2\",\n    name: \"Hannah Park\",\n    email: \"hannah.park@company.com\",\n    role: \"Designer\",\n    status: \"Active\",\n    balance: \"$600.00\",\n  },\n  {\n    id: \"3\",\n    name: \"Oliver Scott\",\n    email: \"oliver.scott@company.com\",\n    role: \"Engineer\",\n    status: \"Inactive\",\n    balance: \"$650.00\",\n  },\n  {\n    id: \"4\",\n    name: \"Camila Torres\",\n    email: \"camila.torres@company.com\",\n    role: \"Engineer\",\n    status: \"Active\",\n    balance: \"$900.00\",\n  },\n];\n\nexport default function ConfigurableEditableTable({\n  data = defaultUsers,\n  footerTotal = \"$3,400.00\",\n}: ConfigurableTableProps) {\n  const [users, setUsers] = useState<User[]>(data);\n  const [selected, setSelected] = useState<string[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editData, setEditData] = useState<Partial<User>>({});\n\n  const toggleSelect = (id: string) => {\n    setSelected((prev) =>\n      prev.includes(id) ? prev.filter((i) => i !== id) : [...prev, id],\n    );\n  };\n\n  const startEdit = (user: User) => {\n    setEditingId(user.id);\n    setEditData({ ...user });\n  };\n\n  const saveEdit = (id: string) => {\n    setUsers((prev) =>\n      prev.map((u) => (u.id === id ? ({ ...u, ...editData } as User) : u)),\n    );\n    setEditingId(null);\n    setEditData({});\n  };\n\n  return (\n    <div className=\"bg-background border rounded-md shadow-sm max-w-4xl overflow-hidden\">\n      <div className=\"max-h-[400px] overflow-y-auto\">\n        <Table>\n          {/* Fixed Header */}\n          <TableHeader className=\"sticky top-0 z-10 bg-background\">\n            <TableRow>\n              <TableHead className=\"w-[40px]\">\n                <Checkbox\n                  checked={selected.length === users.length}\n                  onCheckedChange={(checked) =>\n                    setSelected(checked ? users.map((u) => u.id) : [])\n                  }\n                />\n              </TableHead>\n              <TableHead>Name</TableHead>\n              <TableHead>Email</TableHead>\n              <TableHead>Role</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead className=\"text-right\">Balance</TableHead>\n              <TableHead className=\"w-[50px]\"></TableHead>\n            </TableRow>\n          </TableHeader>\n\n          {/* Body */}\n          <TableBody>\n            {users.map((user) => (\n              <TableRow key={user.id} className=\"hover:bg-muted/40\">\n                <TableCell>\n                  <Checkbox\n                    checked={selected.includes(user.id)}\n                    onCheckedChange={() => toggleSelect(user.id)}\n                  />\n                </TableCell>\n\n                {editingId === user.id ? (\n                  <>\n                    <TableCell className=\"font-medium\">\n                      <Input\n                        value={editData.name || \"\"}\n                        onChange={(e) =>\n                          setEditData({ ...editData, name: e.target.value })\n                        }\n                        className=\"h-8 px-2\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Input\n                        value={editData.email || \"\"}\n                        onChange={(e) =>\n                          setEditData({ ...editData, email: e.target.value })\n                        }\n                        className=\"h-8 px-2\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Input\n                        value={editData.role || \"\"}\n                        onChange={(e) =>\n                          setEditData({ ...editData, role: e.target.value })\n                        }\n                        className=\"h-8 px-2\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Select\n                        value={editData.status || \"Active\"}\n                        onValueChange={(val) =>\n                          setEditData({\n                            ...editData,\n                            status: val as \"Active\" | \"Inactive\",\n                          })\n                        }\n                      >\n                        <SelectTrigger className=\"h-8 w-[100px]\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Active\">Active</SelectItem>\n                          <SelectItem value=\"Inactive\">Inactive</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <Input\n                        value={editData.balance || \"\"}\n                        onChange={(e) =>\n                          setEditData({ ...editData, balance: e.target.value })\n                        }\n                        className=\"h-8 px-2 text-right\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Button size=\"sm\" onClick={() => saveEdit(user.id)}>\n                        Save\n                      </Button>\n                    </TableCell>\n                  </>\n                ) : (\n                  <>\n                    <TableCell className=\"font-medium\">{user.name}</TableCell>\n                    <TableCell>{user.email}</TableCell>\n                    <TableCell>{user.role}</TableCell>\n                    <TableCell>\n                      <Badge\n                        variant={\n                          user.status === \"Active\" ? \"default\" : \"secondary\"\n                        }\n                      >\n                        {user.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">{user.balance}</TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"icon\">\n                            <MoreHorizontal className=\"w-4 h-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => startEdit(user)}>\n                            Edit\n                          </DropdownMenuItem>\n                          <DropdownMenuItem className=\"text-destructive\">\n                            Delete\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </>\n                )}\n              </TableRow>\n            ))}\n          </TableBody>\n\n          {/* Fixed Footer */}\n          <TableFooter className=\"sticky bottom-0 bg-background\">\n            <TableRow>\n              <TableCell colSpan={5}>\n                {selected.length > 0\n                  ? `${selected.length} selected`\n                  : \"No rows selected\"}\n              </TableCell>\n              <TableCell colSpan={2} className=\"text-right\">\n                Total: {footerTotal}\n              </TableCell>\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/table-edit.tsx"
    }
  ]
}