{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "action-hub-input",
  "type": "registry:ui",
  "title": "Action Hub Input",
  "description": "A versatile input field with customizable action buttons and status indicators.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/action-hub-input.tsx",
      "content": "\"use client\";\n\nimport { useId, useState, useRef, useEffect } from \"react\";\nimport {\n  Loader2Icon,\n  CheckCircle2Icon,\n  XCircleIcon,\n  CopyIcon,\n  Trash2Icon,\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ActionHubInputAction {\n  icon: JSX.Element;\n  onClick: (value: string) => Promise<void> | void;\n  tooltip?: string;\n  showOnEmpty?: boolean;\n}\n\ninterface ActionHubInputProps {\n  label?: string;\n  placeholder?: string;\n  type?: string;\n  defaultValue?: string;\n  validate?: (value: string) => string | null;\n  actions?: ActionHubInputAction[];\n  historyEnabled?: boolean;\n}\n\nexport default function ActionHubInput({\n  label = \"Action Input\",\n  placeholder = \"Type command, email, or snippet...\",\n  type = \"text\",\n  defaultValue = \"\",\n  validate,\n  actions = [],\n  historyEnabled = true,\n}: ActionHubInputProps) {\n  const id = useId();\n  const [value, setValue] = useState(defaultValue);\n  const [status, setStatus] = useState<\n    \"idle\" | \"loading\" | \"success\" | \"error\"\n  >(\"idle\");\n  const [error, setError] = useState<string | null>(null);\n  const [history, setHistory] = useState<string[]>([]);\n  const [showHistory, setShowHistory] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Load history\n  useEffect(() => {\n    if (historyEnabled) {\n      const saved = localStorage.getItem(`actionhub-${id}`);\n      if (saved) setHistory(JSON.parse(saved));\n    }\n  }, [id, historyEnabled]);\n\n  // Save history on submit\n  const saveToHistory = (val: string) => {\n    if (!historyEnabled || !val) return;\n    const newHistory = [val, ...history.filter((h) => h !== val)].slice(0, 10);\n    setHistory(newHistory);\n    localStorage.setItem(`actionhub-${id}`, JSON.stringify(newHistory));\n  };\n\n  const handleActionClick = async (action: ActionHubInputAction) => {\n    try {\n      setStatus(\"loading\");\n      await action.onClick(value);\n      setStatus(\"success\");\n      saveToHistory(value);\n      setTimeout(() => setStatus(\"idle\"), 1500);\n    } catch {\n      setStatus(\"error\");\n      setTimeout(() => setStatus(\"idle\"), 1500);\n    }\n  };\n\n  // Validation\n  useEffect(() => {\n    if (validate) setError(validate(value));\n    else setError(null);\n  }, [value, validate]);\n\n  const renderStatusIcon = () => {\n    switch (status) {\n      case \"loading\":\n        return <Loader2Icon className=\"animate-spin text-blue-500\" size={16} />;\n      case \"success\":\n        return <CheckCircle2Icon className=\"text-green-500\" size={16} />;\n      case \"error\":\n        return <XCircleIcon className=\"text-red-500\" size={16} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"relative w-full max-w-lg flex flex-col gap-1\">\n      {label && <Label htmlFor={id}>{label}</Label>}\n      <div className=\"relative flex items-center\">\n        <Input\n          id={id}\n          ref={inputRef}\n          type={type}\n          placeholder={placeholder}\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          className=\"pr-24\"\n          onFocus={() => setShowHistory(true)}\n          onBlur={() => setTimeout(() => setShowHistory(false), 200)}\n        />\n\n        {/* Status icon */}\n        <div className=\"absolute right-10 top-1/2 -translate-y-1/2\">\n          {renderStatusIcon()}\n        </div>\n\n        {/* Actions */}\n        <div className=\"absolute right-1 top-1/2 -translate-y-1/2 flex gap-1\">\n          {actions.map(\n            (action, idx) =>\n              (value || action.showOnEmpty) && (\n                <Button\n                  key={idx}\n                  size=\"icon\"\n                  onClick={() => handleActionClick(action)}\n                  title={action.tooltip}\n                  className=\"h-8 w-8 rounded-md p-1\"\n                >\n                  {action.icon}\n                </Button>\n              ),\n          )}\n        </div>\n      </div>\n\n      {error && <p className=\"text-sm text-red-500\">{error}</p>}\n\n      {/* History dropdown */}\n      {showHistory && history.length > 0 && (\n        <div className=\"absolute top-full mt-1 w-full rounded-md border bg-background shadow-lg z-10 max-h-36 overflow-auto\">\n          {history.map((item, idx) => (\n            <button\n              key={idx}\n              type=\"button\"\n              className=\"w-full text-left px-2 py-1 hover:bg-accent hover:text-accent-foreground flex items-center gap-2 text-sm\"\n              onClick={() => setValue(item)}\n            >\n              {item}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/action-hub-input.tsx"
    }
  ]
}