{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "notification-inbox-popover",
  "type": "registry:ui",
  "title": "Notification Inbox Popover",
  "description": "A notification inbox popover with tabs, unread counts, and mark as read functionality.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "popover",
    "tabs"
  ],
  "files": [
    {
      "path": "registry/ruixenui/notification-inbox-popover.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { LucideIcon } from \"lucide-react\";\n\nexport interface Notification {\n  id: number;\n  user: string;\n  action: string;\n  target: string;\n  timestamp: string;\n  unread: boolean;\n  icon: LucideIcon;\n}\n\ninterface NotificationInboxPopoverProps {\n  notifications: Notification[];\n  triggerLabel?: string;\n  popoverWidth?: string;\n  onMarkAll?: (notifications: Notification[]) => void;\n  onMarkAsRead?: (id: number) => void;\n  onViewAll?: () => void;\n  tabs?: { value: string; label: string }[];\n}\n\nexport function NotificationInboxPopover({\n  notifications: initialNotifications,\n  triggerLabel = \"\",\n  popoverWidth = \"w-[380px]\",\n  onMarkAll,\n  onMarkAsRead,\n  onViewAll,\n  tabs = [\n    { value: \"all\", label: \"All\" },\n    { value: \"unread\", label: \"Unread\" },\n  ],\n}: NotificationInboxPopoverProps) {\n  const [notifications, setNotifications] = useState(initialNotifications);\n  const [tab, setTab] = useState(tabs[0].value);\n\n  const unreadCount = notifications.filter((n) => n.unread).length;\n  const filtered =\n    tab === \"unread\" ? notifications.filter((n) => n.unread) : notifications;\n\n  const handleMarkAsRead = (id: number) => {\n    setNotifications((prev) =>\n      prev.map((n) => (n.id === id ? { ...n, unread: false } : n)),\n    );\n    onMarkAsRead?.(id);\n  };\n\n  const handleMarkAll = () => {\n    setNotifications((prev) => prev.map((n) => ({ ...n, unread: false })));\n    onMarkAll?.(notifications);\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          size=\"icon\"\n          variant=\"outline\"\n          className=\"relative\"\n          aria-label=\"Open notifications\"\n        >\n          <span>{triggerLabel || <span />} </span>\n          {unreadCount > 0 && (\n            <Badge className=\"absolute -top-2 left-full min-w-5 -translate-x-1/2 px-1\">\n              {unreadCount > 99 ? \"99+\" : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className={`${popoverWidth} p-0`}>\n        {/* Header with Tabs + Mark All */}\n        <Tabs value={tab} onValueChange={setTab}>\n          <div className=\"flex items-center justify-between border-b px-3 py-2\">\n            <TabsList className=\"bg-transparent\">\n              {tabs.map((t) => (\n                <TabsTrigger key={t.value} value={t.value} className=\"text-sm\">\n                  {t.label}\n                  {t.value === \"unread\" && unreadCount > 0 && (\n                    <Badge className=\"ml-1\">{unreadCount}</Badge>\n                  )}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n            {unreadCount > 0 && (\n              <button\n                onClick={handleMarkAll}\n                className=\"text-xs font-medium text-muted-foreground hover:underline\"\n              >\n                Mark all as read\n              </button>\n            )}\n          </div>\n\n          {/* Notifications List */}\n          <div className=\"max-h-80 overflow-y-auto\">\n            {filtered.length === 0 ? (\n              <div className=\"px-3 py-6 text-center text-sm text-muted-foreground\">\n                No notifications\n              </div>\n            ) : (\n              filtered.map((n) => {\n                const Icon = n.icon;\n                return (\n                  <button\n                    key={n.id}\n                    onClick={() => handleMarkAsRead(n.id)}\n                    className=\"flex w-full items-start gap-3 border-b px-3 py-3 text-left hover:bg-accent\"\n                  >\n                    <div className=\"mt-1 text-muted-foreground\">\n                      <Icon size={18} />\n                    </div>\n                    <div className=\"flex-1 space-y-1\">\n                      <p\n                        className={`text-sm ${\n                          n.unread\n                            ? \"font-semibold text-foreground\"\n                            : \"text-foreground/80\"\n                        }`}\n                      >\n                        {n.user} {n.action}{\" \"}\n                        <span className=\"font-medium\">{n.target}</span>\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {n.timestamp}\n                      </p>\n                    </div>\n                    {n.unread && (\n                      <span className=\"mt-1 inline-block size-2 rounded-full bg-primary\" />\n                    )}\n                  </button>\n                );\n              })\n            )}\n          </div>\n        </Tabs>\n        {/* Footer */}\n        <div className=\"px-3 py-2 text-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"w-full\"\n            onClick={onViewAll}\n          >\n            View all notifications\n          </Button>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/notification-inbox-popover.tsx"
    }
  ]
}