{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "notification-inbox-popover",
  "type": "registry:ui",
  "title": "Notification Inbox Popover",
  "description": "A notification inbox popover with tabs, unread counts, and mark as read functionality.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "popover",
    "tabs"
  ],
  "files": [
    {
      "path": "registry/ruixenui/notification-inbox-popover.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\";\r\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { LucideIcon } from \"lucide-react\";\r\n\r\nexport interface Notification {\r\n  id: number;\r\n  user: string;\r\n  action: string;\r\n  target: string;\r\n  timestamp: string;\r\n  unread: boolean;\r\n  icon: LucideIcon;\r\n}\r\n\r\ninterface NotificationInboxPopoverProps {\r\n  notifications: Notification[];\r\n  triggerLabel?: string;\r\n  popoverWidth?: string;\r\n  onMarkAll?: (notifications: Notification[]) => void;\r\n  onMarkAsRead?: (id: number) => void;\r\n  onViewAll?: () => void;\r\n  tabs?: { value: string; label: string }[];\r\n}\r\n\r\nexport function NotificationInboxPopover({\r\n  notifications: initialNotifications,\r\n  triggerLabel = \"\",\r\n  popoverWidth = \"w-[380px]\",\r\n  onMarkAll,\r\n  onMarkAsRead,\r\n  onViewAll,\r\n  tabs = [\r\n    { value: \"all\", label: \"All\" },\r\n    { value: \"unread\", label: \"Unread\" },\r\n  ],\r\n}: NotificationInboxPopoverProps) {\r\n  const [notifications, setNotifications] = useState(initialNotifications);\r\n  const [tab, setTab] = useState(tabs[0].value);\r\n\r\n  const unreadCount = notifications.filter((n) => n.unread).length;\r\n  const filtered =\r\n    tab === \"unread\" ? notifications.filter((n) => n.unread) : notifications;\r\n\r\n  const handleMarkAsRead = (id: number) => {\r\n    setNotifications((prev) =>\r\n      prev.map((n) => (n.id === id ? { ...n, unread: false } : n))\r\n    );\r\n    onMarkAsRead?.(id);\r\n  };\r\n\r\n  const handleMarkAll = () => {\r\n    setNotifications((prev) => prev.map((n) => ({ ...n, unread: false })));\r\n    onMarkAll?.(notifications);\r\n  };\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button size=\"icon\" variant=\"outline\" className=\"relative\" aria-label=\"Open notifications\">\r\n          <span>{triggerLabel || <span />} </span>\r\n          {unreadCount > 0 && (\r\n            <Badge className=\"absolute -top-2 left-full min-w-5 -translate-x-1/2 px-1\">\r\n              {unreadCount > 99 ? \"99+\" : unreadCount}\r\n            </Badge>\r\n          )}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className={`${popoverWidth} p-0`}>\r\n        {/* Header with Tabs + Mark All */}\r\n        <Tabs value={tab} onValueChange={setTab}>\r\n          <div className=\"flex items-center justify-between border-b px-3 py-2\">\r\n            <TabsList className=\"bg-transparent\">\r\n              {tabs.map((t) => (\r\n                <TabsTrigger key={t.value} value={t.value} className=\"text-sm\">\r\n                  {t.label}\r\n                  {t.value === \"unread\" && unreadCount > 0 && (\r\n                    <Badge className=\"ml-1\">{unreadCount}</Badge>\r\n                  )}\r\n                </TabsTrigger>\r\n              ))}\r\n            </TabsList>\r\n            {unreadCount > 0 && (\r\n              <button\r\n                onClick={handleMarkAll}\r\n                className=\"text-xs font-medium text-muted-foreground hover:underline\"\r\n              >\r\n                Mark all as read\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          {/* Notifications List */}\r\n          <div className=\"max-h-80 overflow-y-auto\">\r\n            {filtered.length === 0 ? (\r\n              <div className=\"px-3 py-6 text-center text-sm text-muted-foreground\">\r\n                No notifications\r\n              </div>\r\n            ) : (\r\n              filtered.map((n) => {\r\n                const Icon = n.icon;\r\n                return (\r\n                  <button\r\n                    key={n.id}\r\n                    onClick={() => handleMarkAsRead(n.id)}\r\n                    className=\"flex w-full items-start gap-3 border-b px-3 py-3 text-left hover:bg-accent\"\r\n                  >\r\n                    <div className=\"mt-1 text-muted-foreground\">\r\n                      <Icon size={18} />\r\n                    </div>\r\n                    <div className=\"flex-1 space-y-1\">\r\n                      <p\r\n                        className={`text-sm ${\r\n                          n.unread ? \"font-semibold text-foreground\" : \"text-foreground/80\"\r\n                        }`}\r\n                      >\r\n                        {n.user} {n.action}{\" \"}\r\n                        <span className=\"font-medium\">{n.target}</span>\r\n                      </p>\r\n                      <p className=\"text-xs text-muted-foreground\">{n.timestamp}</p>\r\n                    </div>\r\n                    {n.unread && (\r\n                      <span className=\"mt-1 inline-block size-2 rounded-full bg-primary\" />\r\n                    )}\r\n                  </button>\r\n                );\r\n              })\r\n            )}\r\n          </div>\r\n        </Tabs>\r\n        {/* Footer */}\r\n        <div className=\"px-3 py-2 text-center\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"w-full\"\r\n            onClick={onViewAll}\r\n          >\r\n            View all notifications\r\n          </Button>\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/notification-inbox-popover.tsx"
    }
  ]
}