{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "health-stat-card",
  "type": "registry:ui",
  "title": "Health Stat Card",
  "description": "An interactive health statistics card with animated progress rings, trend indicators, and detailed metrics display.",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/health-stat-card.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { motion } from \"framer-motion\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\"\r\n\r\nexport interface StatData {\r\n  title: string\r\n  value: string | number\r\n  unit?: string\r\n  changePercent?: number\r\n  changeDirection?: \"up\" | \"down\"\r\n}\r\n\r\nexport interface HealthGraphData {\r\n  label: string\r\n  value: number\r\n  color?: string\r\n  description?: string\r\n}\r\n\r\nexport interface HealthStatCardProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  headerIcon?: React.ReactNode\r\n  title: string\r\n  stats: StatData[]\r\n  graphData?: HealthGraphData[]\r\n  graphHeight?: number\r\n  showLegend?: boolean\r\n  legendTitle?: string\r\n  legendFormat?: (item: HealthGraphData) => string\r\n}\r\n\r\nexport const HealthStatCard = React.forwardRef<HTMLDivElement, HealthStatCardProps>(\r\n  (\r\n    {\r\n      className,\r\n      headerIcon,\r\n      title,\r\n      stats,\r\n      graphData,\r\n      graphHeight = 100,\r\n      showLegend = true,\r\n      legendTitle = \"Data Breakdown\",\r\n      legendFormat,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const containerVariants = {\r\n      hidden: { opacity: 0 },\r\n      visible: {\r\n        opacity: 1,\r\n        transition: { staggerChildren: 0.05 },\r\n      },\r\n    }\r\n\r\n    const barVariants = {\r\n      hidden: { scaleY: 0 },\r\n      visible: {\r\n        scaleY: 1,\r\n        transition: { type: \"spring\", stiffness: 100, damping: 15 },\r\n      },\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"w-full max-w-md rounded-2xl border bg-card p-6 text-card-foreground shadow-sm\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {/* Header */}\r\n        <div className=\"mb-5 flex items-center gap-3\">\r\n          {headerIcon && <div className=\"text-primary\">{headerIcon}</div>}\r\n          <h2 className=\"text-lg font-semibold tracking-tight\">{title}</h2>\r\n        </div>\r\n\r\n        {/* Stats */}\r\n        <div className=\"mb-6 grid grid-cols-3 gap-4 text-center\">\r\n          {stats.map((item, i) => (\r\n            <div key={i}>\r\n              <div className=\"flex items-center justify-center gap-1\">\r\n                <p className=\"text-2xl font-bold\">{item.value}</p>\r\n                {item.unit && (\r\n                  <span className=\"text-sm text-muted-foreground\">{item.unit}</span>\r\n                )}\r\n              </div>\r\n              <p className=\"text-xs text-muted-foreground\">{item.title}</p>\r\n              {item.changePercent !== undefined && (\r\n                <div\r\n                  className={cn(\r\n                    \"mt-1 text-xs font-medium\",\r\n                    item.changeDirection === \"up\"\r\n                      ? \"text-green-500\"\r\n                      : \"text-red-500\"\r\n                  )}\r\n                >\r\n                  {item.changeDirection === \"up\" ? \"▲\" : \"▼\"} {item.changePercent}%\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Animated Graph */}\r\n        {graphData && (\r\n          <TooltipProvider delayDuration={100}>\r\n            <div className=\"rounded-lg bg-muted/50 p-4\">\r\n              <motion.div\r\n                className=\"flex w-full items-end justify-between gap-2\"\r\n                variants={containerVariants}\r\n                initial=\"hidden\"\r\n                animate=\"visible\"\r\n                style={{ height: graphHeight }}\r\n              >\r\n                {graphData.map((bar, i) => (\r\n                  <Tooltip key={i}>\r\n                    <TooltipTrigger asChild>\r\n                      <motion.div\r\n                        className=\"flex-1 rounded-full cursor-pointer\"\r\n                        style={{\r\n                          height: `${bar.value}%`,\r\n                          background: `linear-gradient(180deg, ${bar.color} 0%, ${bar.color}cc 100%)`,\r\n                        }}\r\n                        whileHover={{\r\n                          scale: 1.1,\r\n                          y: -6,\r\n                          boxShadow: \"0 10px 20px rgba(0,0,0,0.2)\",\r\n                          rotateX: 8,\r\n                          rotateY: -6,\r\n                          transition: { type: \"spring\", stiffness: 200, damping: 10 },\r\n                        }}\r\n                        whileTap={{ scale: 0.95 }}\r\n                      />\r\n                    </TooltipTrigger>\r\n                    <TooltipContent className=\"text-xs\">\r\n                      <p className=\"font-semibold\">{bar.label}</p>\r\n                      <p className=\"text-muted-foreground\">{bar.value}%</p>\r\n                      {bar.description && (\r\n                        <p className=\"text-muted-foreground mt-1\">{bar.description}</p>\r\n                      )}\r\n                    </TooltipContent>\r\n                  </Tooltip>\r\n                ))}\r\n              </motion.div>\r\n            </div>\r\n          </TooltipProvider>\r\n        )}\r\n\r\n        {/* Legend */}\r\n        {showLegend && graphData && (\r\n          <div className=\"mt-6\">\r\n            <h4 className=\"mb-2 text-sm font-medium text-muted-foreground\">\r\n              {legendTitle}\r\n            </h4>\r\n            <div className=\"grid grid-cols-2 gap-2 sm:grid-cols-4\">\r\n              {graphData.map((item, i) => (\r\n                <div key={i} className=\"flex items-center gap-2\">\r\n                  <span\r\n                    className=\"h-2 w-2 rounded-full\"\r\n                    style={{ backgroundColor: item.color }}\r\n                  />\r\n                  <span className=\"text-xs text-muted-foreground\">\r\n                    {legendFormat\r\n                      ? legendFormat(item)\r\n                      : `${item.label} (${item.value}%)`}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nHealthStatCard.displayName = \"HealthStatCard\"\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/health-stat-card.tsx"
    }
  ]
}