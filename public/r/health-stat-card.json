{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "health-stat-card",
  "type": "registry:ui",
  "title": "Health Stat Card",
  "description": "An interactive health statistics card with animated progress rings, trend indicators, and detailed metrics display.",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/health-stat-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nexport interface StatData {\n  title: string;\n  value: string | number;\n  unit?: string;\n  changePercent?: number;\n  changeDirection?: \"up\" | \"down\";\n}\n\nexport interface HealthGraphData {\n  label: string;\n  value: number;\n  color?: string;\n  description?: string;\n}\n\nexport interface HealthStatCardProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  headerIcon?: React.ReactNode;\n  title: string;\n  stats: StatData[];\n  graphData?: HealthGraphData[];\n  graphHeight?: number;\n  showLegend?: boolean;\n  legendTitle?: string;\n  legendFormat?: (item: HealthGraphData) => string;\n}\n\nexport const HealthStatCard = React.forwardRef<\n  HTMLDivElement,\n  HealthStatCardProps\n>(\n  (\n    {\n      className,\n      headerIcon,\n      title,\n      stats,\n      graphData,\n      graphHeight = 100,\n      showLegend = true,\n      legendTitle = \"Data Breakdown\",\n      legendFormat,\n      ...props\n    },\n    ref,\n  ) => {\n    const containerVariants = {\n      hidden: { opacity: 0 },\n      visible: {\n        opacity: 1,\n        transition: { staggerChildren: 0.05 },\n      },\n    };\n\n    const barVariants = {\n      hidden: { scaleY: 0 },\n      visible: {\n        scaleY: 1,\n        transition: { type: \"spring\", stiffness: 100, damping: 15 },\n      },\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"w-full max-w-md rounded-2xl border bg-card p-6 text-card-foreground shadow-sm\",\n          className,\n        )}\n        {...props}\n      >\n        {/* Header */}\n        <div className=\"mb-5 flex items-center gap-3\">\n          {headerIcon && <div className=\"text-primary\">{headerIcon}</div>}\n          <h2 className=\"text-lg font-semibold tracking-tight\">{title}</h2>\n        </div>\n\n        {/* Stats */}\n        <div className=\"mb-6 grid grid-cols-3 gap-4 text-center\">\n          {stats.map((item, i) => (\n            <div key={i}>\n              <div className=\"flex items-center justify-center gap-1\">\n                <p className=\"text-2xl font-bold\">{item.value}</p>\n                {item.unit && (\n                  <span className=\"text-sm text-muted-foreground\">\n                    {item.unit}\n                  </span>\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">{item.title}</p>\n              {item.changePercent !== undefined && (\n                <div\n                  className={cn(\n                    \"mt-1 text-xs font-medium\",\n                    item.changeDirection === \"up\"\n                      ? \"text-green-500\"\n                      : \"text-red-500\",\n                  )}\n                >\n                  {item.changeDirection === \"up\" ? \"▲\" : \"▼\"}{\" \"}\n                  {item.changePercent}%\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Animated Graph */}\n        {graphData && (\n          <TooltipProvider delayDuration={100}>\n            <div className=\"rounded-lg bg-muted/50 p-4\">\n              <motion.div\n                className=\"flex w-full items-end justify-between gap-2\"\n                variants={containerVariants}\n                initial=\"hidden\"\n                animate=\"visible\"\n                style={{ height: graphHeight }}\n              >\n                {graphData.map((bar, i) => (\n                  <Tooltip key={i}>\n                    <TooltipTrigger asChild>\n                      <motion.div\n                        className=\"flex-1 rounded-full cursor-pointer\"\n                        style={{\n                          height: `${bar.value}%`,\n                          background: `linear-gradient(180deg, ${bar.color} 0%, ${bar.color}cc 100%)`,\n                        }}\n                        whileHover={{\n                          scale: 1.1,\n                          y: -6,\n                          boxShadow: \"0 10px 20px rgba(0,0,0,0.2)\",\n                          rotateX: 8,\n                          rotateY: -6,\n                          transition: {\n                            type: \"spring\",\n                            stiffness: 200,\n                            damping: 10,\n                          },\n                        }}\n                        whileTap={{ scale: 0.95 }}\n                      />\n                    </TooltipTrigger>\n                    <TooltipContent className=\"text-xs\">\n                      <p className=\"font-semibold\">{bar.label}</p>\n                      <p className=\"text-muted-foreground\">{bar.value}%</p>\n                      {bar.description && (\n                        <p className=\"text-muted-foreground mt-1\">\n                          {bar.description}\n                        </p>\n                      )}\n                    </TooltipContent>\n                  </Tooltip>\n                ))}\n              </motion.div>\n            </div>\n          </TooltipProvider>\n        )}\n\n        {/* Legend */}\n        {showLegend && graphData && (\n          <div className=\"mt-6\">\n            <h4 className=\"mb-2 text-sm font-medium text-muted-foreground\">\n              {legendTitle}\n            </h4>\n            <div className=\"grid grid-cols-2 gap-2 sm:grid-cols-4\">\n              {graphData.map((item, i) => (\n                <div key={i} className=\"flex items-center gap-2\">\n                  <span\n                    className=\"h-2 w-2 rounded-full\"\n                    style={{ backgroundColor: item.color }}\n                  />\n                  <span className=\"text-xs text-muted-foreground\">\n                    {legendFormat\n                      ? legendFormat(item)\n                      : `${item.label} (${item.value}%)`}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nHealthStatCard.displayName = \"HealthStatCard\";\n",
      "type": "registry:ui",
      "target": "components/ruixen/health-stat-card.tsx"
    }
  ]
}