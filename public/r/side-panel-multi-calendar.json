{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "side-panel-multi-calendar",
  "type": "registry:ui",
  "title": "Side Panel Multi Calendar",
  "description": "A multi-select calendar with a side panel showing grouped selected dates by month.",
  "dependencies": [
    "date-fns"
  ],
  "registryDependencies": [
    "calendar",
    "button",
    "scroll-area",
    "card"
  ],
  "files": [
    {
      "path": "registry/ruixenui/side-panel-multi-calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { format } from \"date-fns\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\nexport type SidePanelMultiCalendarProps = {\n  selectedDates?: Date[];\n  onChange?: (dates: Date[]) => void;\n  maxSelectable?: number;\n  label?: string;\n  dateFormat?: string;\n  className?: string;\n  calendarClassName?: string;\n  panelClassName?: string;\n};\n\nexport function SidePanelMultiCalendar({\n  selectedDates = [],\n  onChange,\n  maxSelectable,\n  label = \"Multi-Select Calendar with Side Panel\",\n  dateFormat = \"d\",\n  className,\n  calendarClassName,\n  panelClassName,\n}: SidePanelMultiCalendarProps) {\n  const [dates, setDates] = React.useState<Date[]>(selectedDates);\n\n  // Group selected dates by month-year\n  const groupedDates = dates.reduce<Record<string, Date[]>>((acc, date) => {\n    const key = format(date, \"MMMM yyyy\");\n    if (!acc[key]) acc[key] = [];\n    acc[key].push(date);\n    return acc;\n  }, {});\n\n  const handleSelect = (selected: Date[] | undefined) => {\n    let newDates = selected ?? [];\n    if (maxSelectable) {\n      newDates = newDates.slice(0, maxSelectable);\n    }\n    setDates(newDates);\n    onChange?.(newDates);\n  };\n\n  const handleRemove = (date: Date) => {\n    const newDates = dates.filter(\n      (d) => format(d, \"yyyy-MM-dd\") !== format(date, \"yyyy-MM-dd\"),\n    );\n    setDates(newDates);\n    onChange?.(newDates);\n  };\n\n  const handleClearMonth = (monthKey: string) => {\n    const newDates = dates.filter((d) => format(d, \"MMMM yyyy\") !== monthKey);\n    setDates(newDates);\n    onChange?.(newDates);\n  };\n\n  return (\n    <Card className={cn(\"shadow-none border-none bg-background\", className)}>\n      <CardHeader>\n        <CardTitle className=\"text-base\">{label}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex gap-4\">\n        {/* Calendar Section */}\n        <Calendar\n          mode=\"multiple\"\n          selected={dates}\n          onSelect={handleSelect}\n          className={cn(\"rounded-md\", calendarClassName)}\n        />\n\n        {/* Side Panel Section */}\n        <div className={cn(\"w-[260px]\", panelClassName)}>\n          <p className=\"mb-2 text-sm font-medium text-muted-foreground\">\n            Selected Dates\n          </p>\n          <ScrollArea className=\"h-[280px] pr-2\">\n            {Object.keys(groupedDates).length === 0 && (\n              <p className=\"text-xs text-muted-foreground\">No dates selected</p>\n            )}\n            {Object.entries(groupedDates).map(([monthKey, datesInMonth]) => (\n              <div key={monthKey} className=\"mb-3\">\n                <div className=\"flex justify-between items-center mb-1\">\n                  <span className=\"text-sm font-semibold\">{monthKey}</span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"text-xs\"\n                    onClick={() => handleClearMonth(monthKey)}\n                  >\n                    Clear\n                  </Button>\n                </div>\n                <div className=\"flex flex-wrap gap-2\">\n                  {datesInMonth\n                    .sort((a, b) => a.getTime() - b.getTime())\n                    .map((d) => (\n                      <Button\n                        key={d.toISOString()}\n                        size=\"sm\"\n                        variant=\"secondary\"\n                        className=\"text-xs\"\n                        onClick={() => handleRemove(d)}\n                      >\n                        {format(d, dateFormat)}\n                      </Button>\n                    ))}\n                </div>\n              </div>\n            ))}\n          </ScrollArea>\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex justify-end\">\n        <Button\n          size=\"sm\"\n          onClick={() => console.log(\"Confirmed:\", dates)}\n          disabled={dates.length === 0}\n        >\n          Confirm\n        </Button>\n      </CardFooter>\n      <div className=\"mt-4 text-xs text-center text-muted-foreground\">\n        Minimal design â€¢ Inspired by{\" \"}\n        <a href=\"https://www.ruixen.com\" target=\"_blank\" className=\"underline\">\n          ruixen.com\n        </a>\n      </div>\n    </Card>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/side-panel-multi-calendar.tsx"
    }
  ]
}