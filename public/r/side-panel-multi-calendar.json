{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "side-panel-multi-calendar",
  "type": "registry:ui",
  "title": "Side Panel Multi Calendar",
  "description": "A multi-select calendar with a side panel showing grouped selected dates by month.",
  "dependencies": [
    "date-fns"
  ],
  "registryDependencies": [
    "calendar",
    "button",
    "scroll-area",
    "card"
  ],
  "files": [
    {
      "path": "registry/ruixenui/side-panel-multi-calendar.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { format } from \"date-fns\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport type SidePanelMultiCalendarProps = {\r\n  selectedDates?: Date[];\r\n  onChange?: (dates: Date[]) => void;\r\n  maxSelectable?: number;\r\n  label?: string;\r\n  dateFormat?: string;\r\n  className?: string;\r\n  calendarClassName?: string;\r\n  panelClassName?: string;\r\n};\r\n\r\nexport function SidePanelMultiCalendar({\r\n  selectedDates = [],\r\n  onChange,\r\n  maxSelectable,\r\n  label = \"Multi-Select Calendar with Side Panel\",\r\n  dateFormat = \"d\",\r\n  className,\r\n  calendarClassName,\r\n  panelClassName,\r\n}: SidePanelMultiCalendarProps) {\r\n  const [dates, setDates] = React.useState<Date[]>(selectedDates);\r\n\r\n  // Group selected dates by month-year\r\n  const groupedDates = dates.reduce<Record<string, Date[]>>((acc, date) => {\r\n    const key = format(date, \"MMMM yyyy\");\r\n    if (!acc[key]) acc[key] = [];\r\n    acc[key].push(date);\r\n    return acc;\r\n  }, {});\r\n\r\n  const handleSelect = (selected: Date[] | undefined) => {\r\n    let newDates = selected ?? [];\r\n    if (maxSelectable) {\r\n      newDates = newDates.slice(0, maxSelectable);\r\n    }\r\n    setDates(newDates);\r\n    onChange?.(newDates);\r\n  };\r\n\r\n  const handleRemove = (date: Date) => {\r\n    const newDates = dates.filter(\r\n      (d) => format(d, \"yyyy-MM-dd\") !== format(date, \"yyyy-MM-dd\")\r\n    );\r\n    setDates(newDates);\r\n    onChange?.(newDates);\r\n  };\r\n\r\n  const handleClearMonth = (monthKey: string) => {\r\n    const newDates = dates.filter(\r\n      (d) => format(d, \"MMMM yyyy\") !== monthKey\r\n    );\r\n    setDates(newDates);\r\n    onChange?.(newDates);\r\n  };\r\n\r\n  return (\r\n    <Card className={cn(\"shadow-none border-none bg-background\", className)}>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-base\">{label}</CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"flex gap-4\">\r\n        {/* Calendar Section */}\r\n        <Calendar\r\n          mode=\"multiple\"\r\n          selected={dates}\r\n          onSelect={handleSelect}\r\n          className={cn(\"rounded-md\", calendarClassName)}\r\n        />\r\n\r\n        {/* Side Panel Section */}\r\n        <div className={cn(\"w-[260px]\", panelClassName)}>\r\n          <p className=\"mb-2 text-sm font-medium text-muted-foreground\">\r\n            Selected Dates\r\n          </p>\r\n          <ScrollArea className=\"h-[280px] pr-2\">\r\n            {Object.keys(groupedDates).length === 0 && (\r\n              <p className=\"text-xs text-muted-foreground\">No dates selected</p>\r\n            )}\r\n            {Object.entries(groupedDates).map(([monthKey, datesInMonth]) => (\r\n              <div key={monthKey} className=\"mb-3\">\r\n                <div className=\"flex justify-between items-center mb-1\">\r\n                  <span className=\"text-sm font-semibold\">{monthKey}</span>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"ghost\"\r\n                    className=\"text-xs\"\r\n                    onClick={() => handleClearMonth(monthKey)}\r\n                  >\r\n                    Clear\r\n                  </Button>\r\n                </div>\r\n                <div className=\"flex flex-wrap gap-2\">\r\n                  {datesInMonth\r\n                    .sort((a, b) => a.getTime() - b.getTime())\r\n                    .map((d) => (\r\n                      <Button\r\n                        key={d.toISOString()}\r\n                        size=\"sm\"\r\n                        variant=\"secondary\"\r\n                        className=\"text-xs\"\r\n                        onClick={() => handleRemove(d)}\r\n                      >\r\n                        {format(d, dateFormat)}\r\n                      </Button>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </ScrollArea>\r\n        </div>\r\n      </CardContent>\r\n      <CardFooter className=\"flex justify-end\">\r\n        <Button\r\n          size=\"sm\"\r\n          onClick={() => console.log(\"Confirmed:\", dates)}\r\n          disabled={dates.length === 0}\r\n        >\r\n          Confirm\r\n        </Button>\r\n      </CardFooter>\r\n      <div className=\"mt-4 text-xs text-center text-muted-foreground\">\r\n        Minimal design â€¢ Inspired by{\" \"}\r\n        <a href=\"https://www.ruixen.com\" target=\"_blank\" className=\"underline\">\r\n          ruixen.com\r\n        </a>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/side-panel-multi-calendar.tsx"
    }
  ]
}