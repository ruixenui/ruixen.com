{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sliding-tabs",
  "type": "registry:ui",
  "title": "Sliding Tabs",
  "description": "Tab component with sliding gradient indicator and keyboard navigation support.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/ruixenui/sliding-tabs.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\nexport interface TabItem {\n  key: string | number;\n  label: React.ReactNode;\n  panel?: React.ReactNode;\n}\n\ninterface SlidingTabsProps {\n  items?: TabItem[];\n  defaultIndex?: number;\n  onChange?: (index: number) => void;\n  className?: string;\n}\n\nexport default function SlidingTabs({\n  items = [\n    { key: 0, label: \"Overview\", panel: \"Overview content\" },\n    { key: 1, label: \"Activity\", panel: \"Activity content\" },\n    { key: 2, label: \"Settings\", panel: \"Settings content\" },\n  ],\n  defaultIndex = 0,\n  onChange,\n  className,\n}: SlidingTabsProps) {\n  const [active, setActive] = React.useState<number>(defaultIndex);\n  const containerRef = React.useRef<HTMLDivElement | null>(null);\n  const tabRefs = React.useRef<Array<HTMLButtonElement | null>>([]);\n  const [indicator, setIndicator] = React.useState<{\n    left: number;\n    width: number;\n  } | null>(null);\n\n  // measure indicator position\n  const measure = React.useCallback(() => {\n    const container = containerRef.current;\n    const activeBtn = tabRefs.current[active];\n    if (!container || !activeBtn) return setIndicator(null);\n    const cRect = container.getBoundingClientRect();\n    const tRect = activeBtn.getBoundingClientRect();\n    setIndicator({ left: tRect.left - cRect.left, width: tRect.width });\n  }, [active]);\n\n  React.useEffect(() => {\n    measure();\n    const ro = new ResizeObserver(measure);\n    if (containerRef.current) ro.observe(containerRef.current);\n    tabRefs.current.forEach((el) => el && ro.observe(el));\n    window.addEventListener(\"resize\", measure);\n    return () => {\n      ro.disconnect();\n      window.removeEventListener(\"resize\", measure);\n    };\n  }, [measure]);\n\n  React.useEffect(() => {\n    if (onChange) onChange(active);\n  }, [active, onChange]);\n\n  // keyboard navigation\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"ArrowRight\") {\n      setActive((v) => Math.min(v + 1, items.length - 1));\n    } else if (e.key === \"ArrowLeft\") {\n      setActive((v) => Math.max(v - 1, 0));\n    } else if (e.key === \"Home\") {\n      setActive(0);\n    } else if (e.key === \"End\") {\n      setActive(items.length - 1);\n    }\n  };\n\n  return (\n    <div className={cn(\"w-full mx-auto\", className)}>\n      {/* Tab list */}\n      <div\n        ref={containerRef}\n        role=\"tablist\"\n        aria-label=\"Sliding tabs\"\n        onKeyDown={onKeyDown}\n        className=\"relative inline-flex items-center gap-2 p-1 rounded-2xl bg-background/50 backdrop-blur-sm border border-border\"\n      >\n        {/* glowing blurred behind */}\n        {indicator && (\n          <motion.div\n            layout\n            initial={false}\n            animate={{ left: indicator.left, width: indicator.width }}\n            transition={{ type: \"spring\", stiffness: 250, damping: 30 }}\n            className=\"absolute pointer-events-none rounded-lg\"\n            style={{ top: 6, height: `calc(100% - 12px)` }}\n          >\n            {/* blur glow layer */}\n            <motion.div\n              initial={false}\n              animate={{ opacity: 0.28 }}\n              transition={{ duration: 0.25 }}\n              className=\"absolute inset-0 rounded-lg filter blur-2xl\"\n              style={{\n                background: \"linear-gradient(90deg,#7c3aed,#06b6d4,#10b981)\",\n              }}\n            />\n          </motion.div>\n        )}\n\n        {/* colored sliding bar */}\n        {indicator && (\n          <motion.div\n            layout\n            initial={false}\n            animate={{ left: indicator.left, width: indicator.width }}\n            transition={{ type: \"spring\", stiffness: 300, damping: 28 }}\n            className=\"absolute pointer-events-none rounded-md\"\n            style={{\n              top: 8,\n              height: `calc(100% - 16px)`,\n              background: \"linear-gradient(90deg,#7c3aed,#06b6d4,#10b981)\",\n              mixBlendMode: \"screen\",\n              opacity: 0.96,\n            }}\n          />\n        )}\n\n        {/* tabs */}\n        {items.map((item, i) => {\n          const isActive = i === active;\n          return (\n            <Button\n              key={item.key}\n              ref={(el) => (tabRefs.current[i] = el)}\n              variant=\"ghost\"\n              size=\"sm\"\n              role=\"tab\"\n              aria-selected={isActive}\n              tabIndex={isActive ? 0 : -1}\n              onClick={() => setActive(i)}\n              className={cn(\n                \"relative z-10 px-3 py-2 rounded-lg transition-colors hover:bg-transparent\",\n                isActive ? \"text-white\" : \"text-foreground/80\",\n              )}\n            >\n              <span className=\"text-sm font-medium\">{item.label}</span>\n            </Button>\n          );\n        })}\n      </div>\n\n      {/* panels */}\n      <div className=\"mt-4\">\n        {items.map((item, i) => (\n          <div\n            key={item.key}\n            role=\"tabpanel\"\n            aria-hidden={i !== active}\n            hidden={i !== active}\n            className=\"p-2\"\n          >\n            {item.panel ?? null}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/sliding-tabs.tsx"
    }
  ]
}