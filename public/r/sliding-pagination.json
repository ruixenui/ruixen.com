{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sliding-pagination",
  "type": "registry:ui",
  "title": "Sliding Pagination",
  "description": "Pagination component with sliding underline indicator and smart page grouping.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/ruixenui/sliding-pagination.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\n\ninterface PaginationProps {\n  totalPages: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n  className?: string;\n  maxVisiblePages?: number; // max number of page buttons to show before adding dots\n}\n\nexport default function SlidingPagination({\n  totalPages,\n  currentPage,\n  onPageChange,\n  className,\n  maxVisiblePages = 7,\n}: PaginationProps) {\n  const buttonRefs = React.useRef<(HTMLButtonElement | null)[]>([]);\n  const [underlineStyle, setUnderlineStyle] = React.useState<{\n    left: number;\n    width: number;\n  }>({\n    left: 0,\n    width: 0,\n  });\n\n  // Update underline position whenever current page changes\n  React.useEffect(() => {\n    const currentBtn = buttonRefs.current[currentPage - 1];\n    if (currentBtn) {\n      const rect = currentBtn.getBoundingClientRect();\n      const parentRect = currentBtn.parentElement!.getBoundingClientRect();\n      setUnderlineStyle({\n        left: rect.left - parentRect.left,\n        width: rect.width,\n      });\n    }\n  }, [currentPage, totalPages]);\n\n  // Generate pages array with ellipsis if needed\n  const generatePages = () => {\n    if (totalPages <= maxVisiblePages)\n      return Array.from({ length: totalPages }, (_, i) => i + 1);\n\n    const pages: (number | -1)[] = [];\n    const first = 1;\n    const last = totalPages;\n    const sideCount = 1;\n    const middleCount = maxVisiblePages - 2 * sideCount - 2;\n\n    pages.push(first);\n\n    // left/right bounds around current page\n    let left = Math.max(\n      currentPage - Math.floor(middleCount / 2),\n      sideCount + 1,\n    );\n    let right = Math.min(\n      currentPage + Math.floor(middleCount / 2),\n      totalPages - sideCount,\n    );\n\n    // Add first ellipsis if needed\n    if (left > sideCount + 1) pages.push(-1);\n    else left = sideCount + 1; // include pages after first if no dots\n\n    // Add middle pages\n    for (let i = left; i <= right; i++) pages.push(i);\n\n    // Add last ellipsis if needed\n    if (right < totalPages - sideCount) pages.push(-1);\n\n    pages.push(last);\n\n    return pages;\n  };\n\n  const pagesToShow = generatePages();\n\n  return (\n    <div className={cn(\"relative inline-flex items-center gap-2\", className)}>\n      {pagesToShow.map((pageNum, i) =>\n        pageNum === -1 ? (\n          <span key={`dots-${i}`} className=\"px-2 text-gray-400\">\n            â€¦\n          </span>\n        ) : (\n          <Button\n            key={pageNum}\n            variant=\"ghost\"\n            ref={(el) => (buttonRefs.current[pageNum - 1] = el)}\n            onClick={() => onPageChange(pageNum)}\n            className={cn(\n              \"relative px-4 py-2 text-sm\",\n              pageNum === currentPage ? \"font-semibold\" : \"\",\n            )}\n          >\n            {pageNum}\n          </Button>\n        ),\n      )}\n\n      {/* Sliding underline */}\n      <motion.div\n        layout\n        initial={false}\n        animate={{\n          left: underlineStyle.left,\n          width: underlineStyle.width,\n        }}\n        transition={{ type: \"spring\", stiffness: 300, damping: 25 }}\n        className=\"absolute bottom-0 h-0.5 bg-primary rounded\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/sliding-pagination.tsx"
    }
  ]
}