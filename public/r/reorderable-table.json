{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "reorderable-table",
  "type": "registry:ui",
  "title": "Reorderable Table",
  "description": "A feature-rich table with column reordering, visibility toggle, and search functionality.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "table",
    "button",
    "checkbox",
    "popover",
    "input"
  ],
  "files": [
    {
      "path": "registry/ruixenui/reorderable-table.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Input } from \"@/components/ui/input\";\nimport { ChevronsLeft, ChevronsRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\n/* --------------------- Types ---------------------- */\nexport type ReorderableRow = Record<string, any>;\n\nexport type ColumnDef<T = ReorderableRow> = {\n  key: keyof T;\n  label: string;\n  width?: string;\n  sticky?: boolean;\n  render?: (row: T) => React.ReactNode;\n};\n\nexport interface ReorderableTableProps<T extends ReorderableRow> {\n  data?: T[];\n  columns?: ColumnDef<T>[];\n  lsOrderKey?: string;\n  lsVisibleKey?: string;\n  searchable?: boolean;\n  title?: string;\n}\n\n/* ------------------ Default Data ------------------- */\nconst defaultRows = [\n  {\n    id: 1,\n    name: \"Arjun Mehta\",\n    email: \"arjun.mehta@company.com\",\n    role: \"Manager\",\n    location: \"Bangalore\",\n    status: \"Active\",\n    balance: 1250,\n  },\n  {\n    id: 2,\n    name: \"Hannah Park\",\n    email: \"hannah.park@company.com\",\n    role: \"Designer\",\n    location: \"Seoul\",\n    status: \"Active\",\n    balance: 600,\n  },\n  {\n    id: 3,\n    name: \"Oliver Scott\",\n    email: \"oliver.scott@company.com\",\n    role: \"Engineer\",\n    location: \"Manchester\",\n    status: \"Inactive\",\n    balance: 650,\n  },\n  {\n    id: 4,\n    name: \"Camila Torres\",\n    email: \"camila.torres@company.com\",\n    role: \"HR\",\n    location: \"Bogot√°\",\n    status: \"Active\",\n    balance: 0,\n  },\n  {\n    id: 5,\n    name: \"Kenji Tanaka\",\n    email: \"kenji.tanaka@company.com\",\n    role: \"Developer\",\n    location: \"Osaka\",\n    status: \"Suspended\",\n    balance: -1000,\n  },\n];\n\nconst defaultColumns: ColumnDef<(typeof defaultRows)[0]>[] = [\n  { key: \"name\", label: \"Name\", width: \"220px\" },\n  { key: \"email\", label: \"Email\", width: \"260px\" },\n  { key: \"role\", label: \"Role\", width: \"140px\" },\n  { key: \"location\", label: \"Location\", width: \"160px\" },\n  {\n    key: \"status\",\n    label: \"Status\",\n    width: \"120px\",\n    render: (row) => (\n      <span\n        className={cn(\n          \"inline-block px-2 py-0.5 rounded-md text-sm font-medium\",\n          row.status === \"Active\"\n            ? \"bg-green-100 text-green-800 dark:bg-green-900/30\"\n            : row.status === \"Inactive\"\n              ? \"bg-slate-100 text-slate-800 dark:bg-slate-800/30\"\n              : \"bg-red-100 text-red-800 dark:bg-red-900/30\",\n        )}\n      >\n        {row.status}\n      </span>\n    ),\n  },\n  {\n    key: \"balance\",\n    label: \"Balance\",\n    width: \"120px\",\n    render: (row) => `$${row.balance.toLocaleString()}`,\n  },\n];\n\n/* ---------------- Component ---------------- */\nexport default function ReorderableTable<T extends ReorderableRow>({\n  data = defaultRows as unknown as T[],\n  columns = defaultColumns as unknown as ColumnDef<T>[],\n  lsOrderKey = \"reorderable_table_order_v1\",\n  lsVisibleKey = \"reorderable_table_visible_v1\",\n  searchable = true,\n  title = \"Reorderable Table\",\n}: ReorderableTableProps<T>) {\n  const columnKeys = columns.map((c) => c.key as string);\n\n  // state\n  const [rows] = useState<T[]>(data);\n  const [query, setQuery] = useState(\"\");\n\n  const [columnOrder, setColumnOrder] = useState<string[]>(\n    () => JSON.parse(localStorage.getItem(lsOrderKey) || \"null\") || columnKeys,\n  );\n\n  const [visible, setVisible] = useState<Record<string, boolean>>(() => {\n    const saved = JSON.parse(localStorage.getItem(lsVisibleKey) || \"null\");\n    if (saved) return saved;\n    const initial: Record<string, boolean> = {};\n    columnKeys.forEach((k) => (initial[k] = true));\n    return initial;\n  });\n\n  /* --- persist layout --- */\n  useEffect(() => {\n    localStorage.setItem(lsOrderKey, JSON.stringify(columnOrder));\n  }, [columnOrder, lsOrderKey]);\n\n  useEffect(() => {\n    localStorage.setItem(lsVisibleKey, JSON.stringify(visible));\n  }, [visible, lsVisibleKey]);\n\n  /* --- ensure order is in sync with columns --- */\n  useEffect(() => {\n    setColumnOrder((prev) => {\n      const missing = columnKeys.filter((k) => !prev.includes(k));\n      return [...prev.filter((k) => columnKeys.includes(k)), ...missing];\n    });\n  }, [columnKeys]);\n\n  const orderedColumns = useMemo(\n    () =>\n      columnOrder\n        .map((k) => columns.find((c) => c.key === k))\n        .filter(Boolean) as ColumnDef<T>[],\n    [columnOrder, columns],\n  );\n\n  /* --- Search --- */\n  const filtered = useMemo(() => {\n    if (!query) return rows;\n    const q = query.toLowerCase();\n    return rows.filter((r) =>\n      Object.values(r).some((v) => String(v).toLowerCase().includes(q)),\n    );\n  }, [rows, query]);\n\n  /* --- Drag & Drop --- */\n  const dragSrc = React.useRef<number | null>(null);\n  const onDragStart = (e: React.DragEvent, i: number) => {\n    dragSrc.current = i;\n    e.dataTransfer.effectAllowed = \"move\";\n  };\n  const onDragOver = (e: React.DragEvent) => e.preventDefault();\n  const onDrop = (e: React.DragEvent, i: number) => {\n    e.preventDefault();\n    const src = dragSrc.current;\n    if (src === null || src === i) return;\n    setColumnOrder((prev) => {\n      const next = [...prev];\n      const [moved] = next.splice(src, 1);\n      next.splice(i, 0, moved);\n      return next;\n    });\n    dragSrc.current = null;\n  };\n\n  const moveColumn = (key: string, dir: -1 | 1) => {\n    setColumnOrder((prev) => {\n      const idx = prev.indexOf(key);\n      const nextIdx = idx + dir;\n      if (idx < 0 || nextIdx < 0 || nextIdx >= prev.length) return prev;\n      const next = [...prev];\n      const [moved] = next.splice(idx, 1);\n      next.splice(nextIdx, 0, moved);\n      return next;\n    });\n  };\n\n  const toggleVisible = (key: string) =>\n    setVisible((prev) => ({ ...prev, [key]: !prev[key] }));\n\n  const resetLayout = () => {\n    setColumnOrder(columnKeys);\n    const all: Record<string, boolean> = {};\n    columnKeys.forEach((k) => (all[k] = true));\n    setVisible(all);\n    localStorage.removeItem(lsOrderKey);\n    localStorage.removeItem(lsVisibleKey);\n  };\n\n  return (\n    <div className=\"w-full max-w-6xl mx-auto\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-semibold\">{title}</h2>\n        {searchable && (\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Search...\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              className=\"w-64\"\n            />\n            <Button variant=\"outline\" onClick={() => setQuery(\"\")}>\n              Clear\n            </Button>\n          </div>\n        )}\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button variant=\"outline\">Columns</Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-48\">\n            <div className=\"flex flex-col gap-2\">\n              {columns.map((c) => (\n                <label key={String(c.key)} className=\"flex items-center gap-2\">\n                  <Checkbox\n                    checked={!!visible[String(c.key)]}\n                    onCheckedChange={() => toggleVisible(String(c.key))}\n                  />\n                  <span className=\"text-sm\">{c.label}</span>\n                </label>\n              ))}\n              <div className=\"flex justify-between pt-2\">\n                <Button variant=\"ghost\" size=\"sm\" onClick={resetLayout}>\n                  Reset\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    const visKeys = Object.entries(visible)\n                      .filter(([, v]) => v)\n                      .map(([k]) => k);\n                    setColumnOrder((prev) => [\n                      ...visKeys,\n                      ...prev.filter((k) => !visKeys.includes(k)),\n                    ]);\n                  }}\n                >\n                  Bring visible front\n                </Button>\n              </div>\n            </div>\n          </PopoverContent>\n        </Popover>\n      </div>\n\n      <div className=\"border rounded-md overflow-auto\">\n        <Table className=\"min-w-full border-separate border-spacing-0\">\n          <TableHeader className=\"sticky top-0 bg-background/90 backdrop-blur-sm z-10\">\n            <TableRow>\n              {orderedColumns.map((col, idx) =>\n                visible[String(col.key)] ? (\n                  <TableHead key={String(col.key)} style={{ width: col.width }}>\n                    <div\n                      draggable\n                      onDragStart={(e) => onDragStart(e, idx)}\n                      onDragOver={onDragOver}\n                      onDrop={(e) => onDrop(e, idx)}\n                      className=\"flex items-center justify-between select-none gap-2\"\n                    >\n                      <span>{col.label}</span>\n                      <span className=\"flex gap-1\">\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          onClick={() => moveColumn(String(col.key), -1)}\n                        >\n                          <ChevronsLeft className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          onClick={() => moveColumn(String(col.key), 1)}\n                        >\n                          <ChevronsRight className=\"h-4 w-4\" />\n                        </Button>\n                      </span>\n                    </div>\n                  </TableHead>\n                ) : null,\n              )}\n            </TableRow>\n          </TableHeader>\n\n          <TableBody>\n            {filtered.map((row, i) => (\n              <TableRow key={i} className=\"hover:bg-muted/10\">\n                {orderedColumns.map((col) =>\n                  visible[String(col.key)] ? (\n                    <TableCell key={String(col.key)}>\n                      {col.render ? col.render(row) : String(row[col.key])}\n                    </TableCell>\n                  ) : null,\n                )}\n              </TableRow>\n            ))}\n          </TableBody>\n\n          <TableFooter className=\"sticky bottom-0 bg-background/90\">\n            <TableRow>\n              <TableCell\n                colSpan={\n                  orderedColumns.filter((c) => visible[String(c.key)]).length -\n                  1\n                }\n              >\n                Total: {filtered.length} rows\n              </TableCell>\n              {visible[\"balance\"] ? (\n                <TableCell className=\"text-right font-semibold\">\n                  $\n                  {filtered\n                    .reduce((sum, r: any) => sum + (r.balance || 0), 0)\n                    .toLocaleString()}\n                </TableCell>\n              ) : (\n                <TableCell className=\"text-right\">‚Äî</TableCell>\n              )}\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/reorderable-table.tsx"
    }
  ]
}