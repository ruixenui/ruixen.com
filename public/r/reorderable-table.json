{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "reorderable-table",
  "type": "registry:ui",
  "title": "Reorderable Table",
  "description": "A feature-rich table with column reordering, visibility toggle, and search functionality.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "table",
    "button",
    "checkbox",
    "popover",
    "input"
  ],
  "files": [
    {
      "path": "registry/ruixenui/reorderable-table.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableFooter,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { ChevronsLeft, ChevronsRight } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n/* --------------------- Types ---------------------- */\r\nexport type ReorderableRow = Record<string, any>;\r\n\r\nexport type ColumnDef<T = ReorderableRow> = {\r\n  key: keyof T;\r\n  label: string;\r\n  width?: string;\r\n  sticky?: boolean;\r\n  render?: (row: T) => React.ReactNode;\r\n};\r\n\r\nexport interface ReorderableTableProps<T extends ReorderableRow> {\r\n  data?: T[];\r\n  columns?: ColumnDef<T>[];\r\n  lsOrderKey?: string;\r\n  lsVisibleKey?: string;\r\n  searchable?: boolean;\r\n  title?: string;\r\n}\r\n\r\n/* ------------------ Default Data ------------------- */\r\nconst defaultRows = [\r\n  { id: 1, name: \"Arjun Mehta\", email: \"arjun.mehta@company.com\", role: \"Manager\", location: \"Bangalore\", status: \"Active\", balance: 1250 },\r\n  { id: 2, name: \"Hannah Park\", email: \"hannah.park@company.com\", role: \"Designer\", location: \"Seoul\", status: \"Active\", balance: 600 },\r\n  { id: 3, name: \"Oliver Scott\", email: \"oliver.scott@company.com\", role: \"Engineer\", location: \"Manchester\", status: \"Inactive\", balance: 650 },\r\n  { id: 4, name: \"Camila Torres\", email: \"camila.torres@company.com\", role: \"HR\", location: \"Bogot√°\", status: \"Active\", balance: 0 },\r\n  { id: 5, name: \"Kenji Tanaka\", email: \"kenji.tanaka@company.com\", role: \"Developer\", location: \"Osaka\", status: \"Suspended\", balance: -1000 },\r\n];\r\n\r\nconst defaultColumns: ColumnDef<typeof defaultRows[0]>[] = [\r\n  { key: \"name\", label: \"Name\", width: \"220px\" },\r\n  { key: \"email\", label: \"Email\", width: \"260px\" },\r\n  { key: \"role\", label: \"Role\", width: \"140px\" },\r\n  { key: \"location\", label: \"Location\", width: \"160px\" },\r\n  {\r\n    key: \"status\",\r\n    label: \"Status\",\r\n    width: \"120px\",\r\n    render: (row) => (\r\n      <span\r\n        className={cn(\r\n          \"inline-block px-2 py-0.5 rounded-md text-sm font-medium\",\r\n          row.status === \"Active\"\r\n            ? \"bg-green-100 text-green-800 dark:bg-green-900/30\"\r\n            : row.status === \"Inactive\"\r\n            ? \"bg-slate-100 text-slate-800 dark:bg-slate-800/30\"\r\n            : \"bg-red-100 text-red-800 dark:bg-red-900/30\"\r\n        )}\r\n      >\r\n        {row.status}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    key: \"balance\",\r\n    label: \"Balance\",\r\n    width: \"120px\",\r\n    render: (row) => `$${row.balance.toLocaleString()}`,\r\n  },\r\n];\r\n\r\n/* ---------------- Component ---------------- */\r\nexport default function ReorderableTable<T extends ReorderableRow>({\r\n  data = defaultRows as unknown as T[],\r\n  columns = defaultColumns as unknown as ColumnDef<T>[],\r\n  lsOrderKey = \"reorderable_table_order_v1\",\r\n  lsVisibleKey = \"reorderable_table_visible_v1\",\r\n  searchable = true,\r\n  title = \"Reorderable Table\",\r\n}: ReorderableTableProps<T>) {\r\n  const columnKeys = columns.map((c) => c.key as string);\r\n\r\n  // state\r\n  const [rows] = useState<T[]>(data);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const [columnOrder, setColumnOrder] = useState<string[]>(\r\n    () => JSON.parse(localStorage.getItem(lsOrderKey) || \"null\") || columnKeys\r\n  );\r\n\r\n  const [visible, setVisible] = useState<Record<string, boolean>>(() => {\r\n    const saved = JSON.parse(localStorage.getItem(lsVisibleKey) || \"null\");\r\n    if (saved) return saved;\r\n    const initial: Record<string, boolean> = {};\r\n    columnKeys.forEach((k) => (initial[k] = true));\r\n    return initial;\r\n  });\r\n\r\n  /* --- persist layout --- */\r\n  useEffect(() => {\r\n    localStorage.setItem(lsOrderKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, lsOrderKey]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(lsVisibleKey, JSON.stringify(visible));\r\n  }, [visible, lsVisibleKey]);\r\n\r\n  /* --- ensure order is in sync with columns --- */\r\n  useEffect(() => {\r\n    setColumnOrder((prev) => {\r\n      const missing = columnKeys.filter((k) => !prev.includes(k));\r\n      return [...prev.filter((k) => columnKeys.includes(k)), ...missing];\r\n    });\r\n  }, [columnKeys]);\r\n\r\n  const orderedColumns = useMemo(\r\n    () =>\r\n      columnOrder\r\n        .map((k) => columns.find((c) => c.key === k))\r\n        .filter(Boolean) as ColumnDef<T>[],\r\n    [columnOrder, columns]\r\n  );\r\n\r\n  /* --- Search --- */\r\n  const filtered = useMemo(() => {\r\n    if (!query) return rows;\r\n    const q = query.toLowerCase();\r\n    return rows.filter((r) =>\r\n      Object.values(r).some((v) => String(v).toLowerCase().includes(q))\r\n    );\r\n  }, [rows, query]);\r\n\r\n  /* --- Drag & Drop --- */\r\n  const dragSrc = React.useRef<number | null>(null);\r\n  const onDragStart = (e: React.DragEvent, i: number) => {\r\n    dragSrc.current = i;\r\n    e.dataTransfer.effectAllowed = \"move\";\r\n  };\r\n  const onDragOver = (e: React.DragEvent) => e.preventDefault();\r\n  const onDrop = (e: React.DragEvent, i: number) => {\r\n    e.preventDefault();\r\n    const src = dragSrc.current;\r\n    if (src === null || src === i) return;\r\n    setColumnOrder((prev) => {\r\n      const next = [...prev];\r\n      const [moved] = next.splice(src, 1);\r\n      next.splice(i, 0, moved);\r\n      return next;\r\n    });\r\n    dragSrc.current = null;\r\n  };\r\n\r\n  const moveColumn = (key: string, dir: -1 | 1) => {\r\n    setColumnOrder((prev) => {\r\n      const idx = prev.indexOf(key);\r\n      const nextIdx = idx + dir;\r\n      if (idx < 0 || nextIdx < 0 || nextIdx >= prev.length) return prev;\r\n      const next = [...prev];\r\n      const [moved] = next.splice(idx, 1);\r\n      next.splice(nextIdx, 0, moved);\r\n      return next;\r\n    });\r\n  };\r\n\r\n  const toggleVisible = (key: string) =>\r\n    setVisible((prev) => ({ ...prev, [key]: !prev[key] }));\r\n\r\n  const resetLayout = () => {\r\n    setColumnOrder(columnKeys);\r\n    const all: Record<string, boolean> = {};\r\n    columnKeys.forEach((k) => (all[k] = true));\r\n    setVisible(all);\r\n    localStorage.removeItem(lsOrderKey);\r\n    localStorage.removeItem(lsVisibleKey);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-6xl mx-auto\">\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h2 className=\"text-xl font-semibold\">{title}</h2>\r\n        {searchable && (\r\n          <div className=\"flex gap-2\">\r\n            <Input\r\n              placeholder=\"Search...\"\r\n              value={query}\r\n              onChange={(e) => setQuery(e.target.value)}\r\n              className=\"w-64\"\r\n            />\r\n            <Button variant=\"outline\" onClick={() => setQuery(\"\")}>\r\n              Clear\r\n            </Button>\r\n          </div>\r\n        )}\r\n        <Popover>\r\n          <PopoverTrigger asChild>\r\n            <Button variant=\"outline\">Columns</Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent className=\"w-48\">\r\n            <div className=\"flex flex-col gap-2\">\r\n              {columns.map((c) => (\r\n                <label key={String(c.key)} className=\"flex items-center gap-2\">\r\n                  <Checkbox\r\n                    checked={!!visible[String(c.key)]}\r\n                    onCheckedChange={() => toggleVisible(String(c.key))}\r\n                  />\r\n                  <span className=\"text-sm\">{c.label}</span>\r\n                </label>\r\n              ))}\r\n              <div className=\"flex justify-between pt-2\">\r\n                <Button variant=\"ghost\" size=\"sm\" onClick={resetLayout}>\r\n                  Reset\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    const visKeys = Object.entries(visible)\r\n                      .filter(([, v]) => v)\r\n                      .map(([k]) => k);\r\n                    setColumnOrder((prev) => [\r\n                      ...visKeys,\r\n                      ...prev.filter((k) => !visKeys.includes(k)),\r\n                    ]);\r\n                  }}\r\n                >\r\n                  Bring visible front\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </PopoverContent>\r\n        </Popover>\r\n      </div>\r\n\r\n      <div className=\"border rounded-md overflow-auto\">\r\n        <Table className=\"min-w-full border-separate border-spacing-0\">\r\n          <TableHeader className=\"sticky top-0 bg-background/90 backdrop-blur-sm z-10\">\r\n            <TableRow>\r\n              {orderedColumns.map((col, idx) =>\r\n                visible[String(col.key)] ? (\r\n                  <TableHead key={String(col.key)} style={{ width: col.width }}>\r\n                    <div\r\n                      draggable\r\n                      onDragStart={(e) => onDragStart(e, idx)}\r\n                      onDragOver={onDragOver}\r\n                      onDrop={(e) => onDrop(e, idx)}\r\n                      className=\"flex items-center justify-between select-none gap-2\"\r\n                    >\r\n                      <span>{col.label}</span>\r\n                      <span className=\"flex gap-1\">\r\n                        <Button\r\n                          size=\"icon\"\r\n                          variant=\"ghost\"\r\n                          onClick={() => moveColumn(String(col.key), -1)}\r\n                        >\r\n                          <ChevronsLeft className=\"h-4 w-4\" />\r\n                        </Button>\r\n                        <Button\r\n                          size=\"icon\"\r\n                          variant=\"ghost\"\r\n                          onClick={() => moveColumn(String(col.key), 1)}\r\n                        >\r\n                          <ChevronsRight className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </span>\r\n                    </div>\r\n                  </TableHead>\r\n                ) : null\r\n              )}\r\n            </TableRow>\r\n          </TableHeader>\r\n\r\n          <TableBody>\r\n            {filtered.map((row, i) => (\r\n              <TableRow key={i} className=\"hover:bg-muted/10\">\r\n                {orderedColumns.map((col) =>\r\n                  visible[String(col.key)] ? (\r\n                    <TableCell key={String(col.key)}>\r\n                      {col.render ? col.render(row) : String(row[col.key])}\r\n                    </TableCell>\r\n                  ) : null\r\n                )}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n\r\n          <TableFooter className=\"sticky bottom-0 bg-background/90\">\r\n            <TableRow>\r\n              <TableCell\r\n                colSpan={\r\n                  orderedColumns.filter((c) => visible[String(c.key)]).length - 1\r\n                }\r\n              >\r\n                Total: {filtered.length} rows\r\n              </TableCell>\r\n              {visible[\"balance\"] ? (\r\n                <TableCell className=\"text-right font-semibold\">\r\n                  $\r\n                  {filtered\r\n                    .reduce((sum, r: any) => sum + (r.balance || 0), 0)\r\n                    .toLocaleString()}\r\n                </TableCell>\r\n              ) : (\r\n                <TableCell className=\"text-right\">‚Äî</TableCell>\r\n              )}\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/reorderable-table.tsx"
    }
  ]
}