{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-chat-input",
  "type": "registry:ui",
  "title": "AI Chat Input",
  "description": "Advanced chat input with slash commands, emoji picker, file upload, and AI features.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/ai-chat-input.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Command,\n  CommandInput,\n  CommandList,\n  CommandItem,\n  CommandGroup,\n} from \"@/components/ui/command\";\nimport {\n  Paperclip,\n  Send,\n  StopCircle,\n  Smile,\n  Trash2,\n  Wand2,\n  Languages,\n  BookOpen,\n} from \"lucide-react\";\n\nconst COMMANDS = [\n  {\n    id: \"summarize\",\n    label: \"Summarize\",\n    icon: <Wand2 className=\"h-3.5 w-3.5\" />,\n  },\n  {\n    id: \"translate\",\n    label: \"Translate\",\n    icon: <Languages className=\"h-3.5 w-3.5\" />,\n  },\n  {\n    id: \"explain\",\n    label: \"Explain\",\n    icon: <BookOpen className=\"h-3.5 w-3.5\" />,\n  },\n];\n\nconst EMOJIS = [\"😀\", \"🚀\", \"🔥\", \"✨\", \"❤️\", \"👍\", \"🤔\", \"🎉\"];\n\nexport default function AiChatInput({\n  onSendMessage,\n  onUploadFile,\n  isLoading = false,\n}: {\n  onSendMessage: (message: string) => void;\n  onUploadFile?: (file: File) => void;\n  isLoading?: boolean;\n}) {\n  const [input, setInput] = useState(\"\");\n  const [selectedCommands, setSelectedCommands] = useState<string[]>([]);\n  const [emojiOpen, setEmojiOpen] = useState(false);\n  const [commandOpen, setCommandOpen] = useState(false);\n\n  const handleSubmit = () => {\n    if (!input.trim() && selectedCommands.length === 0) return;\n    const finalMessage = (\n      selectedCommands.map((cmd) => `/${cmd}`).join(\" \") +\n      \" \" +\n      input\n    ).trim();\n    onSendMessage(finalMessage);\n    setInput(\"\");\n    setSelectedCommands([]);\n    setCommandOpen(false);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n    if (e.key === \"/\" && !commandOpen) {\n      e.preventDefault();\n      setCommandOpen(true);\n    }\n  };\n\n  const addCommand = (cmd: string) => {\n    if (!selectedCommands.includes(cmd)) {\n      setSelectedCommands((prev) => [...prev, cmd]);\n    }\n    setCommandOpen(false);\n  };\n\n  const removeCommand = (cmd: string) => {\n    setSelectedCommands((prev) => prev.filter((c) => c !== cmd));\n  };\n\n  const addEmoji = (emoji: string) => {\n    setInput((prev) => prev + emoji);\n    setEmojiOpen(false);\n  };\n\n  return (\n    <div className=\"w-2xl bg-background\">\n      <div className=\"flex items-center justify-center gap-2 p-3\">\n        {/* File Upload */}\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => document.getElementById(\"file-input\")?.click()}\n        >\n          <Paperclip className=\"h-5 w-5\" />\n        </Button>\n        <input\n          id=\"file-input\"\n          type=\"file\"\n          className=\"hidden\"\n          onChange={(e) => {\n            if (e.target.files?.[0] && onUploadFile) {\n              onUploadFile(e.target.files[0]);\n            }\n          }}\n        />\n\n        {/* Input & Commands */}\n        <div className=\"flex flex-col flex-1 gap-2\">\n          {/* Selected Commands as tags */}\n          <div className=\"flex flex-wrap gap-1\">\n            {selectedCommands.map((cmd) => {\n              const c = COMMANDS.find((c) => c.id === cmd);\n              return (\n                <Badge\n                  key={cmd}\n                  variant=\"secondary\"\n                  className=\"flex items-center gap-1 cursor-pointer\"\n                  onClick={() => removeCommand(cmd)}\n                >\n                  {c?.icon} {c?.label}\n                </Badge>\n              );\n            })}\n          </div>\n\n          {/* Text Input with Slash Command Popover */}\n          <Popover open={commandOpen} onOpenChange={setCommandOpen}>\n            <PopoverTrigger asChild>\n              <Textarea\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onKeyDown={handleKeyDown}\n                placeholder=\"Type a message... (press '/' for commands)\"\n                className=\"resize-none min-h-[44px] max-h-[200px] rounded-xl px-3 py-2 text-sm\"\n              />\n            </PopoverTrigger>\n            <PopoverContent className=\"p-0 w-56\">\n              <Command>\n                <CommandInput placeholder=\"Search command...\" />\n                <CommandList>\n                  <CommandGroup heading=\"Commands\">\n                    {COMMANDS.map((cmd) => (\n                      <CommandItem\n                        key={cmd.id}\n                        onSelect={() => addCommand(cmd.id)}\n                      >\n                        {cmd.icon} {cmd.label}\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        </div>\n\n        {/* Extra Actions */}\n        <div className=\"flex items-center gap-1\">\n          {/* Emoji Picker */}\n          <Popover open={emojiOpen} onOpenChange={setEmojiOpen}>\n            <PopoverTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\">\n                <Smile className=\"h-5 w-5\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"grid grid-cols-4 gap-2 w-40 p-2\">\n              {EMOJIS.map((emoji) => (\n                <button\n                  key={emoji}\n                  onClick={() => addEmoji(emoji)}\n                  className=\"text-lg hover:scale-110 transition\"\n                >\n                  {emoji}\n                </button>\n              ))}\n            </PopoverContent>\n          </Popover>\n\n          {/* Clear Input */}\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => setInput(\"\")}>\n            <Trash2 className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {/* Send / Stop */}\n        <Button\n          onClick={handleSubmit}\n          disabled={\n            !input.trim() && selectedCommands.length === 0 && !isLoading\n          }\n          variant=\"outline\"\n          className=\"rounded-full\"\n        >\n          {isLoading ? (\n            <StopCircle className=\"h-5 w-5\" />\n          ) : (\n            <Send className=\"h-4 w-4\" />\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/ai-chat-input.tsx"
    }
  ]
}