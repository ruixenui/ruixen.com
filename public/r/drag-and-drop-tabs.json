{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drag-and-drop-tabs",
  "type": "registry:ui",
  "title": "Drag And Drop Tabs",
  "description": "Interactive tabs component with drag-and-drop reordering functionality.",
  "dependencies": [
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities"
  ],
  "files": [
    {
      "path": "registry/ruixenui/drag-and-drop-tabs.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  DndContext,\n  closestCenter,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from \"@dnd-kit/core\";\nimport {\n  arrayMove,\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n  horizontalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\n\nexport interface DragTabItem {\n  value: string;\n  label: string;\n  content?: React.ReactNode;\n}\n\ninterface DragAndDropTabsProps {\n  items?: DragTabItem[];\n  defaultValue?: string;\n  className?: string;\n}\n\nexport default function DragAndDropTabs({\n  items: defaultItems = [\n    { value: \"tab1\", label: \"Tab 1\", content: \"Content 1\" },\n    { value: \"tab2\", label: \"Tab 2\", content: \"Content 2\" },\n    { value: \"tab3\", label: \"Tab 3\", content: \"Content 3\" },\n    { value: \"tab4\", label: \"Tab 4\", content: \"Content 4\" },\n  ],\n  defaultValue,\n  className,\n}: DragAndDropTabsProps) {\n  const [items, setItems] = React.useState(defaultItems);\n  const [active, setActive] = React.useState(\n    defaultValue || defaultItems[0].value,\n  );\n\n  const sensors = useSensors(useSensor(PointerSensor));\n\n  function SortableTab({\n    id,\n    label,\n    active,\n  }: {\n    id: string;\n    label: string;\n    active: boolean;\n  }) {\n    const {\n      attributes,\n      listeners,\n      setNodeRef,\n      transform,\n      transition,\n      isDragging,\n    } = useSortable({ id });\n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n      zIndex: isDragging ? 10 : \"auto\",\n    };\n\n    return (\n      <TabsTrigger\n        ref={setNodeRef}\n        value={id}\n        {...attributes}\n        {...listeners}\n        className={cn(\n          \"px-4 py-2 rounded-md text-sm font-medium flex items-center border justify-center cursor-pointer select-none transition-colors\",\n          active\n            ? \"bg-primary text-white shadow-md dark:bg-primary/80 dark:text-black\"\n            : \"bg-background/50 text-foreground/20 dark:bg-background/30 dark:text-foreground/50 \",\n          isDragging && \"opacity-70 ring-2 ring-primary\",\n        )}\n        style={style}\n      >\n        {label}\n      </TabsTrigger>\n    );\n  }\n\n  const handleDragEnd = (event: any) => {\n    const { active: dragged, over } = event;\n    if (dragged.id !== over?.id) {\n      const oldIndex = items.findIndex((i) => i.value === dragged.id);\n      const newIndex = items.findIndex((i) => i.value === over.id);\n      setItems(arrayMove(items, oldIndex, newIndex));\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex flex-col items-center justify-center min-h-[70vh] w-full\",\n        className,\n      )}\n    >\n      <Tabs\n        value={active}\n        onValueChange={setActive}\n        className=\"w-full max-w-lg\"\n      >\n        <DndContext\n          sensors={sensors}\n          collisionDetection={closestCenter}\n          onDragEnd={handleDragEnd}\n        >\n          <SortableContext\n            items={items.map((i) => i.value)}\n            strategy={horizontalListSortingStrategy}\n          >\n            <TabsList className=\"flex gap-2 bg-background/30 p-2 rounded-xl\">\n              {items.map((item) => (\n                <SortableTab\n                  key={item.value}\n                  id={item.value}\n                  label={item.label}\n                  active={active === item.value}\n                />\n              ))}\n            </TabsList>\n          </SortableContext>\n        </DndContext>\n\n        <div className=\"mt-4 w-full max-w-lg\">\n          {items.map((item) => (\n            <TabsContent key={item.value} value={item.value}>\n              <div className=\"p-4 bg-card\">{item.content}</div>\n            </TabsContent>\n          ))}\n        </div>\n      </Tabs>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/drag-and-drop-tabs.tsx"
    }
  ]
}