{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "range-slider-input",
  "type": "registry:ui",
  "title": "Range Slider Input",
  "description": "A dual-range slider with numeric inputs and increment/decrement controls.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/range-slider-input.tsx",
      "content": "\"use client\";\n\nimport { useId, useState, useEffect } from \"react\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronUp, ChevronDown } from \"lucide-react\";\n\ninterface RangeSliderInputProps {\n  label?: string;\n  min?: number;\n  max?: number;\n  step?: number;\n  unit?: string;\n  value?: { from: number; to: number };\n  onChange?: (val: { from: number; to: number }) => void;\n}\n\nexport default function RangeSliderInput({\n  label = \"Select Range\",\n  min = 0,\n  max = 100,\n  step = 1,\n  unit,\n  value,\n  onChange,\n}: RangeSliderInputProps) {\n  const id = useId();\n  const [range, setRange] = useState<{ from: number; to: number }>({\n    from: value?.from ?? min,\n    to: value?.to ?? max,\n  });\n\n  useEffect(() => {\n    if (value) setRange(value);\n  }, [value]);\n\n  const handleFromChange = (val: number) => {\n    const newFrom = Math.min(val, range.to);\n    setRange({ ...range, from: newFrom });\n    onChange?.({ ...range, from: newFrom });\n  };\n\n  const handleToChange = (val: number) => {\n    const newTo = Math.max(val, range.from);\n    setRange({ ...range, to: newTo });\n    onChange?.({ ...range, to: newTo });\n  };\n\n  const increment = (key: \"from\" | \"to\") => {\n    if (key === \"from\") handleFromChange(Math.min(range.from + step, range.to));\n    else handleToChange(Math.min(range.to + step, max));\n  };\n\n  const decrement = (key: \"from\" | \"to\") => {\n    if (key === \"from\") handleFromChange(Math.max(range.from - step, min));\n    else handleToChange(Math.max(range.to - step, range.from));\n  };\n\n  const inputClass =\n    \"flex-1 pr-10 rounded relative [-moz-appearance:_textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-inner-spin-button]:m-0 [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-outer-spin-button]:m-0\";\n\n  return (\n    <div className=\"w-md mx-auto space-y-3\">\n      <Label htmlFor={id}>{label}</Label>\n\n      {/* Slider */}\n      <div className=\"relative h-6 flex items-center\">\n        <input\n          type=\"range\"\n          min={min}\n          max={max}\n          step={step}\n          value={range.from}\n          onChange={(e) => handleFromChange(Number(e.target.value))}\n          className={cn(\n            \"absolute w-full h-[2px] bg-gray-300 rounded-lg appearance-none z-20 pointer-events-auto accent-primary\",\n          )}\n        />\n        <input\n          type=\"range\"\n          min={min}\n          max={max}\n          step={step}\n          value={range.to}\n          onChange={(e) => handleToChange(Number(e.target.value))}\n          className={cn(\n            \"absolute w-full h-1 bg-gray-300 rounded-lg appearance-none z-20 pointer-events-auto accent-secondary\",\n          )}\n        />\n        <div\n          className=\"absolute h-1 bg-primary rounded-lg\"\n          style={{\n            left: `${((range.from - min) / (max - min)) * 100}%`,\n            width: `${((range.to - range.from) / (max - min)) * 100}%`,\n          }}\n        />\n      </div>\n\n      {/* Inputs with Lucide Icons */}\n      <div className=\"flex relative\">\n        <div className=\"relative flex-1\">\n          <Input\n            id={`${id}-from`}\n            type=\"number\"\n            min={min}\n            max={range.to}\n            step={step}\n            value={range.from}\n            onChange={(e) => handleFromChange(Number(e.target.value))}\n            className={inputClass + \" rounded-e-none rounded-lg rounded-r-none\"}\n            placeholder=\"From\"\n          />\n          <div className=\"absolute top-1/2 end-2 -translate-y-1/2 flex flex-col\">\n            <button\n              type=\"button\"\n              className=\"p-1 hover:bg-gray-100 rounded\"\n              onClick={() => increment(\"from\")}\n            >\n              <ChevronUp size={14} />\n            </button>\n            <button\n              type=\"button\"\n              className=\"p-1 hover:bg-gray-100 rounded\"\n              onClick={() => decrement(\"from\")}\n            >\n              <ChevronDown size={14} />\n            </button>\n          </div>\n        </div>\n\n        <div className=\"relative flex-1\">\n          <Input\n            id={`${id}-to`}\n            type=\"number\"\n            min={range.from}\n            max={max}\n            step={step}\n            value={range.to}\n            onChange={(e) => handleToChange(Number(e.target.value))}\n            className={inputClass + \" rounded-s-none rounded-lg rounded-l-none\"}\n            placeholder=\"To\"\n          />\n          <div className=\"absolute top-1/2 end-2 -translate-y-1/2 flex flex-col\">\n            <button\n              type=\"button\"\n              className=\"p-1 hover:bg-gray-100 rounded\"\n              onClick={() => increment(\"to\")}\n            >\n              <ChevronUp size={14} />\n            </button>\n            <button\n              type=\"button\"\n              className=\"p-1 hover:bg-gray-100 rounded\"\n              onClick={() => decrement(\"to\")}\n            >\n              <ChevronDown size={14} />\n            </button>\n          </div>\n        </div>\n\n        {unit && (\n          <span className=\"flex items-center px-2 text-muted-foreground\">\n            {unit}\n          </span>\n        )}\n      </div>\n\n      {/* Validation */}\n      {range.from > range.to && (\n        <p className=\"text-xs text-red-500 mt-1\">“From” should be ≤ “To”</p>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/range-slider-input.tsx"
    }
  ]
}