{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wheel-pagination",
  "type": "registry:ui",
  "title": "Wheel Pagination",
  "description": "Interactive pagination component with mouse wheel support and animated page numbers.",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/wheel-pagination.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\n\ninterface WheelPaginationProps {\n  totalPages?: number;\n  className?: string;\n  visibleCount?: number; // Number of pages visible at once\n  onChange?: (page: number) => void;\n}\n\nexport default function WheelPagination({\n  totalPages = 50,\n  visibleCount = 5,\n  className,\n  onChange,\n}: WheelPaginationProps) {\n  const [active, setActive] = useState(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (onChange) onChange(active);\n  }, [active, onChange]);\n\n  const prevPage = () => setActive((p) => Math.max(p - 1, 0));\n  const nextPage = () => setActive((p) => Math.min(p + 1, totalPages - 1));\n\n  const handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    if (e.deltaY < 0) setActive((p) => Math.max(p - 1, 0));\n    else if (e.deltaY > 0) setActive((p) => Math.min(p + 1, totalPages - 1));\n  };\n\n  useEffect(() => {\n    const el = containerRef.current;\n    if (!el) return;\n    el.addEventListener(\"wheel\", handleWheel, { passive: false });\n    return () => el.removeEventListener(\"wheel\", handleWheel);\n  }, []);\n\n  // Determine visible pages based on active\n  const getVisiblePages = () => {\n    const pages = [];\n    const half = Math.floor(visibleCount / 2);\n    let start = active - half;\n    let end = active + half;\n\n    if (start < 0) {\n      end += -start;\n      start = 0;\n    }\n    if (end > totalPages - 1) {\n      start -= end - (totalPages - 1);\n      end = totalPages - 1;\n      if (start < 0) start = 0;\n    }\n\n    for (let i = start; i <= end; i++) pages.push(i);\n    return pages;\n  };\n\n  const visiblePages = getVisiblePages();\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"flex items-center gap-2 p-4 select-none cursor-pointer\",\n        className,\n      )}\n    >\n      {/* Previous arrow */}\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={prevPage}\n        disabled={active === 0}\n        className=\"text-gray-400 hover:text-primary disabled:opacity-40 transition-colors\"\n      >\n        <ChevronLeft className=\"w-5 h-5\" />\n      </Button>\n\n      {/* Page numbers carousel */}\n      <div className=\"flex gap-2\">\n        {visiblePages.map((p) => (\n          <motion.div\n            key={p}\n            layout\n            animate={{ scale: active === p ? 1.3 : 1 }}\n            transition={{ type: \"spring\", stiffness: 300, damping: 25 }}\n            className={cn(\n              \"w-10 h-10 flex items-center justify-center rounded-full font-medium min-h-[40px]\",\n              active === p\n                ? \"bg-primary text-white border border-primary\"\n                : \"bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200\",\n            )}\n            onClick={() => setActive(p)}\n          >\n            {p + 1}\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Next arrow */}\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={nextPage}\n        disabled={active === totalPages - 1}\n        className=\"text-gray-400 hover:text-primary disabled:opacity-40 transition-colors\"\n      >\n        <ChevronRight className=\"w-5 h-5\" />\n      </Button>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/wheel-pagination.tsx"
    }
  ]
}