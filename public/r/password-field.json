{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password-field",
  "type": "registry:ui",
  "title": "Password Field",
  "description": "An advanced password input with strength meter, validation checklist, and password generation.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/password-field.tsx",
      "content": "\"use client\";\n\nimport { useId, useState } from \"react\";\nimport {\n  EyeIcon,\n  EyeOffIcon,\n  CheckCircle2,\n  XCircle,\n  Copy,\n  RefreshCw,\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function PasswordField({\n  label = \"Password\",\n  placeholder = \"Enter your password\",\n  className,\n  showChecklist = true,\n  allowGenerate = true,\n}: {\n  label?: string;\n  placeholder?: string;\n  className?: string;\n  showChecklist?: boolean;\n  allowGenerate?: boolean;\n}) {\n  const id = useId();\n  const [isVisible, setIsVisible] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [copied, setCopied] = useState(false);\n\n  const toggleVisibility = () => setIsVisible((prev) => !prev);\n\n  // password checks\n  const checks = [\n    { label: \"At least 8 characters\", valid: value.length >= 8 },\n    { label: \"One uppercase letter\", valid: /[A-Z]/.test(value) },\n    { label: \"One number\", valid: /\\d/.test(value) },\n    { label: \"One special character\", valid: /[!@#$%^&*]/.test(value) },\n  ];\n\n  // strength calculation\n  const passed = checks.filter((c) => c.valid).length;\n  const strength =\n    passed === 0\n      ? \"Very Weak\"\n      : passed === 1\n        ? \"Weak\"\n        : passed === 2\n          ? \"Medium\"\n          : passed === 3\n            ? \"Strong\"\n            : \"Very Strong\";\n\n  const strengthColor =\n    passed <= 1\n      ? \"bg-red-500\"\n      : passed === 2\n        ? \"bg-yellow-500\"\n        : passed === 3\n          ? \"bg-blue-500\"\n          : \"bg-green-600\";\n\n  // generate random password\n  const generatePassword = () => {\n    const charset =\n      \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+\";\n    let password = \"\";\n    for (let i = 0; i < 12; i++) {\n      const randomIndex = Math.floor(Math.random() * charset.length);\n      password += charset[randomIndex];\n    }\n    setValue(password);\n  };\n\n  // copy to clipboard\n  const copyToClipboard = async () => {\n    if (!value) return;\n    await navigator.clipboard.writeText(value);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 1500);\n  };\n\n  return (\n    <div className={cn(\"space-y-2 w-full max-w-md\", className)}>\n      <Label htmlFor={id}>{label}</Label>\n\n      <div className=\"relative flex items-center\">\n        <Input\n          id={id}\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder={placeholder}\n          type={isVisible ? \"text\" : \"password\"}\n          className=\"pr-20\"\n        />\n\n        {/* Toggle visibility */}\n        <button\n          type=\"button\"\n          onClick={toggleVisibility}\n          aria-label={isVisible ? \"Hide password\" : \"Show password\"}\n          className=\"absolute inset-y-0 right-10 flex items-center pr-2 text-muted-foreground/70 hover:text-foreground focus:outline-none\"\n        >\n          {isVisible ? <EyeOffIcon size={18} /> : <EyeIcon size={18} />}\n        </button>\n\n        {/* Copy button */}\n        <button\n          type=\"button\"\n          onClick={copyToClipboard}\n          disabled={!value}\n          className=\"absolute inset-y-0 right-0 flex items-center pr-2 text-muted-foreground/70 hover:text-foreground focus:outline-none disabled:opacity-40\"\n        >\n          <Copy size={16} />\n        </button>\n      </div>\n\n      {/* Generate Button */}\n      {allowGenerate && (\n        <Button\n          type=\"button\"\n          size=\"sm\"\n          variant=\"outline\"\n          className=\"gap-2\"\n          onClick={generatePassword}\n        >\n          <RefreshCw size={14} /> Generate Strong Password\n        </Button>\n      )}\n\n      {/* Strength meter */}\n      {value && (\n        <div className=\"space-y-1\">\n          <div className=\"h-2 w-full bg-muted rounded-full overflow-hidden\">\n            <div\n              className={`h-full transition-all duration-300 ${strengthColor}`}\n              style={{ width: `${(passed / checks.length) * 100}%` }}\n            />\n          </div>\n          <p className=\"text-sm text-muted-foreground flex items-center gap-2\">\n            Strength: {strength}\n            {copied && <span className=\"text-green-600\">âœ“ Copied!</span>}\n          </p>\n        </div>\n      )}\n\n      {/* Checklist */}\n      {showChecklist && (\n        <ul className=\"text-sm space-y-1\">\n          {checks.map((check, i) => (\n            <li\n              key={i}\n              className={cn(\n                \"flex items-center gap-2\",\n                check.valid ? \"text-green-600\" : \"text-muted-foreground\",\n              )}\n            >\n              {check.valid ? <CheckCircle2 size={16} /> : <XCircle size={16} />}\n              {check.label}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/password-field.tsx"
    }
  ]
}