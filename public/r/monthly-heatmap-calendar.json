{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "monthly-heatmap-calendar",
  "type": "registry:ui",
  "title": "Monthly Heatmap Calendar",
  "description": "A monthly calendar with event heatmap visualization.",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button",
    "popover",
    "input",
    "select",
    "badge"
  ],
  "files": [
    {
      "path": "registry/ruixenui/monthly-heatmap-calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  endOfWeek,\n  addDays,\n  format,\n  isSameMonth,\n} from \"date-fns\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash2 } from \"lucide-react\";\n\ntype Event = { time: string; title: string };\n\ntype MonthlyHeatmapCalendarProps = {\n  initialMonth?: Date;\n  initialEvents?: { [key: string]: Event[] };\n  startYear?: number;\n  endYear?: number;\n  onEventAdd?: (dateKey: string, event: Event) => void;\n  onEventDelete?: (dateKey: string, eventIndex: number) => void;\n};\n\nexport default function MonthlyHeatmapCalendar({\n  initialMonth = new Date(),\n  initialEvents = {},\n  startYear = 2015,\n  endYear = new Date().getFullYear() + 5,\n  onEventAdd,\n  onEventDelete,\n}: MonthlyHeatmapCalendarProps) {\n  const [currentMonth, setCurrentMonth] = React.useState(initialMonth);\n  const [events, setEvents] = React.useState<{ [key: string]: Event[] }>(\n    initialEvents,\n  );\n  const [eventTitle, setEventTitle] = React.useState(\"\");\n  const [eventHour, setEventHour] = React.useState(\"12\");\n  const [eventMinute, setEventMinute] = React.useState(\"00\");\n  const [ampm, setAmpm] = React.useState(\"AM\");\n\n  const monthStart = startOfMonth(currentMonth);\n  const monthEnd = endOfMonth(currentMonth);\n  const startDate = startOfWeek(monthStart, { weekStartsOn: 1 });\n  const endDate = endOfWeek(monthEnd, { weekStartsOn: 1 });\n\n  const rows = [];\n  let days: JSX.Element[] = [];\n  let day = startDate;\n\n  while (day <= endDate) {\n    for (let i = 0; i < 7; i++) {\n      const cloneDay = day;\n      const key = format(cloneDay, \"yyyy-MM-dd\");\n      const hasEvents = events[key]?.length > 0;\n\n      days.push(\n        <div\n          key={cloneDay.toString()}\n          className={`border h-10 mb-2 flex items-start justify-center cursor-pointer relative rounded-md ${\n            !isSameMonth(cloneDay, monthStart)\n              ? \"bg-muted/20 text-muted-foreground\"\n              : \"bg-background\"\n          }`}\n        >\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full h-full flex items-start justify-center text-sm p-2\"\n              >\n                {format(cloneDay, \"d\")}\n                {hasEvents && (\n                  <Badge\n                    variant=\"default\"\n                    className=\"absolute top-1 right-1 h-2 w-2 rounded-full p-0\"\n                  />\n                )}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-64 space-y-3\">\n              <h4 className=\"font-medium\">{format(cloneDay, \"PPP\")}</h4>\n              <Input\n                placeholder=\"Event title\"\n                value={eventTitle}\n                onChange={(e) => setEventTitle(e.target.value)}\n              />\n              <div className=\"flex gap-2 items-center\">\n                <Select value={eventHour} onValueChange={setEventHour}>\n                  <SelectTrigger className=\"w-[70px]\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Array.from({ length: 12 }, (_, i) => {\n                      const h = (i + 1).toString().padStart(2, \"0\");\n                      return (\n                        <SelectItem key={h} value={h}>\n                          {h}\n                        </SelectItem>\n                      );\n                    })}\n                  </SelectContent>\n                </Select>\n                <span>:</span>\n                <Select value={eventMinute} onValueChange={setEventMinute}>\n                  <SelectTrigger className=\"w-[70px]\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {[\"00\", \"15\", \"30\", \"45\"].map((m) => (\n                      <SelectItem key={m} value={m}>\n                        {m}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Select value={ampm} onValueChange={setAmpm}>\n                  <SelectTrigger className=\"w-[70px]\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"AM\">AM</SelectItem>\n                    <SelectItem value=\"PM\">PM</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button\n                className=\"w-full\"\n                onClick={() => {\n                  if (!eventTitle) return;\n                  const time = `${eventHour}:${eventMinute} ${ampm}`;\n                  const newEvent = { time, title: eventTitle };\n                  setEvents((prev) => {\n                    const updated = {\n                      ...prev,\n                      [key]: [...(prev[key] || []), newEvent],\n                    };\n                    onEventAdd?.(key, newEvent);\n                    return updated;\n                  });\n                  setEventTitle(\"\");\n                }}\n              >\n                Save Event\n              </Button>\n\n              <div className=\"space-y-2\">\n                {events[key]?.map((event, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between rounded-md border p-2 text-sm\"\n                  >\n                    <span>\n                      {event.time} - {event.title}\n                    </span>\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      onClick={() => {\n                        setEvents((prev) => {\n                          const updated = [...(prev[key] || [])];\n                          updated.splice(index, 1);\n                          onEventDelete?.(key, index);\n                          return { ...prev, [key]: updated };\n                        });\n                      }}\n                    >\n                      <Trash2 className=\"h-4 w-4 text-red-500\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </PopoverContent>\n          </Popover>\n        </div>,\n      );\n      day = addDays(day, 1);\n    }\n    rows.push(\n      <div className=\"grid grid-cols-7 gap-2\" key={day.toString()}>\n        {days}\n      </div>,\n    );\n    days = [];\n  }\n\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const years = Array.from(\n    { length: endYear - startYear + 1 },\n    (_, i) => startYear + i,\n  );\n\n  return (\n    <Card className=\"p-2\">\n      <CardContent className=\"p-2\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <Select\n            value={currentMonth.getMonth().toString()}\n            onValueChange={(val) => {\n              const newDate = new Date(currentMonth);\n              newDate.setMonth(parseInt(val));\n              setCurrentMonth(newDate);\n            }}\n          >\n            <SelectTrigger className=\"w-[150px]\">\n              <SelectValue>{months[currentMonth.getMonth()]}</SelectValue>\n            </SelectTrigger>\n            <SelectContent>\n              {months.map((m, i) => (\n                <SelectItem key={m} value={i.toString()}>\n                  {m}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Select\n            value={currentMonth.getFullYear().toString()}\n            onValueChange={(val) => {\n              const newDate = new Date(currentMonth);\n              newDate.setFullYear(parseInt(val));\n              setCurrentMonth(newDate);\n            }}\n          >\n            <SelectTrigger className=\"w-[100px]\">\n              <SelectValue>{currentMonth.getFullYear()}</SelectValue>\n            </SelectTrigger>\n            <SelectContent>\n              {years.map((y) => (\n                <SelectItem key={y} value={y.toString()}>\n                  {y}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"grid grid-cols-7 gap-2 text-center font-medium mb-2\">\n          {[\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"].map((d) => (\n            <div key={d}>{d}</div>\n          ))}\n        </div>\n\n        {rows}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/monthly-heatmap-calendar.tsx"
    }
  ]
}