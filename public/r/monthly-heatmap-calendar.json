{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "monthly-heatmap-calendar",
  "type": "registry:ui",
  "title": "Monthly Heatmap Calendar",
  "description": "A monthly calendar with event heatmap visualization.",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button",
    "popover",
    "input",
    "select",
    "badge"
  ],
  "files": [
    {
      "path": "registry/ruixenui/monthly-heatmap-calendar.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport {\r\n  startOfMonth,\r\n  endOfMonth,\r\n  startOfWeek,\r\n  endOfWeek,\r\n  addDays,\r\n  format,\r\n  isSameMonth,\r\n} from \"date-fns\"\r\nimport { Card, CardContent } from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"@/components/ui/select\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Trash2 } from \"lucide-react\"\r\n\r\ntype Event = { time: string; title: string }\r\n\r\ntype MonthlyHeatmapCalendarProps = {\r\n  initialMonth?: Date\r\n  initialEvents?: { [key: string]: Event[] }\r\n  startYear?: number\r\n  endYear?: number\r\n  onEventAdd?: (dateKey: string, event: Event) => void\r\n  onEventDelete?: (dateKey: string, eventIndex: number) => void\r\n}\r\n\r\nexport default function MonthlyHeatmapCalendar({\r\n  initialMonth = new Date(),\r\n  initialEvents = {},\r\n  startYear = 2015,\r\n  endYear = new Date().getFullYear() + 5,\r\n  onEventAdd,\r\n  onEventDelete,\r\n}: MonthlyHeatmapCalendarProps) {\r\n  const [currentMonth, setCurrentMonth] = React.useState(initialMonth)\r\n  const [events, setEvents] = React.useState<{ [key: string]: Event[] }>(initialEvents)\r\n  const [eventTitle, setEventTitle] = React.useState(\"\")\r\n  const [eventHour, setEventHour] = React.useState(\"12\")\r\n  const [eventMinute, setEventMinute] = React.useState(\"00\")\r\n  const [ampm, setAmpm] = React.useState(\"AM\")\r\n\r\n  const monthStart = startOfMonth(currentMonth)\r\n  const monthEnd = endOfMonth(currentMonth)\r\n  const startDate = startOfWeek(monthStart, { weekStartsOn: 1 })\r\n  const endDate = endOfWeek(monthEnd, { weekStartsOn: 1 })\r\n\r\n  const rows = []\r\n  let days: JSX.Element[] = []\r\n  let day = startDate\r\n\r\n  while (day <= endDate) {\r\n    for (let i = 0; i < 7; i++) {\r\n      const cloneDay = day\r\n      const key = format(cloneDay, \"yyyy-MM-dd\")\r\n      const hasEvents = events[key]?.length > 0\r\n\r\n      days.push(\r\n        <div\r\n          key={cloneDay.toString()}\r\n          className={`border h-10 mb-2 flex items-start justify-center cursor-pointer relative rounded-md ${\r\n            !isSameMonth(cloneDay, monthStart) ? \"bg-muted/20 text-muted-foreground\" : \"bg-background\"\r\n          }`}\r\n        >\r\n          <Popover>\r\n            <PopoverTrigger asChild>\r\n              <Button\r\n                variant=\"ghost\"\r\n                className=\"w-full h-full flex items-start justify-center text-sm p-2\"\r\n              >\r\n                {format(cloneDay, \"d\")}\r\n                {hasEvents && (\r\n                  <Badge\r\n                    variant=\"default\"\r\n                    className=\"absolute top-1 right-1 h-2 w-2 rounded-full p-0\"\r\n                  />\r\n                )}\r\n              </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent className=\"w-64 space-y-3\">\r\n              <h4 className=\"font-medium\">{format(cloneDay, \"PPP\")}</h4>\r\n              <Input\r\n                placeholder=\"Event title\"\r\n                value={eventTitle}\r\n                onChange={(e) => setEventTitle(e.target.value)}\r\n              />\r\n              <div className=\"flex gap-2 items-center\">\r\n                <Select value={eventHour} onValueChange={setEventHour}>\r\n                  <SelectTrigger className=\"w-[70px]\">\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {Array.from({ length: 12 }, (_, i) => {\r\n                      const h = (i + 1).toString().padStart(2, \"0\")\r\n                      return <SelectItem key={h} value={h}>{h}</SelectItem>\r\n                    })}\r\n                  </SelectContent>\r\n                </Select>\r\n                <span>:</span>\r\n                <Select value={eventMinute} onValueChange={setEventMinute}>\r\n                  <SelectTrigger className=\"w-[70px]\">\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {[\"00\", \"15\", \"30\", \"45\"].map(m => (\r\n                      <SelectItem key={m} value={m}>{m}</SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                <Select value={ampm} onValueChange={setAmpm}>\r\n                  <SelectTrigger className=\"w-[70px]\">\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"AM\">AM</SelectItem>\r\n                    <SelectItem value=\"PM\">PM</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <Button\r\n                className=\"w-full\"\r\n                onClick={() => {\r\n                  if (!eventTitle) return\r\n                  const time = `${eventHour}:${eventMinute} ${ampm}`\r\n                  const newEvent = { time, title: eventTitle }\r\n                  setEvents(prev => {\r\n                    const updated = { ...prev, [key]: [...(prev[key] || []), newEvent] }\r\n                    onEventAdd?.(key, newEvent)\r\n                    return updated\r\n                  })\r\n                  setEventTitle(\"\")\r\n                }}\r\n              >\r\n                Save Event\r\n              </Button>\r\n\r\n              <div className=\"space-y-2\">\r\n                {events[key]?.map((event, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className=\"flex items-center justify-between rounded-md border p-2 text-sm\"\r\n                  >\r\n                    <span>{event.time} - {event.title}</span>\r\n                    <Button\r\n                      size=\"icon\"\r\n                      variant=\"ghost\"\r\n                      onClick={() => {\r\n                        setEvents(prev => {\r\n                          const updated = [...(prev[key] || [])]\r\n                          updated.splice(index, 1)\r\n                          onEventDelete?.(key, index)\r\n                          return { ...prev, [key]: updated }\r\n                        })\r\n                      }}\r\n                    >\r\n                      <Trash2 className=\"h-4 w-4 text-red-500\" />\r\n                    </Button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </PopoverContent>\r\n          </Popover>\r\n        </div>\r\n      )\r\n      day = addDays(day, 1)\r\n    }\r\n    rows.push(\r\n      <div className=\"grid grid-cols-7 gap-2\" key={day.toString()}>\r\n        {days}\r\n      </div>\r\n    )\r\n    days = []\r\n  }\r\n\r\n  const months = [\r\n    \"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\r\n    \"July\",\"August\",\"September\",\"October\",\"November\",\"December\"\r\n  ]\r\n  const years = Array.from({ length: endYear - startYear + 1 }, (_, i) => startYear + i)\r\n\r\n  return (\r\n    <Card className=\"p-2\">\r\n      <CardContent className=\"p-2\">\r\n        <div className=\"flex justify-between items-center mb-2\">\r\n          <Select\r\n            value={currentMonth.getMonth().toString()}\r\n            onValueChange={val => {\r\n              const newDate = new Date(currentMonth)\r\n              newDate.setMonth(parseInt(val))\r\n              setCurrentMonth(newDate)\r\n            }}\r\n          >\r\n            <SelectTrigger className=\"w-[150px]\">\r\n              <SelectValue>{months[currentMonth.getMonth()]}</SelectValue>\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {months.map((m,i) => <SelectItem key={m} value={i.toString()}>{m}</SelectItem>)}\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          <Select\r\n            value={currentMonth.getFullYear().toString()}\r\n            onValueChange={val => {\r\n              const newDate = new Date(currentMonth)\r\n              newDate.setFullYear(parseInt(val))\r\n              setCurrentMonth(newDate)\r\n            }}\r\n          >\r\n            <SelectTrigger className=\"w-[100px]\">\r\n              <SelectValue>{currentMonth.getFullYear()}</SelectValue>\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {years.map(y => <SelectItem key={y} value={y.toString()}>{y}</SelectItem>)}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-7 gap-2 text-center font-medium mb-2\">\r\n          {[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"].map(d => <div key={d}>{d}</div>)}\r\n        </div>\r\n\r\n        {rows}\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/monthly-heatmap-calendar.tsx"
    }
  ]
}