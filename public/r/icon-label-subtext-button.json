{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icon-label-subtext-button",
  "type": "registry:ui",
  "title": "Icon Label Subtext Button",
  "description": "Comprehensive button with icon, main label, and subtext for detailed actions.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/icon-label-subtext-button.tsx",
      "content": "import React from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { DownloadCloud, Loader2, Check } from \"lucide-react\";\n\n/**\n * IconLabelSubtextButton\n *\n * A compact, accessible, and highly re-usable button for actions that\n * need an icon, a strong primary label and a smaller contextual subtext.\n * Built with shadcn/ui primitives and Tailwind. Includes built-in\n * loading & success states, an optional badge, and an optional tooltip.\n */\n\ntype Variant = \"default\" | \"ghost\" | \"outline\";\ntype Size = \"sm\" | \"md\" | \"lg\";\n\nexport interface IconLabelSubtextButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  icon?: React.ReactNode; // preferred: lucide-react icon\n  label: string;\n  subtext?: string;\n  badge?: string | number; // small badge shown top-right\n  tooltip?: string; // optional tooltip content\n  variant?: Variant;\n  size?: Size;\n  loading?: boolean;\n  success?: boolean; // briefly show success icon instead of provided icon\n}\n\nfunction sizeClasses(size: Size) {\n  switch (size) {\n    case \"sm\":\n      return {\n        padding: \"px-3 py-2\",\n        icon: \"w-4 h-4\",\n        label: \"text-sm\",\n        subtext: \"text-xs\",\n      };\n    case \"lg\":\n      return {\n        padding: \"px-5 py-3\",\n        icon: \"w-6 h-6\",\n        label: \"text-base\",\n        subtext: \"text-sm\",\n      };\n    case \"md\":\n    default:\n      return {\n        padding: \"px-4 py-2.5\",\n        icon: \"w-5 h-5\",\n        label: \"text-sm font-medium\",\n        subtext: \"text-xs\",\n      };\n  }\n}\n\nfunction variantClasses(variant: Variant) {\n  switch (variant) {\n    case \"ghost\":\n      return \"bg-transparent hover:bg-muted/50 border-transparent\";\n    case \"outline\":\n      return \"bg-transparent border border-border hover:bg-muted\";\n    case \"default\":\n    default:\n      return \"bg-primary text-primary-foreground hover:bg-primary/90\";\n  }\n}\n\nconst IconLabelSubtextButton: React.FC<IconLabelSubtextButtonProps> = ({\n  icon,\n  label,\n  subtext,\n  badge,\n  tooltip,\n  variant = \"default\",\n  size = \"md\",\n  loading = false,\n  success = false,\n  className,\n  disabled,\n  ...props\n}) => {\n  const s = sizeClasses(size);\n  const v = variantClasses(variant);\n\n  const inner = (\n    <button\n      type=\"button\"\n      className={cn(\n        \"relative inline-flex items-center gap-3 rounded-2xl transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-ring\",\n        s.padding,\n        v,\n        className,\n        disabled && \"opacity-60 cursor-not-allowed\",\n      )}\n      disabled={disabled || loading}\n      {...props}\n    >\n      {/* Icon */}\n      <span\n        className={cn(\"flex items-center justify-center rounded-md\", s.icon)}\n        aria-hidden\n      >\n        {loading ? (\n          <Loader2 className={cn(s.icon, \"animate-spin\")} />\n        ) : success ? (\n          <Check className={cn(s.icon)} />\n        ) : (\n          (icon ?? <DownloadCloud className={cn(s.icon)} />)\n        )}\n      </span>\n\n      {/* Text column */}\n      <span className=\"flex flex-col items-start leading-none\">\n        <span className={cn(s.label)}>{label}</span>\n        {subtext ? (\n          <span className={cn(\"text-muted-foreground\", s.subtext)}>\n            {subtext}\n          </span>\n        ) : null}\n      </span>\n\n      {/* Optional small badge */}\n      {badge !== undefined ? (\n        <span className=\"absolute -top-2 -right-2\">\n          <Badge className=\"p-1 min-w-[1.25rem] h-5 text-[0.65rem]\">\n            {badge}\n          </Badge>\n        </span>\n      ) : null}\n    </button>\n  );\n\n  if (tooltip) {\n    return (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>{inner}</TooltipTrigger>\n          <TooltipContent side=\"top\">{tooltip}</TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  }\n\n  return inner;\n};\n\nexport default IconLabelSubtextButton;\n",
      "type": "registry:ui",
      "target": "components/ruixen/icon-label-subtext-button.tsx"
    }
  ]
}