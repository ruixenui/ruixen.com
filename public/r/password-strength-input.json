{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password-strength-input",
  "type": "registry:ui",
  "title": "Password Strength Input",
  "description": "A password input with real-time strength validation and visual feedback.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/password-strength-input.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Eye, EyeOff, Check, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PasswordStrengthInputProps {\n  value?: string;\n  onChange?: (value: string) => void;\n  placeholder?: string;\n  minLength?: number;\n  showStrengthCircle?: boolean;\n}\n\nconst defaultRequirements = (minLength: number) => [\n  {\n    label: `${minLength}+ characters`,\n    test: (v: string) => v.length >= minLength,\n  },\n  { label: \"Number\", test: (v: string) => /\\d/.test(v) },\n  { label: \"Lowercase\", test: (v: string) => /[a-z]/.test(v) },\n  { label: \"Uppercase\", test: (v: string) => /[A-Z]/.test(v) },\n  {\n    label: \"Special (!@#$)\",\n    test: (v: string) => /[!@#$%^&*(),.?\":{}|<>]/.test(v),\n  },\n];\n\nexport default function PasswordStrengthInput({\n  value: propValue = \"\",\n  onChange,\n  placeholder = \"Password\",\n  minLength = 8,\n  showStrengthCircle = true,\n}: PasswordStrengthInputProps) {\n  const [value, setValue] = useState(propValue);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const requirements = defaultRequirements(minLength);\n\n  const handleChange = (v: string) => {\n    setValue(v);\n    onChange?.(v);\n  };\n\n  const strengthScore = requirements.filter((r) => r.test(value)).length;\n  const strength = (strengthScore / requirements.length) * 100;\n\n  const strengthLabel =\n    strength === 100\n      ? \"Strong\"\n      : strength >= 60\n        ? \"Medium\"\n        : value\n          ? \"Weak\"\n          : \"\";\n\n  const glowColor =\n    strength === 100\n      ? \"shadow-[0_0_12px_rgba(34,197,94,0.7)]\"\n      : strength >= 60\n        ? \"shadow-[0_0_12px_rgba(234,179,8,0.7)]\"\n        : value\n          ? \"shadow-[0_0_12px_rgba(239,68,68,0.7)]\"\n          : \"shadow-none\";\n\n  return (\n    <div className=\"w-full max-w-sm mx-auto border border-zinc-200 dark:border-zinc-700 bg-white dark:bg-zinc-900 rounded-2xl shadow-lg p-6 space-y-4 transition-all\">\n      {/* Input */}\n      <div className=\"relative\">\n        <input\n          type={showPassword ? \"text\" : \"password\"}\n          value={value}\n          onChange={(e) => handleChange(e.target.value)}\n          className={cn(\n            \"peer w-full px-4 pt-5 pb-2 rounded-md border border-zinc-300 dark:border-zinc-700 bg-transparent text-sm text-zinc-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-indigo-400 transition-all\",\n            glowColor,\n          )}\n          placeholder=\" \"\n        />\n        <label className=\"absolute left-3 top-2 text-xs text-zinc-500 dark:text-zinc-400 peer-placeholder-shown:top-3.5 peer-placeholder-shown:text-sm peer-focus:top-2 peer-focus:text-xs transition-all\">\n          {placeholder}\n        </label>\n        <button\n          type=\"button\"\n          onClick={() => setShowPassword(!showPassword)}\n          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-zinc-500 hover:text-zinc-900 dark:hover:text-white transition\"\n        >\n          {showPassword ? (\n            <EyeOff className=\"w-4 h-4\" />\n          ) : (\n            <Eye className=\"w-4 h-4\" />\n          )}\n        </button>\n      </div>\n\n      {/* Strength Circle */}\n      {showStrengthCircle && value && (\n        <div className=\"flex flex-col items-center space-y-2\">\n          <div className=\"relative w-20 h-20\">\n            <svg className=\"rotate-[-90deg]\" width=\"80\" height=\"80\">\n              <circle\n                cx=\"40\"\n                cy=\"40\"\n                r=\"35\"\n                stroke=\"currentColor\"\n                strokeWidth=\"6\"\n                className=\"text-zinc-200 dark:text-zinc-800\"\n                fill=\"none\"\n              />\n              <circle\n                cx=\"40\"\n                cy=\"40\"\n                r=\"35\"\n                stroke=\"currentColor\"\n                strokeWidth=\"6\"\n                className={\n                  strength === 100\n                    ? \"text-green-500\"\n                    : strength >= 60\n                      ? \"text-yellow-400\"\n                      : \"text-red-500\"\n                }\n                strokeDasharray={2 * Math.PI * 35}\n                strokeDashoffset={2 * Math.PI * 35 * (1 - strength / 100)}\n                strokeLinecap=\"round\"\n                fill=\"none\"\n              />\n            </svg>\n            <div className=\"absolute inset-0 flex items-center justify-center text-xs font-semibold text-zinc-700 dark:text-zinc-100\">\n              {strengthLabel}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Requirements List */}\n      <div className=\"space-y-2 text-sm text-zinc-600 dark:text-zinc-400\">\n        {requirements.map(({ label, test }) => {\n          const passed = test(value);\n          return (\n            <div key={label} className=\"flex items-center gap-2\">\n              {passed ? (\n                <Check className=\"w-4 h-4 text-green-500\" />\n              ) : (\n                <X className=\"w-4 h-4 text-red-500\" />\n              )}\n              <span className={passed ? \"line-through opacity-70\" : \"\"}>\n                {label}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/password-strength-input.tsx"
    }
  ]
}