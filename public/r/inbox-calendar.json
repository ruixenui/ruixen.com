{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "inbox-calendar",
  "type": "registry:ui",
  "title": "Inbox Calendar",
  "description": "Interactive inbox-style calendar with event management and scrollable timeline.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "card",
    "scroll-area",
    "separator",
    "badge",
    "button",
    "popover",
    "input",
    "textarea",
    "calendar"
  ],
  "files": [
    {
      "path": "registry/ruixenui/inbox-calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Trash2, CalendarIcon, Plus } from \"lucide-react\";\nimport { format, isSameDay } from \"date-fns\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport type InboxEvent = {\n  id: string;\n  title: string;\n  description?: string;\n  date: Date;\n  label?: string;\n};\n\ninterface InboxCalendarProps {\n  events: InboxEvent[];\n  onAddEvent: (e: InboxEvent) => void;\n  onRemoveEvent?: (id: string) => void;\n}\n\nexport function InboxCalendar({\n  events,\n  onAddEvent,\n  onRemoveEvent,\n}: InboxCalendarProps) {\n  const [open, setOpen] = React.useState(false);\n  const [title, setTitle] = React.useState(\"\");\n  const [description, setDescription] = React.useState(\"\");\n  const [date, setDate] = React.useState<Date | undefined>(new Date());\n  const [label, setLabel] = React.useState(\"\");\n\n  // Group events by day\n  const grouped = React.useMemo(() => {\n    const groups: { date: Date; events: InboxEvent[] }[] = [];\n    events.forEach((ev) => {\n      const day = groups.find((g) => isSameDay(g.date, ev.date));\n      if (day) {\n        day.events.push(ev);\n      } else {\n        groups.push({ date: ev.date, events: [ev] });\n      }\n    });\n    return groups.sort((a, b) => a.date.getTime() - b.date.getTime());\n  }, [events]);\n\n  const handleAdd = () => {\n    if (!title.trim() || !date) return;\n    onAddEvent({\n      id: uuidv4(),\n      title: title.trim(),\n      description,\n      date,\n      label,\n    });\n    setTitle(\"\");\n    setDescription(\"\");\n    setLabel(\"\");\n    setDate(new Date());\n    setOpen(false);\n  };\n\n  return (\n    <Card className=\"w-md\">\n      <CardHeader className=\"flex items-center justify-between\">\n        <CardTitle className=\"text-lg\">Inbox Calendar</CardTitle>\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button size=\"sm\" className=\"flex items-center gap-2\">\n              <Plus className=\"h-4 w-4\" /> Add Event\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-80\">\n            <div className=\"flex flex-col gap-2\">\n              <Input\n                placeholder=\"Event title\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n              />\n              <Textarea\n                placeholder=\"Description (optional)\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n              <Input\n                placeholder=\"Label (optional)\"\n                value={label}\n                onChange={(e) => setLabel(e.target.value)}\n              />\n              <div className=\"flex items-center gap-2\">\n                <CalendarIcon className=\"h-4 w-4 opacity-50\" />\n                <Calendar\n                  mode=\"single\"\n                  selected={date}\n                  onSelect={setDate}\n                  className=\"rounded-md border\"\n                />\n              </div>\n              <Button onClick={handleAdd} className=\"mt-2\">\n                Save Event\n              </Button>\n            </div>\n          </PopoverContent>\n        </Popover>\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        <ScrollArea className=\"h-[500px]\">\n          {grouped.map((group, gi) => (\n            <div key={gi} className=\"p-4\">\n              <div className=\"text-sm font-semibold mb-2\">\n                {format(group.date, \"EEEE, MMMM d, yyyy\")}\n              </div>\n              <div className=\"space-y-2\">\n                {group.events.map((ev) => (\n                  <Popover key={ev.id}>\n                    <PopoverTrigger asChild>\n                      <div className=\"cursor-pointer rounded-md border p-2 hover:bg-accent transition flex items-start justify-between\">\n                        <div>\n                          <div className=\"text-sm font-medium\">{ev.title}</div>\n                          {ev.description && (\n                            <div className=\"text-xs text-muted-foreground line-clamp-1\">\n                              {ev.description}\n                            </div>\n                          )}\n                          <div className=\"text-xs text-muted-foreground\">\n                            {format(ev.date, \"hh:mm a\")}\n                          </div>\n                        </div>\n                        {ev.label && <Badge>{ev.label}</Badge>}\n                      </div>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-64\">\n                      <div className=\"flex flex-col gap-2\">\n                        <div className=\"font-semibold\">{ev.title}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {format(ev.date, \"PPpp\")}\n                        </div>\n                        {ev.description && (\n                          <div className=\"text-sm\">{ev.description}</div>\n                        )}\n                        {onRemoveEvent && (\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"mt-2 flex items-center gap-2\"\n                            onClick={() => onRemoveEvent(ev.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                            Delete\n                          </Button>\n                        )}\n                      </div>\n                    </PopoverContent>\n                  </Popover>\n                ))}\n              </div>\n              {gi < grouped.length - 1 && <Separator className=\"my-4\" />}\n            </div>\n          ))}\n          {grouped.length === 0 && (\n            <div className=\"p-6 text-center text-sm text-muted-foreground\">\n              No events scheduled.\n            </div>\n          )}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/inbox-calendar.tsx"
    }
  ]
}