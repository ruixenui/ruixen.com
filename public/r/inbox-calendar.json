{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "inbox-calendar",
  "type": "registry:ui",
  "title": "Inbox Calendar",
  "description": "Interactive inbox-style calendar with event management and scrollable timeline.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "card",
    "scroll-area",
    "separator",
    "badge",
    "button",
    "popover",
    "input",
    "textarea",
    "calendar"
  ],
  "files": [
    {
      "path": "registry/ruixenui/inbox-calendar.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\r\nimport { Separator } from \"@/components/ui/separator\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { Calendar } from \"@/components/ui/calendar\"\r\nimport { Trash2, CalendarIcon, Plus } from \"lucide-react\"\r\nimport { format, isSameDay } from \"date-fns\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\n\r\nexport type InboxEvent = {\r\n  id: string\r\n  title: string\r\n  description?: string\r\n  date: Date\r\n  label?: string\r\n}\r\n\r\ninterface InboxCalendarProps {\r\n  events: InboxEvent[]\r\n  onAddEvent: (e: InboxEvent) => void\r\n  onRemoveEvent?: (id: string) => void\r\n}\r\n\r\nexport function InboxCalendar({ events, onAddEvent, onRemoveEvent }: InboxCalendarProps) {\r\n  const [open, setOpen] = React.useState(false)\r\n  const [title, setTitle] = React.useState(\"\")\r\n  const [description, setDescription] = React.useState(\"\")\r\n  const [date, setDate] = React.useState<Date | undefined>(new Date())\r\n  const [label, setLabel] = React.useState(\"\")\r\n\r\n  // Group events by day\r\n  const grouped = React.useMemo(() => {\r\n    const groups: { date: Date; events: InboxEvent[] }[] = []\r\n    events.forEach((ev) => {\r\n      const day = groups.find((g) => isSameDay(g.date, ev.date))\r\n      if (day) {\r\n        day.events.push(ev)\r\n      } else {\r\n        groups.push({ date: ev.date, events: [ev] })\r\n      }\r\n    })\r\n    return groups.sort((a, b) => a.date.getTime() - b.date.getTime())\r\n  }, [events])\r\n\r\n  const handleAdd = () => {\r\n    if (!title.trim() || !date) return\r\n    onAddEvent({\r\n      id: uuidv4(),\r\n      title: title.trim(),\r\n      description,\r\n      date,\r\n      label,\r\n    })\r\n    setTitle(\"\")\r\n    setDescription(\"\")\r\n    setLabel(\"\")\r\n    setDate(new Date())\r\n    setOpen(false)\r\n  }\r\n\r\n  return (\r\n    <Card className=\"w-md\">\r\n      <CardHeader className=\"flex items-center justify-between\">\r\n        <CardTitle className=\"text-lg\">Inbox Calendar</CardTitle>\r\n        <Popover open={open} onOpenChange={setOpen}>\r\n          <PopoverTrigger asChild>\r\n            <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n              <Plus className=\"h-4 w-4\" /> Add Event\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent className=\"w-80\">\r\n            <div className=\"flex flex-col gap-2\">\r\n              <Input\r\n                placeholder=\"Event title\"\r\n                value={title}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n              />\r\n              <Textarea\r\n                placeholder=\"Description (optional)\"\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              />\r\n              <Input\r\n                placeholder=\"Label (optional)\"\r\n                value={label}\r\n                onChange={(e) => setLabel(e.target.value)}\r\n              />\r\n              <div className=\"flex items-center gap-2\">\r\n                <CalendarIcon className=\"h-4 w-4 opacity-50\" />\r\n                <Calendar\r\n                  mode=\"single\"\r\n                  selected={date}\r\n                  onSelect={setDate}\r\n                  className=\"rounded-md border\"\r\n                />\r\n              </div>\r\n              <Button onClick={handleAdd} className=\"mt-2\">\r\n                Save Event\r\n              </Button>\r\n            </div>\r\n          </PopoverContent>\r\n        </Popover>\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"p-0\">\r\n        <ScrollArea className=\"h-[500px]\">\r\n          {grouped.map((group, gi) => (\r\n            <div key={gi} className=\"p-4\">\r\n              <div className=\"text-sm font-semibold mb-2\">\r\n                {format(group.date, \"EEEE, MMMM d, yyyy\")}\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                {group.events.map((ev) => (\r\n                  <Popover key={ev.id}>\r\n                    <PopoverTrigger asChild>\r\n                      <div className=\"cursor-pointer rounded-md border p-2 hover:bg-accent transition flex items-start justify-between\">\r\n                        <div>\r\n                          <div className=\"text-sm font-medium\">{ev.title}</div>\r\n                          {ev.description && (\r\n                            <div className=\"text-xs text-muted-foreground line-clamp-1\">\r\n                              {ev.description}\r\n                            </div>\r\n                          )}\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            {format(ev.date, \"hh:mm a\")}\r\n                          </div>\r\n                        </div>\r\n                        {ev.label && <Badge>{ev.label}</Badge>}\r\n                      </div>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent className=\"w-64\">\r\n                      <div className=\"flex flex-col gap-2\">\r\n                        <div className=\"font-semibold\">{ev.title}</div>\r\n                        <div className=\"text-xs text-muted-foreground\">\r\n                          {format(ev.date, \"PPpp\")}\r\n                        </div>\r\n                        {ev.description && (\r\n                          <div className=\"text-sm\">{ev.description}</div>\r\n                        )}\r\n                        {onRemoveEvent && (\r\n                          <Button\r\n                            variant=\"destructive\"\r\n                            size=\"sm\"\r\n                            className=\"mt-2 flex items-center gap-2\"\r\n                            onClick={() => onRemoveEvent(ev.id)}\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4\" />\r\n                            Delete\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                    </PopoverContent>\r\n                  </Popover>\r\n                ))}\r\n              </div>\r\n              {gi < grouped.length - 1 && <Separator className=\"my-4\" />}\r\n            </div>\r\n          ))}\r\n          {grouped.length === 0 && (\r\n            <div className=\"p-6 text-center text-sm text-muted-foreground\">\r\n              No events scheduled.\r\n            </div>\r\n          )}\r\n        </ScrollArea>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/inbox-calendar.tsx"
    }
  ]
}