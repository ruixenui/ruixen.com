{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flip-card",
  "type": "registry:ui",
  "title": "Flip Card",
  "description": "3D flip card with login form, customizable fields, and success states.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/ruixenui/flip-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { Card, CardHeader, CardContent, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\nexport interface FlipCardField {\n  name: string;\n  type?: string;\n  label: string;\n  placeholder?: string;\n}\n\nexport interface FlipCardProps {\n  frontTitle?: string;\n  frontDescription?: string;\n  frontIllustration?: React.ReactNode;\n  backTitle?: string;\n  backDescription?: string;\n  backIllustration?: React.ReactNode;\n  successTitle?: string;\n  successDescription?: string;\n  successIllustration?: React.ReactNode;\n  fields?: FlipCardField[];\n  onLogin?: (data: Record<string, string>) => Promise<boolean> | boolean;\n  loginButtonText?: string;\n  backButtonText?: string;\n  successButtonText?: string;\n  className?: string;\n  cardWidth?: number;\n  cardHeight?: number;\n  showBackInitially?: boolean;\n}\n\nexport default function FlipCard({\n  frontTitle = \"Welcome Back ðŸ‘‹\",\n  frontDescription = \"Login to continue\",\n  frontIllustration,\n  backTitle = \"Login Form\",\n  backDescription = \"Fill your details\",\n  backIllustration,\n  successTitle = \"Login Successful ðŸŽ‰\",\n  successDescription = \"You are now logged in!\",\n  successIllustration,\n  fields = [\n    {\n      name: \"email\",\n      type: \"email\",\n      label: \"Email\",\n      placeholder: \"Enter your email\",\n    },\n    {\n      name: \"password\",\n      type: \"password\",\n      label: \"Password\",\n      placeholder: \"Enter your password\",\n    },\n  ],\n  onLogin,\n  loginButtonText = \"Login\",\n  backButtonText = \"Back\",\n  successButtonText = \"Continue\",\n  className,\n  cardWidth = 320,\n  cardHeight = 420,\n  showBackInitially = false,\n}: FlipCardProps) {\n  const [flipped, setFlipped] = React.useState(showBackInitially);\n  const [formData, setFormData] = React.useState<Record<string, string>>({});\n  const [success, setSuccess] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(\"\");\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(\"\");\n    try {\n      if (onLogin) {\n        const result = await onLogin(formData);\n        if (result) {\n          setSuccess(true);\n          setFlipped(false);\n        } else {\n          setError(\"Invalid credentials\");\n        }\n      } else {\n        setSuccess(true);\n        setFlipped(false);\n      }\n    } catch (err) {\n      setError(\"Login failed\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div\n      className={cn(\"perspective-1000\", className)}\n      style={{ width: cardWidth, height: cardHeight }}\n    >\n      <motion.div\n        className=\"relative w-full h-full\"\n        animate={{ rotateY: flipped ? 180 : 0 }}\n        transition={{ duration: 0.6 }}\n        style={{ transformStyle: \"preserve-3d\" }}\n      >\n        {/* FRONT SIDE */}\n        <Card className=\"absolute w-full h-full backface-hidden bg-white shadow-md rounded-2xl p-4 flex flex-col justify-center items-center\">\n          {!success ? (\n            <>\n              {frontIllustration ?? (\n                <div className=\"w-20 h-20 bg-blue-100 rounded-full mb-4\" />\n              )}\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-center\">\n                  {frontTitle}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center text-sm text-gray-600\">\n                {frontDescription}\n              </CardContent>\n              <Button className=\"mt-4\" onClick={() => setFlipped(true)}>\n                {loginButtonText}\n              </Button>\n            </>\n          ) : (\n            <>\n              {successIllustration ?? (\n                <div className=\"w-20 h-20 bg-green-100 rounded-full mb-4\" />\n              )}\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-center\">\n                  {successTitle}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center text-sm text-gray-600\">\n                {successDescription}\n              </CardContent>\n              <Button className=\"mt-4 w-full\">{successButtonText}</Button>\n            </>\n          )}\n        </Card>\n\n        {/* BACK SIDE */}\n        <Card\n          className=\"absolute w-full h-full backface-hidden bg-white shadow-md rounded-2xl p-6 flex flex-col justify-center\"\n          style={{ transform: \"rotateY(180deg)\" }}\n        >\n          {backIllustration}\n          <h3 className=\"text-lg font-semibold mb-2\">{backTitle}</h3>\n          <p className=\"text-sm text-gray-600 mb-4\">{backDescription}</p>\n\n          <form onSubmit={handleSubmit} className=\"space-y-3\">\n            {fields.map((field) => (\n              <div key={field.name} className=\"flex flex-col\">\n                <label className=\"text-sm font-medium\">{field.label}</label>\n                <Input\n                  name={field.name}\n                  type={field.type || \"text\"}\n                  placeholder={field.placeholder}\n                  value={formData[field.name] || \"\"}\n                  onChange={handleChange}\n                />\n              </div>\n            ))}\n            {error && <p className=\"text-sm text-red-500\">{error}</p>}\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? \"Loading...\" : loginButtonText}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => setFlipped(false)}\n            >\n              {backButtonText}\n            </Button>\n          </form>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/flip-card.tsx"
    }
  ]
}