{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stack-pagination",
  "type": "registry:ui",
  "title": "Stack Pagination",
  "description": "3D card stack pagination with flip animations and perspective effects.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/ruixenui/stack-pagination.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface Page {\n  number: number;\n  content: React.ReactNode;\n}\n\ninterface StackPaginationProps {\n  totalPages?: number;\n  visibleCount?: number;\n  className?: string;\n}\n\nexport default function StackPagination({\n  totalPages = 20,\n  visibleCount = 5,\n  className,\n}: StackPaginationProps) {\n  const [activePage, setActivePage] = React.useState(1);\n  const [flipped, setFlipped] = React.useState<number | null>(null);\n\n  // Build a visible range with dots like standard pagination\n  const getVisiblePages = () => {\n    const pages: (number | \"...\")[] = [];\n\n    if (totalPages <= visibleCount + 2) {\n      return Array.from({ length: totalPages }, (_, i) => i + 1);\n    }\n\n    const left = Math.max(2, activePage - 1);\n    const right = Math.min(totalPages - 1, activePage + 1);\n\n    pages.push(1);\n\n    if (left > 2) pages.push(\"...\");\n\n    for (let i = left; i <= right; i++) {\n      pages.push(i);\n    }\n\n    if (right < totalPages - 1) pages.push(\"...\");\n\n    pages.push(totalPages);\n\n    return pages;\n  };\n\n  const visiblePages = getVisiblePages();\n\n  return (\n    <div\n      className={cn(\n        \"flex flex-col items-center justify-center gap-6 py-10\",\n        className,\n      )}\n    >\n      {/* 3D Stack of visible cards */}\n      <div className=\"relative flex gap-4 perspective-[1200px]\">\n        {visiblePages.map((page, i) =>\n          page === \"...\" ? (\n            <div\n              key={`dots-${i}`}\n              className=\"flex items-center justify-center w-16 h-24 text-muted-foreground\"\n            >\n              ...\n            </div>\n          ) : (\n            <motion.div\n              key={page}\n              className=\"relative w-24 h-36 cursor-pointer\"\n              initial={{ rotateY: 0, z: 0 }}\n              whileHover={{\n                z: 40,\n                rotateY: flipped === page ? 180 : 0,\n              }}\n              animate={{\n                rotateY: flipped === page ? 180 : 0,\n                z: activePage === page ? 30 : -i * 5,\n              }}\n              transition={{ type: \"spring\", stiffness: 200, damping: 20 }}\n              onClick={() => setFlipped(flipped === page ? null : page)}\n              style={{ transformStyle: \"preserve-3d\" }}\n            >\n              {/* Front */}\n              <Card\n                className={cn(\n                  \"absolute w-full h-full backface-hidden flex items-center justify-center\",\n                  activePage === page\n                    ? \"border-primary shadow-lg\"\n                    : \"border-muted\",\n                )}\n                onClick={() => setActivePage(page)}\n              >\n                <CardContent className=\"flex items-center justify-center text-lg font-semibold\">\n                  {page}\n                </CardContent>\n              </Card>\n\n              {/* Back */}\n              <Card className=\"absolute w-full h-full rotate-y-180 backface-hidden flex items-center justify-center bg-muted/30\">\n                <CardContent className=\"text-sm flex flex-col items-center gap-6\">\n                  <span>Page</span>\n                  <span>Content</span>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ),\n        )}\n      </div>\n\n      {/* Control buttons */}\n      <div className=\"flex gap-2\">\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          disabled={activePage === 1}\n          onClick={() => {\n            setActivePage((p) => Math.max(1, p - 1));\n            setFlipped(null);\n          }}\n        >\n          Prev\n        </Button>\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          disabled={activePage === totalPages}\n          onClick={() => {\n            setActivePage((p) => Math.min(totalPages, p + 1));\n            setFlipped(null);\n          }}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/stack-pagination.tsx"
    }
  ]
}