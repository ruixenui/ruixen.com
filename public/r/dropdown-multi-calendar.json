{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown-multi-calendar",
  "type": "registry:ui",
  "title": "Dropdown Multi Calendar",
  "description": "A multi-select calendar with year/month dropdowns and badge-based date display.",
  "dependencies": [
    "date-fns"
  ],
  "registryDependencies": [
    "calendar",
    "button",
    "badge",
    "card",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/dropdown-multi-calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { format, setMonth, setYear } from \"date-fns\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { cn } from \"@/lib/utils\";\n\nexport type DropdownMultiCalendarProps = {\n  selectedDates?: Date[];\n  onChange?: (dates: Date[]) => void;\n  minYear?: number;\n  maxYear?: number;\n  maxSelectable?: number;\n  label?: string;\n  monthFormat?: string;\n  className?: string;\n  calendarClassName?: string;\n  dropdownClassName?: string;\n};\n\nexport function DropdownMultiCalendar({\n  selectedDates = [],\n  onChange,\n  minYear = 1900,\n  maxYear = new Date().getFullYear() + 10,\n  maxSelectable,\n  label = \"Select Dates\",\n  monthFormat = \"MMMM\",\n  className,\n  calendarClassName,\n  dropdownClassName,\n}: DropdownMultiCalendarProps) {\n  const today = new Date();\n  const [month, setMonthState] = React.useState(today.getMonth());\n  const [year, setYearState] = React.useState(today.getFullYear());\n  const [dates, setDates] = React.useState<Date[]>(selectedDates);\n\n  const handleRemove = (date: Date) => {\n    const newDates = dates.filter(\n      (d) => format(d, \"yyyy-MM-dd\") !== format(date, \"yyyy-MM-dd\"),\n    );\n    setDates(newDates);\n    onChange?.(newDates);\n  };\n\n  const handleSelect = (selected: Date[] | undefined) => {\n    let newDates = selected ?? [];\n    if (maxSelectable) newDates = newDates.slice(0, maxSelectable);\n    setDates(newDates);\n    onChange?.(newDates);\n  };\n\n  const displayMonth = setMonth(setYear(today, year), month);\n\n  return (\n    <Card className={cn(\"shadow-none border-none bg-background\", className)}>\n      <CardHeader>\n        <CardTitle className=\"text-base\">{label}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex flex-col gap-4\">\n        {/* Dropdowns */}\n        <div className={cn(\"flex gap-2\", dropdownClassName)}>\n          {/* Year Select */}\n          <Select\n            value={year.toString()}\n            onValueChange={(val) => setYearState(Number(val))}\n          >\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue placeholder=\"Year\" />\n            </SelectTrigger>\n            <SelectContent>\n              {Array.from(\n                { length: maxYear - minYear + 1 },\n                (_, i) => minYear + i,\n              ).map((y) => (\n                <SelectItem key={y} value={y.toString()}>\n                  {y}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          {/* Month Select */}\n          <Select\n            value={month.toString()}\n            onValueChange={(val) => setMonthState(Number(val))}\n          >\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue placeholder=\"Month\" />\n            </SelectTrigger>\n            <SelectContent>\n              {Array.from({ length: 12 }, (_, i) => (\n                <SelectItem key={i} value={i.toString()}>\n                  {format(new Date(2000, i, 1), monthFormat)}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Calendar */}\n        <Calendar\n          mode=\"multiple\"\n          selected={dates}\n          onSelect={handleSelect}\n          month={displayMonth}\n          onMonthChange={(date) => {\n            setMonthState(date.getMonth());\n            setYearState(date.getFullYear());\n          }}\n          className={cn(\"rounded-md border\", calendarClassName)}\n        />\n\n        {/* Selected Dates */}\n        <div className=\"flex flex-wrap gap-2\">\n          {dates.length === 0 && (\n            <p className=\"text-xs text-muted-foreground\">No dates selected</p>\n          )}\n          {dates\n            .sort((a, b) => a.getTime() - b.getTime())\n            .map((d) => (\n              <Badge\n                key={d.toISOString()}\n                variant=\"secondary\"\n                className=\"flex items-center gap-2\"\n              >\n                {format(d, \"PPP\")}\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  className=\"h-4 w-4 p-0 text-muted-foreground hover:text-destructive\"\n                  onClick={() => handleRemove(d)}\n                >\n                  âœ•\n                </Button>\n              </Badge>\n            ))}\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex justify-end\">\n        <Button\n          size=\"sm\"\n          onClick={() => console.log(\"Confirmed:\", dates)}\n          disabled={dates.length === 0}\n        >\n          Confirm\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/dropdown-multi-calendar.tsx"
    }
  ]
}