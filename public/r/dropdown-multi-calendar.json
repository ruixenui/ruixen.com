{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown-multi-calendar",
  "type": "registry:ui",
  "title": "Dropdown Multi Calendar",
  "description": "A multi-select calendar with year/month dropdowns and badge-based date display.",
  "dependencies": [
    "date-fns"
  ],
  "registryDependencies": [
    "calendar",
    "button",
    "badge",
    "card",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/dropdown-multi-calendar.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { format, setMonth, setYear } from \"date-fns\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport type DropdownMultiCalendarProps = {\r\n  selectedDates?: Date[];\r\n  onChange?: (dates: Date[]) => void;\r\n  minYear?: number;\r\n  maxYear?: number;\r\n  maxSelectable?: number;\r\n  label?: string;\r\n  monthFormat?: string;\r\n  className?: string;\r\n  calendarClassName?: string;\r\n  dropdownClassName?: string;\r\n};\r\n\r\nexport function DropdownMultiCalendar({\r\n  selectedDates = [],\r\n  onChange,\r\n  minYear = 1900,\r\n  maxYear = new Date().getFullYear() + 10,\r\n  maxSelectable,\r\n  label = \"Select Dates\",\r\n  monthFormat = \"MMMM\",\r\n  className,\r\n  calendarClassName,\r\n  dropdownClassName,\r\n}: DropdownMultiCalendarProps) {\r\n  const today = new Date();\r\n  const [month, setMonthState] = React.useState(today.getMonth());\r\n  const [year, setYearState] = React.useState(today.getFullYear());\r\n  const [dates, setDates] = React.useState<Date[]>(selectedDates);\r\n\r\n  const handleRemove = (date: Date) => {\r\n    const newDates = dates.filter(\r\n      (d) => format(d, \"yyyy-MM-dd\") !== format(date, \"yyyy-MM-dd\")\r\n    );\r\n    setDates(newDates);\r\n    onChange?.(newDates);\r\n  };\r\n\r\n  const handleSelect = (selected: Date[] | undefined) => {\r\n    let newDates = selected ?? [];\r\n    if (maxSelectable) newDates = newDates.slice(0, maxSelectable);\r\n    setDates(newDates);\r\n    onChange?.(newDates);\r\n  };\r\n\r\n  const displayMonth = setMonth(setYear(today, year), month);\r\n\r\n  return (\r\n    <Card className={cn(\"shadow-none border-none bg-background\", className)}>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-base\">{label}</CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"flex flex-col gap-4\">\r\n        {/* Dropdowns */}\r\n        <div className={cn(\"flex gap-2\", dropdownClassName)}>\r\n          {/* Year Select */}\r\n          <Select\r\n            value={year.toString()}\r\n            onValueChange={(val) => setYearState(Number(val))}\r\n          >\r\n            <SelectTrigger className=\"w-[140px]\">\r\n              <SelectValue placeholder=\"Year\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {Array.from({ length: maxYear - minYear + 1 }, (_, i) => minYear + i).map(\r\n                (y) => (\r\n                  <SelectItem key={y} value={y.toString()}>\r\n                    {y}\r\n                  </SelectItem>\r\n                )\r\n              )}\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          {/* Month Select */}\r\n          <Select\r\n            value={month.toString()}\r\n            onValueChange={(val) => setMonthState(Number(val))}\r\n          >\r\n            <SelectTrigger className=\"w-[140px]\">\r\n              <SelectValue placeholder=\"Month\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {Array.from({ length: 12 }, (_, i) => (\r\n                <SelectItem key={i} value={i.toString()}>\r\n                  {format(new Date(2000, i, 1), monthFormat)}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n\r\n        {/* Calendar */}\r\n        <Calendar\r\n          mode=\"multiple\"\r\n          selected={dates}\r\n          onSelect={handleSelect}\r\n          month={displayMonth}\r\n          onMonthChange={(date) => {\r\n            setMonthState(date.getMonth());\r\n            setYearState(date.getFullYear());\r\n          }}\r\n          className={cn(\"rounded-md border\", calendarClassName)}\r\n        />\r\n\r\n        {/* Selected Dates */}\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          {dates.length === 0 && (\r\n            <p className=\"text-xs text-muted-foreground\">No dates selected</p>\r\n          )}\r\n          {dates\r\n            .sort((a, b) => a.getTime() - b.getTime())\r\n            .map((d) => (\r\n              <Badge\r\n                key={d.toISOString()}\r\n                variant=\"secondary\"\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                {format(d, \"PPP\")}\r\n                <Button\r\n                  size=\"icon\"\r\n                  variant=\"ghost\"\r\n                  className=\"h-4 w-4 p-0 text-muted-foreground hover:text-destructive\"\r\n                  onClick={() => handleRemove(d)}\r\n                >\r\n                  âœ•\r\n                </Button>\r\n              </Badge>\r\n            ))}\r\n        </div>\r\n      </CardContent>\r\n      <CardFooter className=\"flex justify-end\">\r\n        <Button\r\n          size=\"sm\"\r\n          onClick={() => console.log(\"Confirmed:\", dates)}\r\n          disabled={dates.length === 0}\r\n        >\r\n          Confirm\r\n        </Button>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/dropdown-multi-calendar.tsx"
    }
  ]
}