{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "notifications-with-actions",
  "type": "registry:ui",
  "title": "Notifications With Actions",
  "description": "Interactive notification component with swipe-to-reveal actions like archive and delete.",
  "dependencies": [
    "lucide-react",
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/ruixenui/notifications-with-actions.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Bell,\n  GripVertical,\n  Trash2,\n  Archive,\n  ChevronRight,\n} from \"lucide-react\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { motion } from \"framer-motion\";\n\ninterface NotificationItem {\n  id: string;\n  title: string;\n  description: string;\n  time: string;\n}\n\ninterface NotificationsWithActionsProps {\n  items?: NotificationItem[];\n  placement?: \"top\" | \"right\" | \"bottom\" | \"left\";\n}\n\nconst defaultNotifications: NotificationItem[] = [\n  {\n    id: \"1\",\n    title: \"Welcome ðŸŽ‰\",\n    description: \"Thanks for checking out the notifications component!\",\n    time: \"just now\",\n  },\n  {\n    id: \"2\",\n    title: \"System Update\",\n    description: \"Weâ€™ve rolled out a new feature for you.\",\n    time: \"1h ago\",\n  },\n  {\n    id: \"3\",\n    title: \"Reminder\",\n    description: \"Donâ€™t forget to finish your profile setup.\",\n    time: \"3h ago\",\n  },\n];\n\nexport default function NotificationsWithActions({\n  items = defaultNotifications,\n  placement = \"bottom\",\n}: NotificationsWithActionsProps) {\n  const [notifications, setNotifications] =\n    React.useState<NotificationItem[]>(items);\n  const [activeId, setActiveId] = React.useState<string | null>(null);\n\n  const handleArchive = () => {\n    setActiveId(null);\n  };\n\n  const handleDelete = (id: string) => {\n    setNotifications((prev) => prev.filter((n) => n.id !== id));\n    setActiveId(null);\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <button className=\"relative inline-flex items-center justify-center rounded-full p-2 hover:bg-muted\">\n          <Bell className=\"h-5 w-5\" />\n          {notifications.length > 0 && (\n            <Badge\n              variant=\"default\"\n              className=\"absolute -top-1 -right-1 text-xs px-1.5 py-0\"\n            >\n              {notifications.length}\n            </Badge>\n          )}\n        </button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0\" align=\"center\" side={placement}>\n        <Card className=\"max-h-80 overflow-y-auto rounded-lg border-none shadow-none\">\n          {notifications.length === 0 ? (\n            <div className=\"p-4 text-sm text-muted-foreground text-center\">\n              No notifications\n            </div>\n          ) : (\n            <ul className=\"divide-y divide-border\">\n              {notifications.map((item) => {\n                const isActive = activeId === item.id;\n                return (\n                  <li\n                    key={item.id}\n                    className=\"flex items-center justify-between p-4 hover:bg-muted/50 transition\"\n                  >\n                    {/* Left text with animation */}\n                    <motion.div\n                      animate={{ x: isActive ? -40 : 0 }}\n                      transition={{ duration: 0.2 }}\n                      className=\"flex-1\"\n                    >\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"font-medium text-sm\">\n                          {item.title}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {item.time}\n                        </span>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground leading-relaxed\">\n                        {item.description}\n                      </p>\n                    </motion.div>\n\n                    {/* Right side controls */}\n                    <div className=\"ml-2 flex items-center\">\n                      {isActive ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <button\n                            className=\"p-1 rounded-md hover:bg-muted\"\n                            onClick={handleArchive}\n                          >\n                            <Archive className=\"h-4 w-4 text-muted-foreground\" />\n                          </button>\n                          <button\n                            className=\"p-1 rounded-md hover:bg-muted\"\n                            onClick={() => handleDelete(item.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                          </button>\n                          <button\n                            className=\"p-1 rounded-md hover:bg-muted\"\n                            onClick={() => setActiveId(null)}\n                          >\n                            <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />\n                          </button>\n                        </div>\n                      ) : (\n                        <button\n                          className=\"p-1 rounded-md hover:bg-muted\"\n                          onClick={() => setActiveId(isActive ? null : item.id)}\n                        >\n                          <GripVertical className=\"h-4 w-4 text-muted-foreground\" />\n                        </button>\n                      )}\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n        </Card>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/notifications-with-actions.tsx"
    }
  ]
}