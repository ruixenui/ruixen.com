{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radial-week-view",
  "type": "registry:ui",
  "title": "Radial Week View",
  "description": "Circular week calendar with radial hour markers and event positioning.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "card",
    "popover",
    "button",
    "input"
  ],
  "files": [
    {
      "path": "registry/ruixenui/radial-week-view.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Card, CardContent } from \"@/components/ui/card\"\r\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Trash2 } from \"lucide-react\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport { format, addHours, startOfWeek, eachDayOfInterval, setHours } from \"date-fns\"\r\n\r\nexport type CalendarEvent = {\r\n  id: string\r\n  title: string\r\n  date: string // ISO string\r\n  hour: number\r\n}\r\n\r\ninterface RadialWeekViewProps {\r\n  events: CalendarEvent[]\r\n  onAddEvent: (event: CalendarEvent) => void\r\n  onRemoveEvent?: (id: string) => void\r\n}\r\n\r\nexport function RadialWeekView({ events, onAddEvent, onRemoveEvent }: RadialWeekViewProps) {\r\n  const [selectedDate, setSelectedDate] = React.useState<Date>(new Date())\r\n  const [newTitle, setNewTitle] = React.useState(\"\")\r\n  const [newHour, setNewHour] = React.useState<number>(0)\r\n\r\n  const startWeek = startOfWeek(selectedDate, { weekStartsOn: 0 }) // Sunday\r\n  const weekDays = eachDayOfInterval({ start: startWeek, end: addHours(startWeek, 24 * 6) })\r\n\r\n  const handleAddEvent = () => {\r\n    if (!newTitle.trim()) return\r\n    const eventDate = setHours(selectedDate, newHour)\r\n    onAddEvent({\r\n      id: uuidv4(),\r\n      title: newTitle.trim(),\r\n      date: eventDate.toISOString(),\r\n      hour: newHour,\r\n    })\r\n    setNewTitle(\"\")\r\n  }\r\n\r\n  const eventsForDay = (date: Date) =>\r\n    events.filter((e) => format(new Date(e.date), \"yyyy-MM-dd\") === format(date, \"yyyy-MM-dd\"))\r\n\r\n  return (\r\n    <div className=\"space-y-6 flex flex-col items-center\">\r\n      <div className=\"relative w-[400px] h-[400px] rounded-full border border-gray-300 dark:border-gray-600\">\r\n        {/* Radial hours */}\r\n        {[...Array(24)].map((_, hour) => {\r\n          const angle = (hour / 24) * 360\r\n          return (\r\n            <div\r\n              key={hour}\r\n              className=\"absolute w-1 h-3 bg-gray-400 dark:bg-gray-500 top-1/2 left-1/2 origin-bottom\"\r\n              style={{\r\n                transform: `rotate(${angle}deg) translateY(-50%)`,\r\n              }}\r\n            />\r\n          )\r\n        })}\r\n\r\n        {/* Events */}\r\n        {weekDays.map((day) => {\r\n          const dayEvents = eventsForDay(day)\r\n          return dayEvents.map((event) => {\r\n            const angle = (event.hour / 24) * 360\r\n            return (\r\n              <Popover key={event.id}>\r\n                <PopoverTrigger asChild>\r\n                  <div\r\n                    className=\"absolute w-6 h-6 bg-blue-400 dark:bg-blue-600 rounded-full top-1/2 left-1/2 cursor-pointer\"\r\n                    style={{\r\n                      transform: `rotate(${angle}deg) translate(150px) rotate(-${angle}deg)`,\r\n                    }}\r\n                  />\r\n                </PopoverTrigger>\r\n                <PopoverContent className=\"w-48\">\r\n                  <Card>\r\n                    <CardContent className=\"flex justify-between items-center p-2 text-sm\">\r\n                      <span>{event.title}</span>\r\n                      {onRemoveEvent && (\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"icon\"\r\n                          className=\"h-4 w-4\"\r\n                          onClick={() => onRemoveEvent(event.id)}\r\n                        >\r\n                          <Trash2 className=\"h-3 w-3 text-red-500\" />\r\n                        </Button>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </PopoverContent>\r\n              </Popover>\r\n            )\r\n          })\r\n        })}\r\n      </div>\r\n\r\n      {/* Add Event */}\r\n      <div className=\"flex gap-2 items-center\">\r\n        <Input\r\n          placeholder=\"Event title\"\r\n          value={newTitle}\r\n          onChange={(e) => setNewTitle(e.target.value)}\r\n        />\r\n        <Input\r\n          type=\"number\"\r\n          min={0}\r\n          max={23}       // restrict hour input to 0-23\r\n          placeholder=\"Hour (0-23)\"\r\n          value={newHour}\r\n          onChange={(e) => {\r\n            let val = Number(e.target.value)\r\n            if (val < 0) val = 0\r\n            if (val > 23) val = 23\r\n            setNewHour(val)\r\n          }}\r\n        />\r\n        <Button onClick={handleAddEvent}>Add Event</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/radial-week-view.tsx"
    }
  ]
}