{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pill-morph-tabs",
  "type": "registry:ui",
  "title": "Pill Morph Tabs",
  "description": "Elegant tab component with morphing pill indicator and glassmorphism effects.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/ruixenui/pill-morph-tabs.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\n/* Use your shadcn Tab primitives - adjust import path if your project differs */\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\n\nexport interface PillTab {\n  value: string;\n  label: React.ReactNode;\n  panel?: React.ReactNode;\n}\n\ninterface PillMorphTabsProps {\n  items?: PillTab[];\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  className?: string;\n}\n\n/**\n * PillMorphTabs\n *\n * - Uses shadcn Tabs primitives for accessibility.\n * - Active pill is an animated morphing element (framer-motion).\n * - Glassmorphism + subtle gradient background.\n * - Responsive and keyboard accessible (handled by Tabs).\n */\nexport default function PillMorphTabs({\n  items = [\n    {\n      value: \"overview\",\n      label: \"Overview\",\n      panel: <div>Overview content</div>,\n    },\n    { value: \"features\", label: \"Features\", panel: <div>Feature list</div> },\n    { value: \"pricing\", label: \"Pricing\", panel: <div>Pricing & plans</div> },\n    { value: \"faq\", label: \"FAQ\", panel: <div>FAQ content</div> },\n  ],\n  defaultValue,\n  onValueChange,\n  className,\n}: PillMorphTabsProps) {\n  const first = items[0]?.value ?? \"tab-0\";\n  const [value, setValue] = React.useState<string>(defaultValue ?? first);\n  const listRef = React.useRef<HTMLDivElement | null>(null);\n  const triggerRefs = React.useRef<Record<string, HTMLButtonElement | null>>(\n    {},\n  );\n\n  const [indicator, setIndicator] = React.useState<{\n    left: number;\n    width: number;\n  } | null>(null);\n  const [isExpanding, setIsExpanding] = React.useState(false);\n\n  // measure position & width of active trigger and set indicator\n  const measure = React.useCallback(() => {\n    const list = listRef.current;\n    const activeEl = triggerRefs.current[value];\n    if (!list || !activeEl) {\n      setIndicator(null);\n      return;\n    }\n    const listRect = list.getBoundingClientRect();\n    const tRect = activeEl.getBoundingClientRect();\n    setIndicator({\n      left: tRect.left - listRect.left + list.scrollLeft,\n      width: tRect.width,\n    });\n  }, [value]);\n\n  // measure on mount, value changes and resize\n  React.useEffect(() => {\n    measure();\n    const ro = new ResizeObserver(measure);\n    if (listRef.current) ro.observe(listRef.current);\n    Object.values(triggerRefs.current).forEach((el) => el && ro.observe(el));\n    window.addEventListener(\"resize\", measure);\n    return () => {\n      ro.disconnect();\n      window.removeEventListener(\"resize\", measure);\n    };\n  }, [measure]);\n\n  // when value changes, trigger a short \"expand\" animation effect\n  React.useEffect(() => {\n    setIsExpanding(true);\n    const id = window.setTimeout(() => setIsExpanding(false), 300); // duration for expand feel\n    return () => window.clearTimeout(id);\n  }, [value]);\n\n  React.useEffect(() => {\n    if (onValueChange) onValueChange(value);\n  }, [value, onValueChange]);\n\n  return (\n    <div className={cn(\"w-full\", className)}>\n      <Tabs value={value} onValueChange={(v) => setValue(v)}>\n        <div\n          ref={listRef}\n          className={cn(\n            \"relative\",\n            // glass + subtle gradient\n            \"inline-flex items-center gap-2 p-1 rounded-full\",\n            \"bg-white/6 dark:bg-white/3 backdrop-blur-sm\",\n            \"border border-white/6 dark:border-white/6\",\n          )}\n          style={{\n            // optional soft gradient overlay (works both light/dark)\n            background:\n              \"linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.00))\",\n          }}\n        >\n          {/* animated pill indicator */}\n          {indicator && (\n            <motion.div\n              layout\n              initial={false}\n              animate={{\n                left: indicator.left,\n                width: indicator.width,\n                // slight vertical expand when \"isExpanding\"\n                scaleY: isExpanding ? 1.06 : 1,\n                borderRadius: isExpanding ? 24 : 999,\n              }}\n              transition={{\n                type: \"spring\",\n                stiffness: 300,\n                damping: 28,\n              }}\n              className=\"absolute pointer-events-none top-1 bottom-1 rounded-full\"\n              style={{\n                // gradient + subtle glass fill + soft border & shadow\n                background:\n                  \"linear-gradient(90deg, rgba(124,58,237,0.18), rgba(6,182,212,0.14))\",\n                boxShadow: \"0 6px 20px rgba(16,24,40,0.08)\",\n                border: \"1px solid rgba(255,255,255,0.04)\",\n                left: indicator.left,\n                width: indicator.width,\n              }}\n            />\n          )}\n\n          {/* blur glow behind pill for extra depth */}\n          {indicator && (\n            <motion.div\n              layout\n              initial={false}\n              animate={{ left: indicator.left, width: indicator.width }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 28 }}\n              className=\"absolute pointer-events-none top-0 bottom-0 rounded-full filter blur-2xl opacity-40\"\n              style={{\n                background: \"linear-gradient(90deg,#7c3aed,#06b6d4)\",\n                mixBlendMode: \"screen\",\n                left: indicator.left,\n                width: indicator.width,\n              }}\n            />\n          )}\n\n          {/* TabsList using shadcn TabsTrigger */}\n          <TabsList className=\"relative flex gap-1 p-1\">\n            {items.map((it) => {\n              const isActive = it.value === value;\n              return (\n                <TabsTrigger\n                  key={it.value}\n                  value={it.value}\n                  ref={(el: HTMLButtonElement | null) =>\n                    (triggerRefs.current[it.value] = el)\n                  }\n                  className={cn(\n                    \"relative z-10 px-4 py-2 rounded-full text-sm font-medium transition-colors\",\n                    isActive\n                      ? \"text-white\"\n                      : \"text-foreground/80 hover:text-foreground\",\n                  )}\n                >\n                  {it.label}\n                </TabsTrigger>\n              );\n            })}\n          </TabsList>\n        </div>\n\n        {/* Panels */}\n        <div className=\"mt-4\">\n          {items.map((it) => (\n            <TabsContent key={it.value} value={it.value} className=\"p-2\">\n              {it.panel ?? null}\n            </TabsContent>\n          ))}\n        </div>\n      </Tabs>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/pill-morph-tabs.tsx"
    }
  ]
}