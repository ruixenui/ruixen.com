{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "three-dwall-calendar",
  "type": "registry:ui",
  "title": "Three D Wall Calendar",
  "description": "Interactive 3D wall-style calendar with tilt controls and drag interactions.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "card",
    "button",
    "input",
    "popover",
    "hover-card"
  ],
  "files": [
    {
      "path": "registry/ruixenui/three-dwall-calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport {\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardContent,\n} from \"@/components/ui/hover-card\";\nimport { Trash2 } from \"lucide-react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { startOfMonth, endOfMonth, eachDayOfInterval, format } from \"date-fns\";\n\nexport type CalendarEvent = {\n  id: string;\n  title: string;\n  date: string; // ISO\n};\n\ninterface ThreeDWallCalendarProps {\n  events: CalendarEvent[];\n  onAddEvent?: (e: CalendarEvent) => void;\n  onRemoveEvent?: (id: string) => void;\n  panelWidth?: number;\n  panelHeight?: number;\n  columns?: number;\n}\n\nexport function ThreeDWallCalendar({\n  events,\n  onAddEvent,\n  onRemoveEvent,\n  panelWidth = 160,\n  panelHeight = 120,\n  columns = 7,\n}: ThreeDWallCalendarProps) {\n  const [dateRef, setDateRef] = React.useState<Date>(new Date());\n  const [title, setTitle] = React.useState(\"\");\n  const [newDate, setNewDate] = React.useState(\"\");\n  const wallRef = React.useRef<HTMLDivElement | null>(null);\n\n  // 3D tilt state\n  const [tiltX, setTiltX] = React.useState(18);\n  const [tiltY, setTiltY] = React.useState(0);\n  const isDragging = React.useRef(false);\n  const dragStart = React.useRef<{ x: number; y: number } | null>(null);\n\n  // month days\n  const days = eachDayOfInterval({\n    start: startOfMonth(dateRef),\n    end: endOfMonth(dateRef),\n  });\n\n  const eventsForDay = (d: Date) =>\n    events.filter(\n      (ev) =>\n        format(new Date(ev.date), \"yyyy-MM-dd\") === format(d, \"yyyy-MM-dd\"),\n    );\n\n  // Add event handler\n  const handleAdd = () => {\n    if (!title.trim() || !newDate) return;\n    onAddEvent?.({\n      id: uuidv4(),\n      title: title.trim(),\n      date: new Date(newDate).toISOString(),\n    });\n    setTitle(\"\");\n    setNewDate(\"\");\n  };\n\n  // wheel tilt\n  const onWheel = (e: React.WheelEvent) => {\n    setTiltX((t) => Math.max(0, Math.min(50, t + e.deltaY * 0.02)));\n    setTiltY((t) => Math.max(-45, Math.min(45, t + e.deltaX * 0.05)));\n  };\n\n  // drag tilt\n  const onPointerDown = (e: React.PointerEvent) => {\n    isDragging.current = true;\n    dragStart.current = { x: e.clientX, y: e.clientY };\n    (e.currentTarget as Element).setPointerCapture(e.pointerId); // ✅ Correct element\n  };\n\n  const onPointerMove = (e: React.PointerEvent) => {\n    if (!isDragging.current || !dragStart.current) return;\n    const dx = e.clientX - dragStart.current.x;\n    const dy = e.clientY - dragStart.current.y;\n    setTiltY((t) => Math.max(-60, Math.min(60, t + dx * 0.1)));\n    setTiltX((t) => Math.max(0, Math.min(60, t - dy * 0.1)));\n    dragStart.current = { x: e.clientX, y: e.clientY };\n  };\n  const onPointerUp = () => {\n    isDragging.current = false;\n    dragStart.current = null;\n  };\n\n  const gap = 12;\n  const rowCount = Math.ceil(days.length / columns);\n  const wallCenterRow = (rowCount - 1) / 2;\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex gap-2 items-center\">\n        <Button\n          onClick={() =>\n            setDateRef((d) => new Date(d.getFullYear(), d.getMonth() - 1, 1))\n          }\n        >\n          Prev Month\n        </Button>\n        <div className=\"font-semibold\">{format(dateRef, \"MMMM yyyy\")}</div>\n        <Button\n          onClick={() =>\n            setDateRef((d) => new Date(d.getFullYear(), d.getMonth() + 1, 1))\n          }\n        >\n          Next Month\n        </Button>\n      </div>\n\n      {/* Wall container */}\n      <div\n        ref={wallRef}\n        onWheel={onWheel}\n        onPointerDown={onPointerDown}\n        onPointerMove={onPointerMove}\n        onPointerUp={onPointerUp}\n        onPointerCancel={onPointerUp}\n        className=\"w-full overflow-auto\"\n        style={{ perspective: 1200 }}\n      >\n        <div\n          className=\"mx-auto\"\n          style={{\n            width: columns * (panelWidth + gap),\n            transformStyle: \"preserve-3d\",\n            transform: `rotateX(${tiltX}deg) rotateY(${tiltY}deg)`,\n            transition: \"transform 120ms linear\",\n          }}\n        >\n          <div\n            className=\"relative\"\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: `repeat(${columns}, ${panelWidth}px)`,\n              gridAutoRows: `${panelHeight}px`,\n              gap: `${gap}px`,\n              transformStyle: \"preserve-3d\",\n              padding: gap,\n            }}\n          >\n            {days.map((day, idx) => {\n              const row = Math.floor(idx / columns);\n              const rowOffset = row - wallCenterRow;\n              const z = Math.max(-80, 40 - Math.abs(rowOffset) * 20);\n              const dayEvents = eventsForDay(day);\n\n              return (\n                <div\n                  key={day.toISOString()}\n                  className=\"relative\"\n                  style={{\n                    transform: `translateZ(${z}px)`,\n                    zIndex: Math.round(100 - Math.abs(rowOffset)),\n                  }}\n                >\n                  <Card className=\"h-full overflow-visible\">\n                    <CardContent className=\"p-3 h-full flex flex-col\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"text-xs font-medium\">\n                          {format(day, \"d\")}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {format(day, \"EEE\")}\n                        </div>\n                      </div>\n\n                      {/* events */}\n                      <div className=\"relative mt-2 flex-1\">\n                        {dayEvents.map((ev, i) => {\n                          const left = 8 + ((i * 34) % (panelWidth - 40));\n                          const top =\n                            8 + Math.floor((i * 34) / (panelWidth - 40)) * 28;\n                          return (\n                            <Popover key={ev.id}>\n                              <PopoverTrigger asChild>\n                                <HoverCard>\n                                  <HoverCardTrigger asChild>\n                                    <div\n                                      className=\"absolute w-7 h-7 rounded-full bg-blue-500 dark:bg-blue-600 flex items-center justify-center text-white text-[10px] cursor-pointer shadow\"\n                                      style={{\n                                        left,\n                                        top,\n                                        transform: `translateZ(20px)`,\n                                      }}\n                                    >\n                                      •\n                                    </div>\n                                  </HoverCardTrigger>\n                                  <HoverCardContent className=\"text-xs font-medium\">\n                                    {ev.title}\n                                  </HoverCardContent>\n                                </HoverCard>\n                              </PopoverTrigger>\n                              <PopoverContent className=\"w-48\">\n                                <Card>\n                                  <CardContent className=\"flex justify-between items-center p-2 text-sm\">\n                                    <div>\n                                      <div className=\"font-medium\">\n                                        {ev.title}\n                                      </div>\n                                      <div className=\"text-xs text-muted-foreground\">\n                                        {format(new Date(ev.date), \"PPP p\")}\n                                      </div>\n                                    </div>\n                                    {onRemoveEvent && (\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"icon\"\n                                        className=\"h-6 w-6\"\n                                        onClick={() => onRemoveEvent(ev.id)}\n                                      >\n                                        <Trash2 className=\"h-4 w-4 text-red-500\" />\n                                      </Button>\n                                    )}\n                                  </CardContent>\n                                </Card>\n                              </PopoverContent>\n                            </Popover>\n                          );\n                        })}\n                      </div>\n\n                      <div className=\"mt-2 text-xs text-muted-foreground\">\n                        {dayEvents.length} event(s)\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Add event form */}\n      <div className=\"flex gap-2 items-center\">\n        <Input\n          placeholder=\"Event title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <Input\n          type=\"date\"\n          value={newDate}\n          onChange={(e) => setNewDate(e.target.value)}\n        />\n        <Button onClick={handleAdd}>Add Event</Button>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/three-dwall-calendar.tsx"
    }
  ]
}