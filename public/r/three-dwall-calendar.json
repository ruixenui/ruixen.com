{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "three-dwall-calendar",
  "type": "registry:ui",
  "title": "Three D Wall Calendar",
  "description": "Interactive 3D wall-style calendar with tilt controls and drag interactions.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "card",
    "button",
    "input",
    "popover",
    "hover-card"
  ],
  "files": [
    {
      "path": "registry/ruixenui/three-dwall-calendar.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Card, CardContent } from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\"\r\nimport { HoverCard, HoverCardTrigger, HoverCardContent } from \"@/components/ui/hover-card\"\r\nimport { Trash2 } from \"lucide-react\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport { startOfMonth, endOfMonth, eachDayOfInterval, format } from \"date-fns\"\r\n\r\nexport type CalendarEvent = {\r\n  id: string\r\n  title: string\r\n  date: string // ISO\r\n}\r\n\r\ninterface ThreeDWallCalendarProps {\r\n  events: CalendarEvent[]\r\n  onAddEvent?: (e: CalendarEvent) => void\r\n  onRemoveEvent?: (id: string) => void\r\n  panelWidth?: number\r\n  panelHeight?: number\r\n  columns?: number\r\n}\r\n\r\nexport function ThreeDWallCalendar({\r\n  events,\r\n  onAddEvent,\r\n  onRemoveEvent,\r\n  panelWidth = 160,\r\n  panelHeight = 120,\r\n  columns = 7,\r\n}: ThreeDWallCalendarProps) {\r\n  const [dateRef, setDateRef] = React.useState<Date>(new Date())\r\n  const [title, setTitle] = React.useState(\"\")\r\n  const [newDate, setNewDate] = React.useState(\"\")\r\n  const wallRef = React.useRef<HTMLDivElement | null>(null)\r\n\r\n  // 3D tilt state\r\n  const [tiltX, setTiltX] = React.useState(18)\r\n  const [tiltY, setTiltY] = React.useState(0)\r\n  const isDragging = React.useRef(false)\r\n  const dragStart = React.useRef<{ x: number; y: number } | null>(null)\r\n\r\n  // month days\r\n  const days = eachDayOfInterval({\r\n    start: startOfMonth(dateRef),\r\n    end: endOfMonth(dateRef),\r\n  })\r\n\r\n  const eventsForDay = (d: Date) =>\r\n    events.filter((ev) => format(new Date(ev.date), \"yyyy-MM-dd\") === format(d, \"yyyy-MM-dd\"))\r\n\r\n  // Add event handler\r\n  const handleAdd = () => {\r\n    if (!title.trim() || !newDate) return\r\n    onAddEvent?.({\r\n      id: uuidv4(),\r\n      title: title.trim(),\r\n      date: new Date(newDate).toISOString(),\r\n    })\r\n    setTitle(\"\")\r\n    setNewDate(\"\")\r\n  }\r\n\r\n  // wheel tilt\r\n  const onWheel = (e: React.WheelEvent) => {\r\n    setTiltX((t) => Math.max(0, Math.min(50, t + e.deltaY * 0.02)))\r\n    setTiltY((t) => Math.max(-45, Math.min(45, t + e.deltaX * 0.05)))\r\n  }\r\n\r\n  // drag tilt\r\n  const onPointerDown = (e: React.PointerEvent) => {\r\n    isDragging.current = true\r\n    dragStart.current = { x: e.clientX, y: e.clientY }\r\n    ;(e.currentTarget as Element).setPointerCapture(e.pointerId) // ✅ Correct element\r\n  }\r\n\r\n  const onPointerMove = (e: React.PointerEvent) => {\r\n    if (!isDragging.current || !dragStart.current) return\r\n    const dx = e.clientX - dragStart.current.x\r\n    const dy = e.clientY - dragStart.current.y\r\n    setTiltY((t) => Math.max(-60, Math.min(60, t + dx * 0.1)))\r\n    setTiltX((t) => Math.max(0, Math.min(60, t - dy * 0.1)))\r\n    dragStart.current = { x: e.clientX, y: e.clientY }\r\n  }\r\n  const onPointerUp = () => {\r\n    isDragging.current = false\r\n    dragStart.current = null\r\n  }\r\n\r\n  const gap = 12\r\n  const rowCount = Math.ceil(days.length / columns)\r\n  const wallCenterRow = (rowCount - 1) / 2\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex gap-2 items-center\">\r\n        <Button onClick={() => setDateRef((d) => new Date(d.getFullYear(), d.getMonth() - 1, 1))}>\r\n          Prev Month\r\n        </Button>\r\n        <div className=\"font-semibold\">{format(dateRef, \"MMMM yyyy\")}</div>\r\n        <Button onClick={() => setDateRef((d) => new Date(d.getFullYear(), d.getMonth() + 1, 1))}>\r\n          Next Month\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Wall container */}\r\n      <div\r\n        ref={wallRef}\r\n        onWheel={onWheel}\r\n        onPointerDown={onPointerDown}\r\n        onPointerMove={onPointerMove}\r\n        onPointerUp={onPointerUp}\r\n        onPointerCancel={onPointerUp}\r\n        className=\"w-full overflow-auto\"\r\n        style={{ perspective: 1200 }}\r\n      >\r\n        <div\r\n          className=\"mx-auto\"\r\n          style={{\r\n            width: columns * (panelWidth + gap),\r\n            transformStyle: \"preserve-3d\",\r\n            transform: `rotateX(${tiltX}deg) rotateY(${tiltY}deg)`,\r\n            transition: \"transform 120ms linear\",\r\n          }}\r\n        >\r\n          <div\r\n            className=\"relative\"\r\n            style={{\r\n              display: \"grid\",\r\n              gridTemplateColumns: `repeat(${columns}, ${panelWidth}px)`,\r\n              gridAutoRows: `${panelHeight}px`,\r\n              gap: `${gap}px`,\r\n              transformStyle: \"preserve-3d\",\r\n              padding: gap,\r\n            }}\r\n          >\r\n            {days.map((day, idx) => {\r\n              const row = Math.floor(idx / columns)\r\n              const rowOffset = row - wallCenterRow\r\n              const z = Math.max(-80, 40 - Math.abs(rowOffset) * 20)\r\n              const dayEvents = eventsForDay(day)\r\n\r\n              return (\r\n                <div\r\n                  key={day.toISOString()}\r\n                  className=\"relative\"\r\n                  style={{\r\n                    transform: `translateZ(${z}px)`,\r\n                    zIndex: Math.round(100 - Math.abs(rowOffset)),\r\n                  }}\r\n                >\r\n                  <Card className=\"h-full overflow-visible\">\r\n                    <CardContent className=\"p-3 h-full flex flex-col\">\r\n                      <div className=\"flex justify-between items-start\">\r\n                        <div className=\"text-xs font-medium\">{format(day, \"d\")}</div>\r\n                        <div className=\"text-xs text-muted-foreground\">{format(day, \"EEE\")}</div>\r\n                      </div>\r\n\r\n                      {/* events */}\r\n                      <div className=\"relative mt-2 flex-1\">\r\n                        {dayEvents.map((ev, i) => {\r\n                          const left = 8 + (i * 34) % (panelWidth - 40)\r\n                          const top = 8 + Math.floor((i * 34) / (panelWidth - 40)) * 28\r\n                          return (\r\n                            <Popover key={ev.id}>\r\n                              <PopoverTrigger asChild>\r\n                                <HoverCard>\r\n                                  <HoverCardTrigger asChild>\r\n                                    <div\r\n                                      className=\"absolute w-7 h-7 rounded-full bg-blue-500 dark:bg-blue-600 flex items-center justify-center text-white text-[10px] cursor-pointer shadow\"\r\n                                      style={{ left, top, transform: `translateZ(20px)` }}\r\n                                    >\r\n                                      •\r\n                                    </div>\r\n                                  </HoverCardTrigger>\r\n                                  <HoverCardContent className=\"text-xs font-medium\">\r\n                                    {ev.title}\r\n                                  </HoverCardContent>\r\n                                </HoverCard>\r\n                              </PopoverTrigger>\r\n                              <PopoverContent className=\"w-48\">\r\n                                <Card>\r\n                                  <CardContent className=\"flex justify-between items-center p-2 text-sm\">\r\n                                    <div>\r\n                                      <div className=\"font-medium\">{ev.title}</div>\r\n                                      <div className=\"text-xs text-muted-foreground\">\r\n                                        {format(new Date(ev.date), \"PPP p\")}\r\n                                      </div>\r\n                                    </div>\r\n                                    {onRemoveEvent && (\r\n                                      <Button\r\n                                        variant=\"ghost\"\r\n                                        size=\"icon\"\r\n                                        className=\"h-6 w-6\"\r\n                                        onClick={() => onRemoveEvent(ev.id)}\r\n                                      >\r\n                                        <Trash2 className=\"h-4 w-4 text-red-500\" />\r\n                                      </Button>\r\n                                    )}\r\n                                  </CardContent>\r\n                                </Card>\r\n                              </PopoverContent>\r\n                            </Popover>\r\n                          )\r\n                        })}\r\n                      </div>\r\n\r\n                      <div className=\"mt-2 text-xs text-muted-foreground\">\r\n                        {dayEvents.length} event(s)\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Add event form */}\r\n      <div className=\"flex gap-2 items-center\">\r\n        <Input placeholder=\"Event title\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n        <Input type=\"date\" value={newDate} onChange={(e) => setNewDate(e.target.value)} />\r\n        <Button onClick={handleAdd}>Add Event</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/three-dwall-calendar.tsx"
    }
  ]
}