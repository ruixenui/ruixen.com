{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown-range-date-picker",
  "type": "registry:ui",
  "title": "Dropdown Range Date Picker",
  "description": "A range date picker with year/month dropdowns in a popover interface.",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "calendar",
    "button",
    "popover",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/dropdown-range-date-picker.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { format } from \"date-fns\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Calendar as CalendarIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport type DropdownRangeDatePickerProps = {\n  selectedRange?: { from?: Date; to?: Date };\n  onChange?: (range: { from?: Date; to?: Date } | undefined) => void;\n  minYear?: number;\n  maxYear?: number;\n  monthFormat?: string;\n  label?: string;\n  className?: string;\n  calendarClassName?: string;\n  dropdownClassName?: string;\n  clearable?: boolean;\n};\n\nexport function DropdownRangeDatePicker({\n  selectedRange,\n  onChange,\n  minYear = 1900,\n  maxYear = new Date().getFullYear() + 10,\n  monthFormat = \"MMMM\",\n  label = \"Pick a date range\",\n  className,\n  calendarClassName,\n  dropdownClassName,\n  clearable = true,\n}: DropdownRangeDatePickerProps) {\n  const today = new Date();\n  const [selected, setSelected] = React.useState(selectedRange);\n  const [month, setMonth] = React.useState(today.getMonth());\n  const [year, setYear] = React.useState(today.getFullYear());\n\n  React.useEffect(() => {\n    setSelected(selectedRange);\n  }, [selectedRange]);\n\n  const displayMonth = new Date(year, month, 1);\n\n  const handleSelect = (range: { from?: Date; to?: Date } | undefined) => {\n    setSelected(range);\n    onChange?.(range);\n  };\n\n  const formattedValue = selected?.from\n    ? selected.to\n      ? `${format(selected.from, \"PPP\")} - ${format(selected.to, \"PPP\")}`\n      : format(selected.from, \"PPP\")\n    : label;\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !selected && \"text-muted-foreground\",\n            className,\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4 shrink-0\" />\n          <span className=\"truncate overflow-hidden\">{formattedValue}</span>\n        </Button>\n      </PopoverTrigger>\n\n      <PopoverContent\n        className={cn(\"w-auto p-4\", dropdownClassName)}\n        align=\"start\"\n      >\n        <div className=\"space-y-4\">\n          {/* Dropdowns */}\n          <div className=\"flex gap-2\">\n            <Select\n              value={year.toString()}\n              onValueChange={(val) => setYear(Number(val))}\n            >\n              <SelectTrigger className=\"w-[120px]\">\n                <SelectValue placeholder=\"Year\" />\n              </SelectTrigger>\n              <SelectContent>\n                {Array.from(\n                  { length: maxYear - minYear + 1 },\n                  (_, i) => minYear + i,\n                ).map((y) => (\n                  <SelectItem key={y} value={y.toString()}>\n                    {y}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select\n              value={month.toString()}\n              onValueChange={(val) => setMonth(Number(val))}\n            >\n              <SelectTrigger className=\"w-[140px]\">\n                <SelectValue placeholder=\"Month\" />\n              </SelectTrigger>\n              <SelectContent>\n                {Array.from({ length: 12 }, (_, i) => (\n                  <SelectItem key={i} value={i.toString()}>\n                    {format(new Date(2000, i, 1), monthFormat)}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Calendar */}\n          <Calendar\n            mode=\"range\"\n            selected={selected as { from: Date; to?: Date } | undefined}\n            onSelect={handleSelect}\n            month={displayMonth}\n            onMonthChange={(date) => {\n              setMonth(date.getMonth());\n              setYear(date.getFullYear());\n            }}\n            className={cn(\"rounded-md border\", calendarClassName)}\n          />\n\n          {/* Footer */}\n          <div className=\"flex justify-between pt-2\">\n            {clearable && (\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => handleSelect(undefined)}\n                disabled={!selected?.from}\n              >\n                Clear\n              </Button>\n            )}\n            <Button\n              size=\"sm\"\n              onClick={() => console.log(\"Confirmed:\", selected)}\n              disabled={!selected?.from}\n            >\n              Apply\n            </Button>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/dropdown-range-date-picker.tsx"
    }
  ]
}