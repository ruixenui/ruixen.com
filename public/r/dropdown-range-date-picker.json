{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown-range-date-picker",
  "type": "registry:ui",
  "title": "Dropdown Range Date Picker",
  "description": "A range date picker with year/month dropdowns in a popover interface.",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "calendar",
    "button",
    "popover",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/dropdown-range-date-picker.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { format } from \"date-fns\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n} from \"@/components/ui/popover\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Calendar as CalendarIcon } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport type DropdownRangeDatePickerProps = {\r\n  selectedRange?: { from?: Date; to?: Date };\r\n  onChange?: (range: { from?: Date; to?: Date } | undefined) => void;\r\n  minYear?: number;\r\n  maxYear?: number;\r\n  monthFormat?: string;\r\n  label?: string;\r\n  className?: string;\r\n  calendarClassName?: string;\r\n  dropdownClassName?: string;\r\n  clearable?: boolean;\r\n};\r\n\r\nexport function DropdownRangeDatePicker({\r\n  selectedRange,\r\n  onChange,\r\n  minYear = 1900,\r\n  maxYear = new Date().getFullYear() + 10,\r\n  monthFormat = \"MMMM\",\r\n  label = \"Pick a date range\",\r\n  className,\r\n  calendarClassName,\r\n  dropdownClassName,\r\n  clearable = true,\r\n}: DropdownRangeDatePickerProps) {\r\n  const today = new Date();\r\n  const [selected, setSelected] = React.useState(selectedRange);\r\n  const [month, setMonth] = React.useState(today.getMonth());\r\n  const [year, setYear] = React.useState(today.getFullYear());\r\n\r\n  React.useEffect(() => {\r\n    setSelected(selectedRange);\r\n  }, [selectedRange]);\r\n\r\n  const displayMonth = new Date(year, month, 1);\r\n\r\n  const handleSelect = (range: { from?: Date; to?: Date } | undefined) => {\r\n    setSelected(range);\r\n    onChange?.(range);\r\n  };\r\n\r\n  const formattedValue = selected?.from\r\n    ? selected.to\r\n      ? `${format(selected.from, \"PPP\")} - ${format(selected.to, \"PPP\")}`\r\n      : format(selected.from, \"PPP\")\r\n    : label;\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          className={cn(\r\n            \"w-[280px] justify-start text-left font-normal\",\r\n            !selected && \"text-muted-foreground\",\r\n            className\r\n          )}\r\n        >\r\n          <CalendarIcon className=\"mr-2 h-4 w-4 shrink-0\" />\r\n          <span className=\"truncate overflow-hidden\">{formattedValue}</span>\r\n        </Button>\r\n      </PopoverTrigger>\r\n\r\n      <PopoverContent className={cn(\"w-auto p-4\", dropdownClassName)} align=\"start\">\r\n        <div className=\"space-y-4\">\r\n          {/* Dropdowns */}\r\n          <div className=\"flex gap-2\">\r\n            <Select value={year.toString()} onValueChange={(val) => setYear(Number(val))}>\r\n              <SelectTrigger className=\"w-[120px]\">\r\n                <SelectValue placeholder=\"Year\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {Array.from({ length: maxYear - minYear + 1 }, (_, i) => minYear + i).map(\r\n                  (y) => (\r\n                    <SelectItem key={y} value={y.toString()}>\r\n                      {y}\r\n                    </SelectItem>\r\n                  )\r\n                )}\r\n              </SelectContent>\r\n            </Select>\r\n\r\n            <Select value={month.toString()} onValueChange={(val) => setMonth(Number(val))}>\r\n              <SelectTrigger className=\"w-[140px]\">\r\n                <SelectValue placeholder=\"Month\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {Array.from({ length: 12 }, (_, i) => (\r\n                  <SelectItem key={i} value={i.toString()}>\r\n                    {format(new Date(2000, i, 1), monthFormat)}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {/* Calendar */}\r\n          <Calendar\r\n            mode=\"range\"\r\n            selected={selected as { from: Date; to?: Date } | undefined}\r\n            onSelect={handleSelect}\r\n            month={displayMonth}\r\n            onMonthChange={(date) => {\r\n              setMonth(date.getMonth());\r\n              setYear(date.getFullYear());\r\n            }}\r\n            className={cn(\"rounded-md border\", calendarClassName)}\r\n          />\r\n\r\n          {/* Footer */}\r\n          <div className=\"flex justify-between pt-2\">\r\n            {clearable && (\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"ghost\"\r\n                onClick={() => handleSelect(undefined)}\r\n                disabled={!selected?.from}\r\n              >\r\n                Clear\r\n              </Button>\r\n            )}\r\n            <Button\r\n              size=\"sm\"\r\n              onClick={() => console.log(\"Confirmed:\", selected)}\r\n              disabled={!selected?.from}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/dropdown-range-date-picker.tsx"
    }
  ]
}