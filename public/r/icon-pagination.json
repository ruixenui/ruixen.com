{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icon-pagination",
  "type": "registry:ui",
  "title": "Icon Pagination",
  "description": "Pagination component with colorful icon indicators and tooltip labels.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/icon-pagination.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface PaginationItem {\n  id: number;\n  icon: React.ComponentType<{ className?: string }>;\n  label: string;\n}\n\ninterface IconPaginationProps {\n  totalPages?: number;\n  className?: string;\n  maxVisible?: number; // max icons to show around active\n  onChange?: (page: number) => void; // callback for active page\n}\n\nexport default function IconPagination({\n  totalPages = 200,\n  className,\n  maxVisible = 5,\n  onChange,\n}: IconPaginationProps) {\n  const [active, setActive] = useState(0);\n\n  useEffect(() => {\n    if (onChange) onChange(active);\n  }, [active, onChange]);\n\n  const prevPage = () => setActive((p) => Math.max(p - 1, 0));\n  const nextPage = () => setActive((p) => Math.min(p + 1, totalPages - 1));\n\n  // Generate default icons (colored squares for demo)\n  const getIconItem = (id: number) => ({\n    id,\n    icon: () => (\n      <div\n        className={cn(\n          \"w-5 h-5 rounded\",\n          id % 5 === 0\n            ? \"bg-red-400\"\n            : id % 5 === 1\n              ? \"bg-green-400\"\n              : id % 5 === 2\n                ? \"bg-blue-400\"\n                : id % 5 === 3\n                  ? \"bg-yellow-400\"\n                  : \"bg-purple-400\",\n        )}\n      />\n    ),\n    label: `Page ${id + 1}`,\n  });\n\n  // Determine visible pages\n  const getVisiblePages = () => {\n    const pages = [];\n    const half = Math.floor(maxVisible / 2);\n    let start = Math.max(active - half, 1);\n    let end = Math.min(active + half, totalPages - 2);\n\n    if (active - half <= 1) end = maxVisible - 1;\n    if (active + half >= totalPages - 2) start = totalPages - maxVisible;\n\n    start = Math.max(start, 1);\n    end = Math.min(end, totalPages - 2);\n\n    pages.push(0); // first page\n    if (start > 1) pages.push(-1); // ellipsis\n\n    for (let i = start; i <= end; i++) pages.push(i);\n\n    if (end < totalPages - 2) pages.push(-1); // ellipsis\n    if (totalPages > 1) pages.push(totalPages - 1); // last page\n\n    return pages;\n  };\n\n  const visiblePages = getVisiblePages();\n\n  return (\n    <div className={cn(\"flex items-center gap-2 p-4 flex-wrap\", className)}>\n      {/* Previous arrow */}\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={prevPage}\n        disabled={active === 0}\n        className=\"text-gray-400 hover:text-primary disabled:opacity-40 transition-colors\"\n      >\n        <ChevronLeft className=\"w-5 h-5\" />\n      </Button>\n\n      <TooltipProvider delayDuration={100}>\n        {visiblePages.map((p, idx) =>\n          p === -1 ? (\n            <div\n              key={`dots-${idx}`}\n              className=\"w-6 h-6 flex items-center justify-center text-gray-400 select-none\"\n            >\n              ...\n            </div>\n          ) : (\n            <Tooltip key={p}>\n              <TooltipTrigger asChild>\n                <Button\n                  variant={active === p ? \"default\" : \"ghost\"}\n                  size=\"icon\"\n                  onClick={() => setActive(p)}\n                  className={cn(\n                    \"w-10 h-10 rounded-full flex items-center justify-center transition-transform\",\n                    active === p\n                      ? \"scale-110 bg-primary text-white border border-primary\"\n                      : \"bg-gray-200 dark:bg-gray-700\",\n                  )}\n                >\n                  {getIconItem(p).icon()}\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent side=\"top\" className=\"text-xs\">\n                {getIconItem(p).label}\n              </TooltipContent>\n            </Tooltip>\n          ),\n        )}\n      </TooltipProvider>\n\n      {/* Next arrow */}\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={nextPage}\n        disabled={active === totalPages - 1}\n        className=\"text-gray-400 hover:text-primary disabled:opacity-40 transition-colors\"\n      >\n        <ChevronRight className=\"w-5 h-5\" />\n      </Button>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/icon-pagination.tsx"
    }
  ]
}