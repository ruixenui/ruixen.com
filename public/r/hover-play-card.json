{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hover-play-card",
  "type": "registry:ui",
  "title": "Hover Play Card",
  "description": "A video card that plays on hover with manual play/pause controls.",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/ruixenui/hover-play-card.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Pause } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ntype HoverPlayCardProps = {\n  src: string;\n  poster?: string;\n  className?: string;\n  loop?: boolean;\n  mutedOnHover?: boolean; // default true to satisfy autoplay policy\n};\n\nexport default function HoverPlayCard({\n  src,\n  poster,\n  className,\n  loop = false,\n  mutedOnHover = true,\n}: HoverPlayCardProps) {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const [isHovering, setIsHovering] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [userStarted, setUserStarted] = useState(false); // true when user clicked play\n  const [prevMuted, setPrevMuted] = useState<boolean | null>(null);\n\n  // Play muted on hover (if allowed). Pause on leave.\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    let ignore = false;\n\n    const doPlayMuted = async () => {\n      if (!video) return;\n      // Save previous muted state first time\n      if (prevMuted === null) setPrevMuted(video.muted);\n\n      if (mutedOnHover) {\n        video.muted = true;\n      }\n      try {\n        await video.play();\n        if (!ignore) setIsPlaying(true);\n      } catch {\n        // autoplay blocked (shouldn't if muted) — ignore\n        if (!ignore) setIsPlaying(false);\n      }\n    };\n\n    const doPause = () => {\n      if (!video) return;\n      video.pause();\n      setIsPlaying(false);\n      // restore mute state only if user didn't start playback manually\n      if (!userStarted && prevMuted !== null) {\n        video.muted = prevMuted;\n      }\n    };\n\n    if (isHovering && !userStarted) {\n      // only auto play on hover when user hasn't manually started playback\n      void doPlayMuted();\n    } else if (!isHovering && !userStarted) {\n      doPause();\n    }\n\n    return () => {\n      ignore = true;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isHovering, mutedOnHover, userStarted]);\n\n  // If user clicks play icon: toggle playback and treat as user gesture\n  const handleIconClick = async () => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    // If not playing, user-initiated play: unmute (restore prevMuted false) so user hears audio\n    if (!isPlaying) {\n      // Mark that user started explicit playback\n      setUserStarted(true);\n      // restore to unmuted so clicking plays with sound\n      video.muted = false;\n      setPrevMuted(false);\n      try {\n        await video.play();\n        setIsPlaying(true);\n      } catch (err) {\n        // if play fails, keep state consistent\n        console.error(\"Play failed:\", err);\n        setIsPlaying(false);\n      }\n    } else {\n      // pause on click\n      video.pause();\n      setIsPlaying(false);\n    }\n  };\n\n  // keep visual play state in sync with native events (in case video ends or is paused externally)\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n    const onPlay = () => setIsPlaying(true);\n    const onPause = () => setIsPlaying(false);\n    const onEnded = () => {\n      setIsPlaying(false);\n      setUserStarted(false); // allow hover autoplay after end if desired\n    };\n\n    video.addEventListener(\"play\", onPlay);\n    video.addEventListener(\"pause\", onPause);\n    video.addEventListener(\"ended\", onEnded);\n\n    return () => {\n      video.removeEventListener(\"play\", onPlay);\n      video.removeEventListener(\"pause\", onPause);\n      video.removeEventListener(\"ended\", onEnded);\n    };\n  }, []);\n\n  return (\n    <div\n      className={cn(\n        \"relative rounded-xl overflow-hidden shadow-sm group\",\n        className,\n      )}\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => setIsHovering(false)}\n    >\n      <video\n        ref={videoRef}\n        src={src}\n        poster={poster}\n        loop={loop}\n        playsInline\n        // do not set autoplay here — we control playback on hover/click\n        className=\"w-full h-full max-w-xl object-cover\"\n      />\n\n      {/* Overlay: Play/Pause button (always visible but subtle) */}\n      <AnimatePresence>\n        {/* show when not playing OR when hovered (to allow pause by clicking) */}\n        {(isHovering || !isPlaying) && (\n          <motion.div\n            key=\"overlay\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 flex items-center justify-center pointer-events-none\"\n          >\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleIconClick();\n              }}\n              className=\"pointer-events-auto bg-black/20 hover:bg-black/40 text-white rounded-full w-16 h-16\"\n              aria-label={isPlaying ? \"Pause video\" : \"Play video\"}\n            >\n              {isPlaying ? (\n                <Pause className=\"w-8 h-8\" />\n              ) : (\n                <Play className=\"w-8 h-8\" />\n              )}\n            </Button>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* small subtle status badge bottom-left */}\n      <div className=\"absolute left-3 bottom-3 text-xs text-muted-foreground bg-black/20 px-2 py-1 rounded-full\">\n        {isPlaying ? \"Playing\" : \"Paused\"}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/hover-play-card.tsx"
    }
  ]
}