{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hover-play-card",
  "type": "registry:ui",
  "title": "Hover Play Card",
  "description": "A video card that plays on hover with manual play/pause controls.",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/ruixenui/hover-play-card.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Play, Pause } from \"lucide-react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype HoverPlayCardProps = {\r\n  src: string;\r\n  poster?: string;\r\n  className?: string;\r\n  loop?: boolean;\r\n  mutedOnHover?: boolean; // default true to satisfy autoplay policy\r\n};\r\n\r\nexport default function HoverPlayCard({\r\n  src,\r\n  poster,\r\n  className,\r\n  loop = false,\r\n  mutedOnHover = true,\r\n}: HoverPlayCardProps) {\r\n  const videoRef = useRef<HTMLVideoElement | null>(null);\r\n  const [isHovering, setIsHovering] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [userStarted, setUserStarted] = useState(false); // true when user clicked play\r\n  const [prevMuted, setPrevMuted] = useState<boolean | null>(null);\r\n\r\n  // Play muted on hover (if allowed). Pause on leave.\r\n  useEffect(() => {\r\n    const video = videoRef.current;\r\n    if (!video) return;\r\n\r\n    let ignore = false;\r\n\r\n    const doPlayMuted = async () => {\r\n      if (!video) return;\r\n      // Save previous muted state first time\r\n      if (prevMuted === null) setPrevMuted(video.muted);\r\n\r\n      if (mutedOnHover) {\r\n        video.muted = true;\r\n      }\r\n      try {\r\n        await video.play();\r\n        if (!ignore) setIsPlaying(true);\r\n      } catch {\r\n        // autoplay blocked (shouldn't if muted) — ignore\r\n        if (!ignore) setIsPlaying(false);\r\n      }\r\n    };\r\n\r\n    const doPause = () => {\r\n      if (!video) return;\r\n      video.pause();\r\n      setIsPlaying(false);\r\n      // restore mute state only if user didn't start playback manually\r\n      if (!userStarted && prevMuted !== null) {\r\n        video.muted = prevMuted;\r\n      }\r\n    };\r\n\r\n    if (isHovering && !userStarted) {\r\n      // only auto play on hover when user hasn't manually started playback\r\n      void doPlayMuted();\r\n    } else if (!isHovering && !userStarted) {\r\n      doPause();\r\n    }\r\n\r\n    return () => {\r\n      ignore = true;\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isHovering, mutedOnHover, userStarted]);\r\n\r\n  // If user clicks play icon: toggle playback and treat as user gesture\r\n  const handleIconClick = async () => {\r\n    const video = videoRef.current;\r\n    if (!video) return;\r\n\r\n    // If not playing, user-initiated play: unmute (restore prevMuted false) so user hears audio\r\n    if (!isPlaying) {\r\n      // Mark that user started explicit playback\r\n      setUserStarted(true);\r\n      // restore to unmuted so clicking plays with sound\r\n      video.muted = false;\r\n      setPrevMuted(false);\r\n      try {\r\n        await video.play();\r\n        setIsPlaying(true);\r\n      } catch (err) {\r\n        // if play fails, keep state consistent\r\n        console.error(\"Play failed:\", err);\r\n        setIsPlaying(false);\r\n      }\r\n    } else {\r\n      // pause on click\r\n      video.pause();\r\n      setIsPlaying(false);\r\n    }\r\n  };\r\n\r\n  // keep visual play state in sync with native events (in case video ends or is paused externally)\r\n  useEffect(() => {\r\n    const video = videoRef.current;\r\n    if (!video) return;\r\n    const onPlay = () => setIsPlaying(true);\r\n    const onPause = () => setIsPlaying(false);\r\n    const onEnded = () => {\r\n      setIsPlaying(false);\r\n      setUserStarted(false); // allow hover autoplay after end if desired\r\n    };\r\n\r\n    video.addEventListener(\"play\", onPlay);\r\n    video.addEventListener(\"pause\", onPause);\r\n    video.addEventListener(\"ended\", onEnded);\r\n\r\n    return () => {\r\n      video.removeEventListener(\"play\", onPlay);\r\n      video.removeEventListener(\"pause\", onPause);\r\n      video.removeEventListener(\"ended\", onEnded);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"relative rounded-xl overflow-hidden shadow-sm group\",\r\n        className,\r\n      )}\r\n      onMouseEnter={() => setIsHovering(true)}\r\n      onMouseLeave={() => setIsHovering(false)}\r\n    >\r\n      <video\r\n        ref={videoRef}\r\n        src={src}\r\n        poster={poster}\r\n        loop={loop}\r\n        playsInline\r\n        // do not set autoplay here — we control playback on hover/click\r\n        className=\"w-full h-full max-w-xl object-cover\"\r\n      />\r\n\r\n      {/* Overlay: Play/Pause button (always visible but subtle) */}\r\n      <AnimatePresence>\r\n        {/* show when not playing OR when hovered (to allow pause by clicking) */}\r\n        {(isHovering || !isPlaying) && (\r\n          <motion.div\r\n            key=\"overlay\"\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            className=\"absolute inset-0 flex items-center justify-center pointer-events-none\"\r\n          >\r\n            <Button\r\n              size=\"icon\"\r\n              variant=\"ghost\"\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                handleIconClick();\r\n              }}\r\n              className=\"pointer-events-auto bg-black/20 hover:bg-black/40 text-white rounded-full w-16 h-16\"\r\n              aria-label={isPlaying ? \"Pause video\" : \"Play video\"}\r\n            >\r\n              {isPlaying ? <Pause className=\"w-8 h-8\" /> : <Play className=\"w-8 h-8\" />}\r\n            </Button>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* small subtle status badge bottom-left */}\r\n      <div className=\"absolute left-3 bottom-3 text-xs text-muted-foreground bg-black/20 px-2 py-1 rounded-full\">\r\n        {isPlaying ? \"Playing\" : \"Paused\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/hover-play-card.tsx"
    }
  ]
}