{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-constellation-calendar",
  "type": "registry:ui",
  "title": "Event Constellation Calendar",
  "description": "Unique starfield-style calendar with constellation connections between events.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "card",
    "button",
    "popover",
    "input"
  ],
  "files": [
    {
      "path": "registry/ruixenui/event-constellation-calendar.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Card, CardContent } from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Trash2 } from \"lucide-react\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport {\r\n  startOfMonth,\r\n  endOfMonth,\r\n  eachDayOfInterval,\r\n  format,\r\n} from \"date-fns\"\r\n\r\nexport type CalendarEvent = {\r\n  id: string\r\n  title: string\r\n  date: string // ISO\r\n}\r\n\r\ninterface EventConstellationCalendarProps {\r\n  events: CalendarEvent[]\r\n  onAddEvent: (e: CalendarEvent) => void\r\n  onRemoveEvent?: (id: string) => void\r\n}\r\n\r\nexport function EventConstellationCalendar({\r\n  events,\r\n  onAddEvent,\r\n  onRemoveEvent,\r\n}: EventConstellationCalendarProps) {\r\n  const [dateRef, setDateRef] = React.useState(new Date())\r\n  const [title, setTitle] = React.useState(\"\")\r\n  const [newDate, setNewDate] = React.useState(\"\")\r\n\r\n  // get days in month\r\n  const days = eachDayOfInterval({\r\n    start: startOfMonth(dateRef),\r\n    end: endOfMonth(dateRef),\r\n  })\r\n\r\n  // filter events for given day\r\n  const eventsForDay = (d: Date) =>\r\n    events.filter(\r\n      (ev) => format(new Date(ev.date), \"yyyy-MM-dd\") === format(d, \"yyyy-MM-dd\")\r\n    )\r\n\r\n  const handleAdd = () => {\r\n    if (!title.trim() || !newDate) return\r\n    onAddEvent({\r\n      id: uuidv4(),\r\n      title: title.trim(),\r\n      date: new Date(newDate).toISOString(),\r\n    })\r\n    setTitle(\"\")\r\n    setNewDate(\"\")\r\n  }\r\n\r\n  // âœ… Keep stars inside container (with padding)\r\n  const getStarPosition = (dayIndex: number) => {\r\n    const angle = (dayIndex / days.length) * 2 * Math.PI\r\n    const radius = 100 + (dayIndex % 5) * 20 // smaller radius range\r\n    const centerX = 200\r\n    const centerY = 200\r\n    const padding = 20 // ensures no star goes outside box\r\n    const x = centerX + radius * Math.cos(angle)\r\n    const y = centerY + radius * Math.sin(angle)\r\n    return {\r\n      x: Math.min(400 - padding, Math.max(padding, x)),\r\n      y: Math.min(400 - padding, Math.max(padding, y)),\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4 flex flex-col items-center\">\r\n      {/* Month Navigation */}\r\n      <div className=\"flex gap-2 items-center\">\r\n        <Button\r\n          onClick={() =>\r\n            setDateRef((d) => new Date(d.getFullYear(), d.getMonth() - 1, 1))\r\n          }\r\n        >\r\n          Prev\r\n        </Button>\r\n        <div className=\"font-semibold\">{format(dateRef, \"MMMM yyyy\")}</div>\r\n        <Button\r\n          onClick={() =>\r\n            setDateRef((d) => new Date(d.getFullYear(), d.getMonth() + 1, 1))\r\n          }\r\n        >\r\n          Next\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Starfield (Constellation Map) */}\r\n      <div className=\"relative w-[400px] h-[400px] bg-neutral-900 dark:bg-neutral-950 rounded-lg overflow-hidden border border-neutral-700 dark:border-neutral-800\">\r\n        <svg\r\n          className=\"absolute inset-0 w-full h-full\"\r\n          style={{ pointerEvents: \"none\" }}\r\n        >\r\n          {days.map((day, idx) => {\r\n            const { x, y } = getStarPosition(idx)\r\n            const dayEvents = eventsForDay(day)\r\n            if (dayEvents.length === 0) return null\r\n\r\n            // connect to next day with events\r\n            const nextDay = days[idx + 1]\r\n            if (!nextDay) return null\r\n            const nextEvents = eventsForDay(nextDay)\r\n            if (nextEvents.length === 0) return null\r\n\r\n            const { x: nx, y: ny } = getStarPosition(idx + 1)\r\n\r\n            return (\r\n              <line\r\n                key={`line-${idx}`}\r\n                x1={x}\r\n                y1={y}\r\n                x2={nx}\r\n                y2={ny}\r\n                stroke=\"white\"\r\n                strokeWidth=\"1\"\r\n                opacity=\"0.4\"\r\n              />\r\n            )\r\n          })}\r\n        </svg>\r\n\r\n        {days.map((day, idx) => {\r\n          const { x, y } = getStarPosition(idx)\r\n          const dayEvents = eventsForDay(day)\r\n          const hasEvents = dayEvents.length > 0\r\n\r\n          return (\r\n            <Popover key={day.toISOString()}>\r\n              <PopoverTrigger asChild>\r\n                <div\r\n                  className={`absolute w-6 h-6 flex items-center justify-center rounded-full text-[10px] cursor-pointer transition-colors ${\r\n                    hasEvents\r\n                      ? \"bg-yellow-400 text-black shadow-lg\"\r\n                      : \"bg-neutral-500 text-white dark:bg-neutral-700 dark:text-neutral-200\"\r\n                  }`}\r\n                  style={{\r\n                    left: x,\r\n                    top: y,\r\n                    transform: \"translate(-50%, -50%)\",\r\n                  }}\r\n                >\r\n                  {format(day, \"d\")}\r\n                </div>\r\n              </PopoverTrigger>\r\n              <PopoverContent className=\"w-56\">\r\n                <Card>\r\n                  <CardContent className=\"p-2 space-y-2 text-sm\">\r\n                    <div className=\"font-medium\">{format(day, \"PPP\")}</div>\r\n                    {dayEvents.length === 0 && (\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        No events\r\n                      </div>\r\n                    )}\r\n                    {dayEvents.map((ev) => (\r\n                      <div\r\n                        key={ev.id}\r\n                        className=\"flex justify-between items-center\"\r\n                      >\r\n                        <span>{ev.title}</span>\r\n                        {onRemoveEvent && (\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"icon\"\r\n                            className=\"h-5 w-5\"\r\n                            onClick={() => onRemoveEvent(ev.id)}\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                  </CardContent>\r\n                </Card>\r\n              </PopoverContent>\r\n            </Popover>\r\n          )\r\n        })}\r\n      </div>\r\n\r\n      {/* Add Event */}\r\n      <div className=\"flex gap-2 items-center\">\r\n        <Input\r\n          placeholder=\"Event title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <Input\r\n          type=\"date\"\r\n          value={newDate}\r\n          onChange={(e) => setNewDate(e.target.value)}\r\n        />\r\n        <Button onClick={handleAdd}>Add</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/event-constellation-calendar.tsx"
    }
  ]
}