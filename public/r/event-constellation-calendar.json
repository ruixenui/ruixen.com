{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-constellation-calendar",
  "type": "registry:ui",
  "title": "Event Constellation Calendar",
  "description": "Unique starfield-style calendar with constellation connections between events.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "card",
    "button",
    "popover",
    "input"
  ],
  "files": [
    {
      "path": "registry/ruixenui/event-constellation-calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport { Input } from \"@/components/ui/input\";\nimport { Trash2 } from \"lucide-react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { startOfMonth, endOfMonth, eachDayOfInterval, format } from \"date-fns\";\n\nexport type CalendarEvent = {\n  id: string;\n  title: string;\n  date: string; // ISO\n};\n\ninterface EventConstellationCalendarProps {\n  events: CalendarEvent[];\n  onAddEvent: (e: CalendarEvent) => void;\n  onRemoveEvent?: (id: string) => void;\n}\n\nexport function EventConstellationCalendar({\n  events,\n  onAddEvent,\n  onRemoveEvent,\n}: EventConstellationCalendarProps) {\n  const [dateRef, setDateRef] = React.useState(new Date());\n  const [title, setTitle] = React.useState(\"\");\n  const [newDate, setNewDate] = React.useState(\"\");\n\n  // get days in month\n  const days = eachDayOfInterval({\n    start: startOfMonth(dateRef),\n    end: endOfMonth(dateRef),\n  });\n\n  // filter events for given day\n  const eventsForDay = (d: Date) =>\n    events.filter(\n      (ev) =>\n        format(new Date(ev.date), \"yyyy-MM-dd\") === format(d, \"yyyy-MM-dd\"),\n    );\n\n  const handleAdd = () => {\n    if (!title.trim() || !newDate) return;\n    onAddEvent({\n      id: uuidv4(),\n      title: title.trim(),\n      date: new Date(newDate).toISOString(),\n    });\n    setTitle(\"\");\n    setNewDate(\"\");\n  };\n\n  // âœ… Keep stars inside container (with padding)\n  const getStarPosition = (dayIndex: number) => {\n    const angle = (dayIndex / days.length) * 2 * Math.PI;\n    const radius = 100 + (dayIndex % 5) * 20; // smaller radius range\n    const centerX = 200;\n    const centerY = 200;\n    const padding = 20; // ensures no star goes outside box\n    const x = centerX + radius * Math.cos(angle);\n    const y = centerY + radius * Math.sin(angle);\n    return {\n      x: Math.min(400 - padding, Math.max(padding, x)),\n      y: Math.min(400 - padding, Math.max(padding, y)),\n    };\n  };\n\n  return (\n    <div className=\"space-y-4 flex flex-col items-center\">\n      {/* Month Navigation */}\n      <div className=\"flex gap-2 items-center\">\n        <Button\n          onClick={() =>\n            setDateRef((d) => new Date(d.getFullYear(), d.getMonth() - 1, 1))\n          }\n        >\n          Prev\n        </Button>\n        <div className=\"font-semibold\">{format(dateRef, \"MMMM yyyy\")}</div>\n        <Button\n          onClick={() =>\n            setDateRef((d) => new Date(d.getFullYear(), d.getMonth() + 1, 1))\n          }\n        >\n          Next\n        </Button>\n      </div>\n\n      {/* Starfield (Constellation Map) */}\n      <div className=\"relative w-[400px] h-[400px] bg-neutral-900 dark:bg-neutral-950 rounded-lg overflow-hidden border border-neutral-700 dark:border-neutral-800\">\n        <svg\n          className=\"absolute inset-0 w-full h-full\"\n          style={{ pointerEvents: \"none\" }}\n        >\n          {days.map((day, idx) => {\n            const { x, y } = getStarPosition(idx);\n            const dayEvents = eventsForDay(day);\n            if (dayEvents.length === 0) return null;\n\n            // connect to next day with events\n            const nextDay = days[idx + 1];\n            if (!nextDay) return null;\n            const nextEvents = eventsForDay(nextDay);\n            if (nextEvents.length === 0) return null;\n\n            const { x: nx, y: ny } = getStarPosition(idx + 1);\n\n            return (\n              <line\n                key={`line-${idx}`}\n                x1={x}\n                y1={y}\n                x2={nx}\n                y2={ny}\n                stroke=\"white\"\n                strokeWidth=\"1\"\n                opacity=\"0.4\"\n              />\n            );\n          })}\n        </svg>\n\n        {days.map((day, idx) => {\n          const { x, y } = getStarPosition(idx);\n          const dayEvents = eventsForDay(day);\n          const hasEvents = dayEvents.length > 0;\n\n          return (\n            <Popover key={day.toISOString()}>\n              <PopoverTrigger asChild>\n                <div\n                  className={`absolute w-6 h-6 flex items-center justify-center rounded-full text-[10px] cursor-pointer transition-colors ${\n                    hasEvents\n                      ? \"bg-yellow-400 text-black shadow-lg\"\n                      : \"bg-neutral-500 text-white dark:bg-neutral-700 dark:text-neutral-200\"\n                  }`}\n                  style={{\n                    left: x,\n                    top: y,\n                    transform: \"translate(-50%, -50%)\",\n                  }}\n                >\n                  {format(day, \"d\")}\n                </div>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-56\">\n                <Card>\n                  <CardContent className=\"p-2 space-y-2 text-sm\">\n                    <div className=\"font-medium\">{format(day, \"PPP\")}</div>\n                    {dayEvents.length === 0 && (\n                      <div className=\"text-xs text-muted-foreground\">\n                        No events\n                      </div>\n                    )}\n                    {dayEvents.map((ev) => (\n                      <div\n                        key={ev.id}\n                        className=\"flex justify-between items-center\"\n                      >\n                        <span>{ev.title}</span>\n                        {onRemoveEvent && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-5 w-5\"\n                            onClick={() => onRemoveEvent(ev.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </PopoverContent>\n            </Popover>\n          );\n        })}\n      </div>\n\n      {/* Add Event */}\n      <div className=\"flex gap-2 items-center\">\n        <Input\n          placeholder=\"Event title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <Input\n          type=\"date\"\n          value={newDate}\n          onChange={(e) => setNewDate(e.target.value)}\n        />\n        <Button onClick={handleAdd}>Add</Button>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/event-constellation-calendar.tsx"
    }
  ]
}