{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "aurora-waves",
  "type": "registry:ui",
  "title": "Aurora Waves",
  "description": "Aurora-style waves with customizable speed, glow, and theme support.",
  "dependencies": [
    "ogl"
  ],
  "files": [
    {
      "path": "registry/ruixenui/aurora-waves.tsx",
      "content": "\"use client\";\n\nimport { useRef, useEffect } from \"react\";\nimport { Renderer, Program, Mesh, Triangle, Vec2 } from \"ogl\";\n\nconst vertex = `\nattribute vec2 position;\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\nconst fragment = `\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 uResolution;\nuniform float uTime;\nuniform float uSpeed;\nuniform float uGlow;\nuniform float uTheme; // 0 = dark, 1 = light\n\n// Simple smooth palette (Aurora-like)\nvec3 palette(float t) {\n    return mix(\n      vec3(0.1, 0.2, 0.5), // deep blue\n      vec3(0.8, 0.4, 0.9), // magenta\n      0.5 + 0.5 * sin(t)\n    );\n}\n\n// Multiple flowing waves\nfloat wave(vec2 uv, float freq, float phase) {\n    return 0.4 * sin(uv.x * freq + uTime * uSpeed + phase);\n}\n\n// Glow\nfloat glow(float d, float strength) {\n    return exp(-d * d * strength);\n}\n\nvoid main() {\n    vec2 uv = (gl_FragCoord.xy / uResolution.xy) * 2.0 - 1.0;\n    uv.x *= uResolution.x / uResolution.y;\n\n    float y = uv.y;\n\n    // Combine multiple waves\n    float w1 = wave(uv, 3.0, 0.0);\n    float w2 = wave(uv, 5.0, 1.0);\n    float w3 = wave(uv, 7.0, 2.5);\n\n    float waveLine = w1 + w2 * 0.6 + w3 * 0.4;\n\n    // Distance to wave line\n    float dist = abs(y - waveLine);\n\n    // Glow around waves\n    float g = glow(dist, uGlow);\n\n    // Aurora gradient\n    vec3 col = palette(waveLine + y);\n\n    // Apply theme blending (dark → black bg, light → white bg)\n    vec3 bg = mix(vec3(0.02, 0.02, 0.05), vec3(1.0), uTheme);\n\n    // Blend glow with background\n    col = mix(bg, col, g * 1.5);\n\n    gl_FragColor = vec4(col, 1.0);\n}\n`;\n\ntype Props = {\n  speed?: number;\n  glow?: number;\n  theme?: \"dark\" | \"light\";\n  resolutionScale?: number;\n};\n\nexport default function AuroraWaves({\n  speed = 1.0,\n  glow = 15.0,\n  theme = \"dark\",\n  resolutionScale = 1.0,\n}: Props) {\n  const ref = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = ref.current as HTMLCanvasElement;\n    const parent = canvas.parentElement as HTMLElement;\n\n    const renderer = new Renderer({\n      dpr: Math.min(window.devicePixelRatio, 2),\n      canvas,\n    });\n\n    const gl = renderer.gl;\n    const geometry = new Triangle(gl);\n\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        uTime: { value: 0 },\n        uResolution: { value: new Vec2() },\n        uSpeed: { value: speed },\n        uGlow: { value: glow },\n        uTheme: { value: theme === \"light\" ? 1.0 : 0.0 },\n      },\n    });\n\n    const mesh = new Mesh(gl, { geometry, program });\n\n    const resize = () => {\n      const w = parent.clientWidth,\n        h = parent.clientHeight;\n      renderer.setSize(w * resolutionScale, h * resolutionScale);\n      program.uniforms.uResolution.value.set(w, h);\n    };\n\n    window.addEventListener(\"resize\", resize);\n    resize();\n\n    const start = performance.now();\n    let frame = 0;\n\n    const loop = () => {\n      program.uniforms.uTime.value = (performance.now() - start) / 1000;\n      renderer.render({ scene: mesh });\n      frame = requestAnimationFrame(loop);\n    };\n\n    loop();\n\n    return () => {\n      cancelAnimationFrame(frame);\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, [speed, glow, theme, resolutionScale]);\n\n  return <canvas ref={ref} className=\"w-full h-full block\" />;\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/aurora-waves.tsx"
    }
  ]
}