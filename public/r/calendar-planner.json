{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar-planner",
  "type": "registry:ui",
  "title": "Calendar Planner",
  "description": "A comprehensive calendar planner with month/year view switching and event information display.",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/ruixenui/calendar-planner.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { addMonths, format, startOfYear } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface CalendarPlannerProps {\n  value?: Date;\n  onChange?: (date: Date) => void;\n  className?: string;\n  yearRange?: [number, number];\n  info?: Record<string, string>; // dateKey -> info string\n}\n\nexport function CalendarPlanner({\n  value,\n  onChange,\n  className,\n  yearRange = [2000, 2040],\n  info = {},\n}: CalendarPlannerProps) {\n  const [mode, setMode] = React.useState<\"month\" | \"year\">(\"month\");\n  const [cursor, setCursor] = React.useState<Date>(value ?? new Date());\n\n  const selectDate = (d: Date) => {\n    onChange?.(d);\n  };\n\n  const prev = () => {\n    if (mode === \"month\") setCursor(addMonths(cursor, -1));\n    else {\n      const c = new Date(cursor);\n      c.setFullYear(c.getFullYear() - 12);\n      setCursor(c);\n    }\n  };\n\n  const next = () => {\n    if (mode === \"month\") setCursor(addMonths(cursor, 1));\n    else {\n      const c = new Date(cursor);\n      c.setFullYear(c.getFullYear() + 12);\n      setCursor(c);\n    }\n  };\n\n  const renderMonthGrid = (base: Date) => {\n    const firstOfMonth = new Date(base.getFullYear(), base.getMonth(), 1);\n    const lastOfMonth = new Date(base.getFullYear(), base.getMonth() + 1, 0);\n    const days: Date[] = [];\n    for (let d = 1; d <= lastOfMonth.getDate(); d++) {\n      days.push(new Date(base.getFullYear(), base.getMonth(), d));\n    }\n    const padStart = firstOfMonth.getDay();\n\n    return (\n      <div className=\"w-full\">\n        <div className=\"mb-2 text-center font-medium\">\n          {format(base, \"MMMM yyyy\")}\n        </div>\n        <div className=\"grid grid-cols-7 text-xs text-muted-foreground\">\n          {[\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"].map((wd) => (\n            <div key={wd} className=\"h-7 flex items-center justify-center\">\n              {wd}\n            </div>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-7\">\n          {Array.from({ length: padStart }).map((_, i) => (\n            <div key={`pad-${i}`} className=\"h-14\" />\n          ))}\n          {days.map((dt) => {\n            const key = format(dt, \"yyyy-MM-dd\");\n            const note = info[key];\n            const isSelected =\n              value && dt.toDateString() === value.toDateString();\n\n            return (\n              <button\n                key={dt.toISOString()}\n                onClick={() => selectDate(dt)}\n                className={cn(\n                  \"h-14 w-14 m-0.5 flex flex-col items-center justify-center rounded-md border text-sm transition-colors\",\n                  \"bg-background text-foreground hover:bg-muted\",\n                  isSelected &&\n                    \"border-foreground bg-foreground text-background\",\n                )}\n              >\n                <span>{dt.getDate()}</span>\n                {note && (\n                  <span className=\"text-[10px] text-muted-foreground truncate\">\n                    {note}\n                  </span>\n                )}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  const renderYearGrid = () => {\n    const cy = cursor.getFullYear();\n    const startBlock = Math.floor((cy - yearRange[0]) / 12) * 12 + yearRange[0];\n    const years = Array.from({ length: 12 }, (_, i) => startBlock + i).filter(\n      (y) => y >= yearRange[0] && y <= yearRange[1],\n    );\n\n    return (\n      <div className=\"p-2\">\n        <div className=\"grid grid-cols-3 gap-2\">\n          {years.map((y) => (\n            <button\n              key={y}\n              onClick={() => {\n                const n = new Date(cursor);\n                n.setFullYear(y);\n                setCursor(n);\n                setMode(\"month\");\n              }}\n              className={cn(\n                \"h-12 flex items-center justify-center rounded-md border text-sm transition\",\n                y === cy ? \"bg-foreground text-background\" : \"hover:bg-muted\",\n              )}\n            >\n              {y}\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div\n      className={cn(\n        \"rounded-3xl border bg-background p-6 w-[620px]\",\n        className,\n      )}\n    >\n      <div className=\"flex items-center justify-between mb-3\">\n        <Button variant=\"ghost\" size=\"icon\" onClick={prev}>\n          <ChevronLeft className=\"w-4 h-4\" />\n        </Button>\n        <button\n          className=\"text-base font-semibold hover:underline\"\n          onClick={() => setMode(mode === \"month\" ? \"year\" : \"month\")}\n        >\n          {mode === \"month\"\n            ? format(cursor, \"MMMM yyyy\")\n            : cursor.getFullYear()}\n        </button>\n        <Button variant=\"ghost\" size=\"icon\" onClick={next}>\n          <ChevronRight className=\"w-4 h-4\" />\n        </Button>\n      </div>\n\n      {mode === \"month\" ? (\n        <div className=\"flex gap-6\">\n          {renderMonthGrid(cursor)}\n          {renderMonthGrid(addMonths(cursor, 1))}\n        </div>\n      ) : (\n        renderYearGrid()\n      )}\n\n      <div className=\"mt-4 text-xs text-center text-muted-foreground\">\n        Minimal design â€¢ Inspired by{\" \"}\n        <a href=\"https://www.ruixen.com\" target=\"_blank\" className=\"underline\">\n          ruixen.com\n        </a>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/calendar-planner.tsx"
    }
  ]
}