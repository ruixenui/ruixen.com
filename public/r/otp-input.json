{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "otp-input",
  "type": "registry:ui",
  "title": "OTP Input",
  "description": "A one-time password input component with individual digit fields.",
  "files": [
    {
      "path": "registry/ruixenui/otp-input.tsx",
      "content": "\"use client\";\n\nimport { useState, useRef, useEffect, useCallback } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface OTPInputProps {\n  length?: number;\n  onChange?: (value: string) => void;\n  placeholder?: string;\n  autoFocus?: boolean;\n}\n\nexport default function OTPInput({\n  length = 6,\n  onChange,\n  placeholder = \"\",\n  autoFocus = true,\n}: OTPInputProps) {\n  const [code, setCode] = useState<string[]>(Array(length).fill(\"\"));\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [error, setError] = useState(false);\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\n\n  useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, length);\n    if (autoFocus) inputRefs.current[0]?.focus();\n  }, [length, autoFocus]);\n\n  const handleChange = (index: number, value: string) => {\n    if (!/^\\d*$/.test(value)) return;\n    const updated = [...code];\n    updated[index] = value.slice(-1);\n    setCode(updated);\n    onChange?.(updated.join(\"\"));\n\n    if (value && index < length - 1) {\n      inputRefs.current[index + 1]?.focus();\n      setActiveIndex(index + 1);\n    }\n  };\n\n  const handleKeyDown = (\n    index: number,\n    e: React.KeyboardEvent<HTMLInputElement>,\n  ) => {\n    if (e.key === \"Backspace\" && !code[index] && index > 0) {\n      inputRefs.current[index - 1]?.focus();\n      setActiveIndex(index - 1);\n    }\n  };\n\n  const handlePaste = (e: React.ClipboardEvent) => {\n    e.preventDefault();\n    const text = e.clipboardData.getData(\"text/plain\").slice(0, length);\n    if (!/^\\d+$/.test(text)) {\n      setError(true);\n      setTimeout(() => setError(false), 400);\n      return;\n    }\n    const newCode = text\n      .split(\"\")\n      .concat(Array(length).fill(\"\"))\n      .slice(0, length);\n    setCode(newCode);\n    onChange?.(newCode.join(\"\"));\n    const next = Math.min(text.length, length - 1);\n    inputRefs.current[next]?.focus();\n    setActiveIndex(next);\n  };\n\n  const setRef = useCallback(\n    (index: number) => (el: HTMLInputElement | null) => {\n      inputRefs.current[index] = el;\n    },\n    [],\n  );\n\n  return (\n    <div className=\"flex justify-center gap-2\">\n      {Array.from({ length }).map((_, index) => (\n        <input\n          key={index}\n          ref={setRef(index)}\n          type=\"text\"\n          inputMode=\"numeric\"\n          maxLength={1}\n          value={code[index]}\n          placeholder={placeholder}\n          onChange={(e) => handleChange(index, e.target.value)}\n          onKeyDown={(e) => handleKeyDown(index, e)}\n          onFocus={() => setActiveIndex(index)}\n          onPaste={handlePaste}\n          className={cn(\n            \"w-12 h-12 text-center text-xl font-mono rounded-md bg-transparent\",\n            \"border-b-2 border-zinc-300 dark:border-zinc-600 focus:border-indigo-500 dark:focus:border-indigo-400 outline-none\",\n            \"transition-all duration-150\",\n            error && \"animate-pulse text-red-500 dark:text-red-400\",\n          )}\n        />\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/otp-input.tsx"
    }
  ]
}