{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scheduler",
  "type": "registry:ui",
  "title": "Scheduler",
  "description": "A simple event scheduler with calendar integration.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "popover",
    "calendar",
    "card",
    "label",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/scheduler.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\r\nimport { Calendar } from \"@/components/ui/calendar\"\r\nimport { Card, CardContent } from \"@/components/ui/card\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { Trash2, Edit2 } from \"lucide-react\"\r\n\r\nexport type Event = {\r\n  id: number\r\n  date: Date\r\n  time: string\r\n}\r\n\r\ntype SchedulerProps = {\r\n  defaultEvents?: Event[]\r\n  defaultHour?: string\r\n  defaultMinute?: string\r\n  onAddEvent?: (event: Event) => void\r\n  onEditEvent?: (event: Event) => void\r\n  onDeleteEvent?: (id: number) => void\r\n}\r\n\r\nexport default function Scheduler({\r\n  defaultEvents = [],\r\n  defaultHour = \"12\",\r\n  defaultMinute = \"00\",\r\n  onAddEvent,\r\n  onEditEvent,\r\n  onDeleteEvent,\r\n}: SchedulerProps) {\r\n  const [open, setOpen] = useState(false)\r\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined)\r\n  const [selectedHour, setSelectedHour] = useState(defaultHour)\r\n  const [selectedMinute, setSelectedMinute] = useState(defaultMinute)\r\n  const [events, setEvents] = useState<Event[]>(defaultEvents)\r\n  const [editingEvent, setEditingEvent] = useState<Event | null>(null)\r\n\r\n  useEffect(() => {\r\n    setEvents(defaultEvents)\r\n  }, [defaultEvents])\r\n\r\n  const handleSave = () => {\r\n    if (!selectedDate) return\r\n    const time = `${selectedHour}:${selectedMinute}`\r\n\r\n    if (editingEvent) {\r\n      const updatedEvent = { ...editingEvent, date: selectedDate, time }\r\n      setEvents(events.map(ev => (ev.id === editingEvent.id ? updatedEvent : ev)))\r\n      setEditingEvent(null)\r\n      onEditEvent?.(updatedEvent)\r\n    } else {\r\n      const newEvent = { id: Date.now(), date: selectedDate, time }\r\n      setEvents([...events, newEvent])\r\n      onAddEvent?.(newEvent)\r\n    }\r\n\r\n    setSelectedDate(undefined)\r\n    setSelectedHour(defaultHour)\r\n    setSelectedMinute(defaultMinute)\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleEdit = (event: Event) => {\r\n    setSelectedDate(new Date(event.date))\r\n    const [hour, minute] = event.time.split(\":\")\r\n    setSelectedHour(hour)\r\n    setSelectedMinute(minute)\r\n    setEditingEvent(event)\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleDelete = (id: number) => {\r\n    setEvents(events.filter(ev => ev.id !== id))\r\n    onDeleteEvent?.(id)\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <Popover open={open} onOpenChange={setOpen}>\r\n        <PopoverTrigger asChild>\r\n          <Button variant=\"outline\">\r\n            {editingEvent ? \"Edit Event\" : \"Schedule Event\"}\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent className=\"w-auto p-4\" side=\"bottom\" align=\"start\">\r\n          <div className=\"space-y-4\">\r\n            <Calendar mode=\"single\" selected={selectedDate} onSelect={setSelectedDate} />\r\n\r\n            <div className=\"flex space-x-4\">\r\n              <div className=\"flex flex-col space-y-2\">\r\n                <Label>Hour</Label>\r\n                <Select value={selectedHour} onValueChange={setSelectedHour}>\r\n                  <SelectTrigger className=\"w-20\">\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {Array.from({ length: 24 }).map((_, i) => (\r\n                      <SelectItem key={i} value={i.toString().padStart(2, \"0\")}>\r\n                        {i.toString().padStart(2, \"0\")}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"flex flex-col space-y-2\">\r\n                <Label>Minute</Label>\r\n                <Select value={selectedMinute} onValueChange={setSelectedMinute}>\r\n                  <SelectTrigger className=\"w-20\">\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {[\"00\", \"15\", \"30\", \"45\"].map(min => (\r\n                      <SelectItem key={min} value={min}>\r\n                        {min}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            <Button onClick={handleSave} className=\"w-full\">\r\n              {editingEvent ? \"Update Event\" : \"Add Event\"}\r\n            </Button>\r\n          </div>\r\n        </PopoverContent>\r\n      </Popover>\r\n\r\n      <div className=\"grid gap-2\">\r\n        {events.length === 0 && <p className=\"text-sm text-muted-foreground\">No events scheduled.</p>}\r\n\r\n        {events.map(ev => (\r\n          <Card key={ev.id} className=\"flex items-center justify-between p-3\">\r\n            <CardContent className=\"p-0\">\r\n              <p className=\"font-medium\">{ev.date.toDateString()}</p>\r\n              <p className=\"text-sm text-muted-foreground\">at {ev.time}</p>\r\n            </CardContent>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => handleEdit(ev)}>\r\n                <Edit2 className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => handleDelete(ev.id)}>\r\n                <Trash2 className=\"h-4 w-4 text-red-500\" />\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/scheduler.tsx"
    }
  ]
}