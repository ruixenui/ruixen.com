{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scheduler",
  "type": "registry:ui",
  "title": "Scheduler",
  "description": "A simple event scheduler with calendar integration.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "popover",
    "calendar",
    "card",
    "label",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/scheduler.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Trash2, Edit2 } from \"lucide-react\";\n\nexport type Event = {\n  id: number;\n  date: Date;\n  time: string;\n};\n\ntype SchedulerProps = {\n  defaultEvents?: Event[];\n  defaultHour?: string;\n  defaultMinute?: string;\n  onAddEvent?: (event: Event) => void;\n  onEditEvent?: (event: Event) => void;\n  onDeleteEvent?: (id: number) => void;\n};\n\nexport default function Scheduler({\n  defaultEvents = [],\n  defaultHour = \"12\",\n  defaultMinute = \"00\",\n  onAddEvent,\n  onEditEvent,\n  onDeleteEvent,\n}: SchedulerProps) {\n  const [open, setOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n  const [selectedHour, setSelectedHour] = useState(defaultHour);\n  const [selectedMinute, setSelectedMinute] = useState(defaultMinute);\n  const [events, setEvents] = useState<Event[]>(defaultEvents);\n  const [editingEvent, setEditingEvent] = useState<Event | null>(null);\n\n  useEffect(() => {\n    setEvents(defaultEvents);\n  }, [defaultEvents]);\n\n  const handleSave = () => {\n    if (!selectedDate) return;\n    const time = `${selectedHour}:${selectedMinute}`;\n\n    if (editingEvent) {\n      const updatedEvent = { ...editingEvent, date: selectedDate, time };\n      setEvents(\n        events.map((ev) => (ev.id === editingEvent.id ? updatedEvent : ev)),\n      );\n      setEditingEvent(null);\n      onEditEvent?.(updatedEvent);\n    } else {\n      const newEvent = { id: Date.now(), date: selectedDate, time };\n      setEvents([...events, newEvent]);\n      onAddEvent?.(newEvent);\n    }\n\n    setSelectedDate(undefined);\n    setSelectedHour(defaultHour);\n    setSelectedMinute(defaultMinute);\n    setOpen(false);\n  };\n\n  const handleEdit = (event: Event) => {\n    setSelectedDate(new Date(event.date));\n    const [hour, minute] = event.time.split(\":\");\n    setSelectedHour(hour);\n    setSelectedMinute(minute);\n    setEditingEvent(event);\n    setOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    setEvents(events.filter((ev) => ev.id !== id));\n    onDeleteEvent?.(id);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button variant=\"outline\">\n            {editingEvent ? \"Edit Event\" : \"Schedule Event\"}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-4\" side=\"bottom\" align=\"start\">\n          <div className=\"space-y-4\">\n            <Calendar\n              mode=\"single\"\n              selected={selectedDate}\n              onSelect={setSelectedDate}\n            />\n\n            <div className=\"flex space-x-4\">\n              <div className=\"flex flex-col space-y-2\">\n                <Label>Hour</Label>\n                <Select value={selectedHour} onValueChange={setSelectedHour}>\n                  <SelectTrigger className=\"w-20\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Array.from({ length: 24 }).map((_, i) => (\n                      <SelectItem key={i} value={i.toString().padStart(2, \"0\")}>\n                        {i.toString().padStart(2, \"0\")}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex flex-col space-y-2\">\n                <Label>Minute</Label>\n                <Select\n                  value={selectedMinute}\n                  onValueChange={setSelectedMinute}\n                >\n                  <SelectTrigger className=\"w-20\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {[\"00\", \"15\", \"30\", \"45\"].map((min) => (\n                      <SelectItem key={min} value={min}>\n                        {min}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <Button onClick={handleSave} className=\"w-full\">\n              {editingEvent ? \"Update Event\" : \"Add Event\"}\n            </Button>\n          </div>\n        </PopoverContent>\n      </Popover>\n\n      <div className=\"grid gap-2\">\n        {events.length === 0 && (\n          <p className=\"text-sm text-muted-foreground\">No events scheduled.</p>\n        )}\n\n        {events.map((ev) => (\n          <Card\n            key={ev.id}\n            className=\"flex flex-col items-center justify-between p-3\"\n          >\n            <CardContent className=\"p-0\">\n              <p className=\"font-medium\">{ev.date.toDateString()}</p>\n              <p className=\"text-sm text-muted-foreground\">at {ev.time}</p>\n            </CardContent>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => handleEdit(ev)}\n              >\n                <Edit2 className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => handleDelete(ev.id)}\n              >\n                <Trash2 className=\"h-4 w-4 text-red-500\" />\n              </Button>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/scheduler.tsx"
    }
  ]
}