{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stacked-bar-calendar",
  "type": "registry:ui",
  "title": "Stacked Bar Calendar",
  "description": "Calendar with stacked bar visualization for event categories and filtering.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "calendar",
    "popover",
    "card",
    "button",
    "input",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/stacked-bar-calendar.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport {\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n} from \"@/components/ui/popover\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Trash2 } from \"lucide-react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { format } from \"date-fns\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\n\r\nexport type CalendarEvent = {\r\n  id: string;\r\n  title: string;\r\n  date: string;\r\n  category?: \"low\" | \"medium\" | \"high\";\r\n};\r\n\r\ninterface StackedBarCalendarProps {\r\n  events: CalendarEvent[];\r\n  onAddEvent: (event: CalendarEvent) => void;\r\n  onRemoveEvent?: (id: string) => void;\r\n}\r\n\r\nexport function StackedBarCalendar({\r\n  events,\r\n  onAddEvent,\r\n  onRemoveEvent,\r\n}: StackedBarCalendarProps) {\r\n  const [selectedDate, setSelectedDate] = React.useState<Date | undefined>(\r\n    new Date()\r\n  );\r\n  const [newTitle, setNewTitle] = React.useState(\"\");\r\n  const [newCategory, setNewCategory] = React.useState<\r\n    \"low\" | \"medium\" | \"high\"\r\n  >(\"medium\");\r\n  const [filter, setFilter] = React.useState<\"all\" | \"low\" | \"medium\" | \"high\">(\r\n    \"all\"\r\n  );\r\n\r\n  const handleAddEvent = () => {\r\n    if (!selectedDate || !newTitle.trim()) return;\r\n    onAddEvent({\r\n      id: uuidv4(),\r\n      title: newTitle.trim(),\r\n      date: selectedDate.toISOString(),\r\n      category: newCategory,\r\n    });\r\n    setNewTitle(\"\");\r\n  };\r\n\r\n  const filteredEvents =\r\n    filter === \"all\" ? events : events.filter((e) => e.category === filter);\r\n\r\n  const eventsForDay = (date: Date) =>\r\n    filteredEvents.filter(\r\n      (e) =>\r\n        format(new Date(e.date), \"yyyy-MM-dd\") === format(date, \"yyyy-MM-dd\")\r\n    );\r\n\r\n  const getColor = (category?: string) => {\r\n    switch (category) {\r\n      case \"low\":\r\n        return \"bg-blue-300 dark:bg-blue-700\";\r\n      case \"medium\":\r\n        return \"bg-green-400 dark:bg-green-600\";\r\n      case \"high\":\r\n        return \"bg-red-500 dark:bg-red-600\";\r\n      default:\r\n        return \"bg-gray-300 dark:bg-gray-700\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Filter */}\r\n      <div className=\"flex gap-2 items-center\">\r\n        <span className=\"font-medium\">Filter:</span>\r\n        <Select value={filter} onValueChange={(val) => setFilter(val as any)}>\r\n          <SelectTrigger className=\"w-32\">\r\n            <SelectValue placeholder=\"Select filter\" />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectItem value=\"all\">All</SelectItem>\r\n            <SelectItem value=\"low\">Low</SelectItem>\r\n            <SelectItem value=\"medium\">Medium</SelectItem>\r\n            <SelectItem value=\"high\">High</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n\r\n      {/* Calendar */}\r\n      <Calendar\r\n        mode=\"single\"\r\n        selected={selectedDate}\r\n        onSelect={setSelectedDate}\r\n        className=\"w-full\"\r\n        components={{\r\n          DayContent: (day) => {\r\n            const dayEvents = eventsForDay(day.date);\r\n            return (\r\n              <Popover key={day.date.toISOString()}>\r\n                <PopoverTrigger asChild>\r\n                  <div className=\"relative w-full h-20 flex flex-col justify-end cursor-pointer border border-gray-200 dark:border-gray-700 rounded\">\r\n                    {dayEvents.map((event, i) => (\r\n                      <div\r\n                        key={i}\r\n                        className={`w-full ${getColor(event.category)} mb-0.5 rounded`}\r\n                        style={{ height: `${18 / (dayEvents.length || 1)}px` }}\r\n                      />\r\n                    ))}\r\n                    <span className=\"absolute top-1 left-1 text-xs\">\r\n                      {day.date.getDate()}\r\n                    </span>\r\n                  </div>\r\n                </PopoverTrigger>\r\n                <PopoverContent className=\"w-48\">\r\n                  <Card>\r\n                    <CardContent className=\"space-y-1 p-2\">\r\n                      <h3 className=\"font-medium text-sm\">\r\n                        {format(day.date, \"PPP\")}\r\n                      </h3>\r\n                      {dayEvents.length === 0 && (\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          No events\r\n                        </p>\r\n                      )}\r\n                      {dayEvents.map((event) => (\r\n                        <div\r\n                          key={event.id}\r\n                          className=\"flex justify-between items-center text-xs\"\r\n                        >\r\n                          <span>{event.title}</span>\r\n                          {onRemoveEvent && (\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"icon\"\r\n                              className=\"h-4 w-4\"\r\n                              onClick={() => onRemoveEvent(event.id)}\r\n                            >\r\n                              <Trash2 className=\"h-3 w-3 text-red-500\" />\r\n                            </Button>\r\n                          )}\r\n                        </div>\r\n                      ))}\r\n                    </CardContent>\r\n                  </Card>\r\n                </PopoverContent>\r\n              </Popover>\r\n            );\r\n          },\r\n        }}\r\n      />\r\n\r\n      {/* Selected Date Events */}\r\n      {selectedDate && (\r\n        <div className=\"mt-4\">\r\n          <h3 className=\"text-sm font-semibold\">\r\n            Events on {format(selectedDate, \"PPP\")}\r\n          </h3>\r\n          <div className=\"space-y-2 mt-2\">\r\n            {eventsForDay(selectedDate).length === 0 && (\r\n              <p className=\"text-xs text-muted-foreground\">No events</p>\r\n            )}\r\n            {eventsForDay(selectedDate).map((event) => (\r\n              <Card key={event.id}>\r\n                <CardContent className=\"flex justify-between items-center p-2 text-xs\">\r\n                  <span>{event.title}</span>\r\n                  {onRemoveEvent && (\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"icon\"\r\n                      className=\"h-4 w-4\"\r\n                      onClick={() => onRemoveEvent(event.id)}\r\n                    >\r\n                      <Trash2 className=\"h-3 w-3 text-red-500\" />\r\n                    </Button>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Add Event */}\r\n      {selectedDate && (\r\n        <div className=\"flex gap-2 mt-4 items-center\">\r\n          <Input\r\n            placeholder=\"New event title\"\r\n            value={newTitle}\r\n            onChange={(e) => setNewTitle(e.target.value)}\r\n          />\r\n          <Select\r\n            value={newCategory}\r\n            onValueChange={(val) => setNewCategory(val as any)}\r\n          >\r\n            <SelectTrigger className=\"w-28\">\r\n              <SelectValue placeholder=\"Category\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"low\">Low</SelectItem>\r\n              <SelectItem value=\"medium\">Medium</SelectItem>\r\n              <SelectItem value=\"high\">High</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n          <Button onClick={handleAddEvent}>Add Event</Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/stacked-bar-calendar.tsx"
    }
  ]
}