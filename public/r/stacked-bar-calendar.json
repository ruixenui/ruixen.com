{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stacked-bar-calendar",
  "type": "registry:ui",
  "title": "Stacked Bar Calendar",
  "description": "Calendar with stacked bar visualization for event categories and filtering.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "calendar",
    "popover",
    "card",
    "button",
    "input",
    "select"
  ],
  "files": [
    {
      "path": "registry/ruixenui/stacked-bar-calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Trash2 } from \"lucide-react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { format } from \"date-fns\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport type CalendarEvent = {\n  id: string;\n  title: string;\n  date: string;\n  category?: \"low\" | \"medium\" | \"high\";\n};\n\ninterface StackedBarCalendarProps {\n  events: CalendarEvent[];\n  onAddEvent: (event: CalendarEvent) => void;\n  onRemoveEvent?: (id: string) => void;\n}\n\nexport function StackedBarCalendar({\n  events,\n  onAddEvent,\n  onRemoveEvent,\n}: StackedBarCalendarProps) {\n  const [selectedDate, setSelectedDate] = React.useState<Date | undefined>(\n    new Date(),\n  );\n  const [newTitle, setNewTitle] = React.useState(\"\");\n  const [newCategory, setNewCategory] = React.useState<\n    \"low\" | \"medium\" | \"high\"\n  >(\"medium\");\n  const [filter, setFilter] = React.useState<\"all\" | \"low\" | \"medium\" | \"high\">(\n    \"all\",\n  );\n\n  const handleAddEvent = () => {\n    if (!selectedDate || !newTitle.trim()) return;\n    onAddEvent({\n      id: uuidv4(),\n      title: newTitle.trim(),\n      date: selectedDate.toISOString(),\n      category: newCategory,\n    });\n    setNewTitle(\"\");\n  };\n\n  const filteredEvents =\n    filter === \"all\" ? events : events.filter((e) => e.category === filter);\n\n  const eventsForDay = (date: Date) =>\n    filteredEvents.filter(\n      (e) =>\n        format(new Date(e.date), \"yyyy-MM-dd\") === format(date, \"yyyy-MM-dd\"),\n    );\n\n  const getColor = (category?: string) => {\n    switch (category) {\n      case \"low\":\n        return \"bg-blue-300 dark:bg-blue-700\";\n      case \"medium\":\n        return \"bg-green-400 dark:bg-green-600\";\n      case \"high\":\n        return \"bg-red-500 dark:bg-red-600\";\n      default:\n        return \"bg-gray-300 dark:bg-gray-700\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Filter */}\n      <div className=\"flex gap-2 items-center\">\n        <span className=\"font-medium\">Filter:</span>\n        <Select value={filter} onValueChange={(val) => setFilter(val as any)}>\n          <SelectTrigger className=\"w-32\">\n            <SelectValue placeholder=\"Select filter\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All</SelectItem>\n            <SelectItem value=\"low\">Low</SelectItem>\n            <SelectItem value=\"medium\">Medium</SelectItem>\n            <SelectItem value=\"high\">High</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Calendar */}\n      <Calendar\n        mode=\"single\"\n        selected={selectedDate}\n        onSelect={setSelectedDate}\n        className=\"w-full\"\n        components={{\n          DayContent: (day) => {\n            const dayEvents = eventsForDay(day.date);\n            return (\n              <Popover key={day.date.toISOString()}>\n                <PopoverTrigger asChild>\n                  <div className=\"relative w-full h-20 flex flex-col justify-end cursor-pointer border border-gray-200 dark:border-gray-700 rounded\">\n                    {dayEvents.map((event, i) => (\n                      <div\n                        key={i}\n                        className={`w-full ${getColor(event.category)} mb-0.5 rounded`}\n                        style={{ height: `${18 / (dayEvents.length || 1)}px` }}\n                      />\n                    ))}\n                    <span className=\"absolute top-1 left-1 text-xs\">\n                      {day.date.getDate()}\n                    </span>\n                  </div>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-48\">\n                  <Card>\n                    <CardContent className=\"space-y-1 p-2\">\n                      <h3 className=\"font-medium text-sm\">\n                        {format(day.date, \"PPP\")}\n                      </h3>\n                      {dayEvents.length === 0 && (\n                        <p className=\"text-xs text-muted-foreground\">\n                          No events\n                        </p>\n                      )}\n                      {dayEvents.map((event) => (\n                        <div\n                          key={event.id}\n                          className=\"flex justify-between items-center text-xs\"\n                        >\n                          <span>{event.title}</span>\n                          {onRemoveEvent && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-4 w-4\"\n                              onClick={() => onRemoveEvent(event.id)}\n                            >\n                              <Trash2 className=\"h-3 w-3 text-red-500\" />\n                            </Button>\n                          )}\n                        </div>\n                      ))}\n                    </CardContent>\n                  </Card>\n                </PopoverContent>\n              </Popover>\n            );\n          },\n        }}\n      />\n\n      {/* Selected Date Events */}\n      {selectedDate && (\n        <div className=\"mt-4\">\n          <h3 className=\"text-sm font-semibold\">\n            Events on {format(selectedDate, \"PPP\")}\n          </h3>\n          <div className=\"space-y-2 mt-2\">\n            {eventsForDay(selectedDate).length === 0 && (\n              <p className=\"text-xs text-muted-foreground\">No events</p>\n            )}\n            {eventsForDay(selectedDate).map((event) => (\n              <Card key={event.id}>\n                <CardContent className=\"flex justify-between items-center p-2 text-xs\">\n                  <span>{event.title}</span>\n                  {onRemoveEvent && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-4 w-4\"\n                      onClick={() => onRemoveEvent(event.id)}\n                    >\n                      <Trash2 className=\"h-3 w-3 text-red-500\" />\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Add Event */}\n      {selectedDate && (\n        <div className=\"flex gap-2 mt-4 items-center\">\n          <Input\n            placeholder=\"New event title\"\n            value={newTitle}\n            onChange={(e) => setNewTitle(e.target.value)}\n          />\n          <Select\n            value={newCategory}\n            onValueChange={(val) => setNewCategory(val as any)}\n          >\n            <SelectTrigger className=\"w-28\">\n              <SelectValue placeholder=\"Category\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"low\">Low</SelectItem>\n              <SelectItem value=\"medium\">Medium</SelectItem>\n              <SelectItem value=\"high\">High</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button onClick={handleAddEvent}>Add Event</Button>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/stacked-bar-calendar.tsx"
    }
  ]
}