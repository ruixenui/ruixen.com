{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "goal-tracker-card",
  "type": "registry:ui",
  "title": "Goal Tracker Card",
  "description": "An activity and goal tracking card with progress visualization.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/goal-tracker-card.tsx",
      "content": "\"use client\";\n\nimport {\n  Activity,\n  ArrowUpRight,\n  Plus,\n  Target,\n  CheckCircle2,\n  Goal,\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface Metric {\n  label: string;\n  value: string;\n  trend: number;\n  unit?: \"cal\" | \"min\" | \"hrs\";\n}\n\nexport interface Goal {\n  id: string;\n  title: string;\n  isCompleted: boolean;\n}\n\ninterface GoalTrackerCardProps {\n  category?: string;\n  title?: string;\n  metrics?: Metric[];\n  dailyGoals?: Goal[];\n  onAddGoal?: () => void;\n  onToggleGoal?: (goalId: string) => void;\n  onViewDetails?: () => void;\n  className?: string;\n}\n\nconst METRIC_COLORS = {\n  Move: \"#FF2D55\",\n  Exercise: \"#2CD758\",\n  Stand: \"#007AFF\",\n} as const;\n\nfunction CardDetails({\n  category = \"Activity\",\n  title = \"Today's Progress\",\n  metrics = [],\n  dailyGoals = [],\n  onAddGoal,\n  onToggleGoal,\n  onViewDetails,\n  className,\n}: GoalTrackerCardProps) {\n  const [isHovering, setIsHovering] = useState<string | null>(null);\n\n  const handleGoalToggle = (goalId: string) => {\n    onToggleGoal?.(goalId);\n  };\n\n  return (\n    <div\n      className={cn(\n        \"relative h-full rounded-3xl p-6\",\n        \"bg-white dark:bg-black/5\",\n        \"border border-zinc-200 dark:border-zinc-800\",\n        \"hover:border-zinc-300 dark:hover:border-zinc-700\",\n        \"transition-all duration-300\",\n        className,\n      )}\n    >\n      {/* Header */}\n      <div className=\"flex items-center gap-3 mb-6\">\n        <div className=\"p-2 rounded-full bg-zinc-100 dark:bg-zinc-800/50\">\n          <Activity className=\"w-5 h-5 text-[#FF2D55]\" />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold text-zinc-900 dark:text-white\">\n            {title}\n          </h3>\n          <p className=\"text-sm text-zinc-500 dark:text-zinc-400\">{category}</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-3 gap-4\">\n        {metrics.map((metric, index) => (\n          <div\n            key={metric.label}\n            className=\"relative flex flex-col items-center\"\n            onMouseEnter={() => setIsHovering(metric.label)}\n            onMouseLeave={() => setIsHovering(null)}\n          >\n            <div className=\"relative w-24 h-24\">\n              <div className=\"absolute inset-0 rounded-full border-4 border-zinc-200 dark:border-zinc-800/50\" />\n              <div\n                className={cn(\n                  \"absolute inset-0 rounded-full border-4 transition-all duration-500\",\n                  isHovering === metric.label && \"scale-105\",\n                )}\n                style={{\n                  borderColor:\n                    METRIC_COLORS[metric.label as keyof typeof METRIC_COLORS],\n                  clipPath: `polygon(0 0, 100% 0, 100% ${metric.trend}%, 0 ${metric.trend}%)`,\n                }}\n              />\n              <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                <span className=\"text-xl font-bold text-zinc-900 dark:text-white\">\n                  {metric.value}\n                </span>\n                <span className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                  {metric.unit}\n                </span>\n              </div>\n            </div>\n            <span className=\"mt-3 text-sm font-medium text-zinc-700 dark:text-zinc-300\">\n              {metric.label}\n            </span>\n            <span className=\"text-xs text-zinc-500\">{metric.trend}%</span>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"mt-8 space-y-6\">\n        <div className=\"h-px bg-linear-to-r from-transparent via-zinc-200 dark:via-zinc-800 to-transparent\" />\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"flex items-center gap-2 text-sm font-medium text-zinc-700 dark:text-zinc-300\">\n              <Target className=\"w-4 h-4\" />\n              Today&apos;s Goals\n            </h4>\n            <button\n              type=\"button\"\n              onClick={onAddGoal}\n              className=\"p-1.5 rounded-full hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors\"\n            >\n              <Plus className=\"w-4 h-4 text-zinc-500 dark:text-zinc-400\" />\n            </button>\n          </div>\n\n          <div className=\"space-y-2\">\n            {dailyGoals.map((goal) => (\n              <button\n                type=\"button\"\n                key={goal.id}\n                onClick={() => handleGoalToggle(goal.id)}\n                className={cn(\n                  \"w-full flex items-center gap-3 p-3 rounded-xl\",\n                  \"bg-zinc-50 dark:bg-zinc-900/50\",\n                  \"border border-zinc-200/50 dark:border-zinc-800/50\",\n                  \"hover:border-zinc-300/50 dark:hover:border-zinc-700/50\",\n                  \"transition-all\",\n                )}\n              >\n                <CheckCircle2\n                  className={cn(\n                    \"w-5 h-5\",\n                    goal.isCompleted\n                      ? \"text-emerald-500\"\n                      : \"text-zinc-400 dark:text-zinc-600\",\n                  )}\n                />\n                <span\n                  className={cn(\n                    \"text-sm text-left\",\n                    goal.isCompleted\n                      ? \"text-zinc-500 dark:text-zinc-400 line-through\"\n                      : \"text-zinc-700 dark:text-zinc-300\",\n                  )}\n                >\n                  {goal.title}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"pt-4 border-t border-zinc-200 dark:border-zinc-800\">\n          <button\n            type=\"button\"\n            onClick={onViewDetails}\n            className=\"inline-flex items-center gap-2 text-sm font-medium\n              text-zinc-600 hover:text-zinc-900 \n              dark:text-zinc-400 dark:hover:text-white\n              transition-colors duration-200\"\n          >\n            View Activity Details\n            <ArrowUpRight className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst INITIAL_METRICS: Metric[] = [\n  { label: \"Move\", value: \"420\", trend: 85, unit: \"cal\" },\n  { label: \"Exercise\", value: \"35\", trend: 70, unit: \"min\" },\n  { label: \"Stand\", value: \"10\", trend: 83, unit: \"hrs\" },\n];\n\nconst INITIAL_GOALS: Goal[] = [\n  { id: \"1\", title: \"30min Morning Yoga\", isCompleted: true },\n  { id: \"2\", title: \"10k Steps\", isCompleted: false },\n  { id: \"3\", title: \"Drink 2L Water\", isCompleted: true },\n];\n\nexport default function GoalTrackerCard() {\n  const [goals, setGoals] = useState<Goal[]>(INITIAL_GOALS);\n  const [metrics, setMetrics] = useState<Metric[]>(INITIAL_METRICS);\n\n  const handleToggleGoal = (goalId: string) => {\n    setGoals((prev) =>\n      prev.map((goal) =>\n        goal.id === goalId ? { ...goal, isCompleted: !goal.isCompleted } : goal,\n      ),\n    );\n  };\n\n  const handleAddGoal = () => {\n    const newGoal: Goal = {\n      id: `goal-${goals.length + 1}`,\n      title: `New Goal ${goals.length + 1}`,\n      isCompleted: false,\n    };\n    setGoals((prev) => [...prev, newGoal]);\n  };\n\n  const handleViewDetails = () => {\n    console.log(\"Viewing details\");\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-md mx-auto\">\n        <CardDetails\n          metrics={metrics}\n          dailyGoals={goals}\n          onAddGoal={handleAddGoal}\n          onToggleGoal={handleToggleGoal}\n          onViewDetails={handleViewDetails}\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/goal-tracker-card.tsx"
    }
  ]
}