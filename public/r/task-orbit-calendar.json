{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "task-orbit-calendar",
  "type": "registry:ui",
  "title": "Task Orbit Calendar",
  "description": "Orbital calendar view with tasks rotating around a central 'Today' hub.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "card",
    "popover",
    "button",
    "input"
  ],
  "files": [
    {
      "path": "registry/ruixenui/task-orbit-calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Trash2 } from \"lucide-react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  differenceInHours,\n  parseISO,\n  format,\n  addDays,\n  isBefore,\n  isAfter,\n} from \"date-fns\";\n\nexport type CalendarEvent = {\n  id: string;\n  title: string;\n  date: string; // ISO string\n};\n\ninterface TaskOrbitCalendarProps {\n  events: CalendarEvent[];\n  onAddEvent: (event: CalendarEvent) => void;\n  onRemoveEvent?: (id: string) => void;\n}\n\nexport function TaskOrbitCalendar({\n  events,\n  onAddEvent,\n  onRemoveEvent,\n}: TaskOrbitCalendarProps) {\n  const [newTitle, setNewTitle] = React.useState(\"\");\n  const [newDate, setNewDate] = React.useState(\"\");\n\n  const now = new Date();\n  const minDate = addDays(now, -7);\n  const maxDate = addDays(now, 7);\n\n  const handleAddEvent = () => {\n    if (!newTitle.trim() || !newDate) return;\n\n    const eventDate = parseISO(newDate);\n    if (isBefore(eventDate, minDate) || isAfter(eventDate, maxDate)) {\n      alert(\"Event date must be within Â±7 days from today\");\n      return;\n    }\n\n    onAddEvent({\n      id: uuidv4(),\n      title: newTitle.trim(),\n      date: newDate,\n    });\n    setNewTitle(\"\");\n    setNewDate(\"\");\n  };\n\n  const getOrbitDistance = (eventDate: string) => {\n    const hoursDiff = Math.max(differenceInHours(parseISO(eventDate), now), 0);\n    const maxDistance = 150;\n    const distance = Math.min(maxDistance, hoursDiff * 5 + 40); // closer events move inward\n    return distance;\n  };\n\n  return (\n    <div className=\"flex flex-col items-center space-y-4\">\n      {/* Central Today Circle */}\n      <div className=\"relative w-[400px] h-[400px] flex items-center justify-center rounded-full border border-gray-300 dark:border-gray-600\">\n        <div className=\"w-16 h-16 rounded-full bg-blue-500 flex items-center justify-center text-white font-semibold\">\n          Today\n        </div>\n\n        {/* Orbiting Events */}\n        {events.map((event, i) => {\n          const angle = (i / events.length) * 360;\n          const distance = getOrbitDistance(event.date);\n          return (\n            <Popover key={event.id}>\n              <PopoverTrigger asChild>\n                <div\n                  className=\"absolute w-8 h-8 bg-green-400 dark:bg-green-600 rounded-full flex items-center justify-center text-xs text-white cursor-pointer\"\n                  style={{\n                    transform: `rotate(${angle}deg) translate(${distance}px) rotate(-${angle}deg)`,\n                  }}\n                >\n                  {format(parseISO(event.date), \"HH:mm\")}\n                </div>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-48\">\n                <Card>\n                  <CardContent className=\"flex justify-between items-center p-2 text-sm\">\n                    <span>{event.title}</span>\n                    {onRemoveEvent && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-4 w-4\"\n                        onClick={() => onRemoveEvent(event.id)}\n                      >\n                        <Trash2 className=\"h-3 w-3 text-red-500\" />\n                      </Button>\n                    )}\n                  </CardContent>\n                </Card>\n              </PopoverContent>\n            </Popover>\n          );\n        })}\n      </div>\n\n      {/* Add Event */}\n      <div className=\"flex flex-col items-center gap-2\">\n        <div className=\"flex gap-2 items-center\">\n          <Input\n            placeholder=\"Event title\"\n            value={newTitle}\n            onChange={(e) => setNewTitle(e.target.value)}\n          />\n          <Input\n            type=\"datetime-local\"\n            value={newDate}\n            onChange={(e) => setNewDate(e.target.value)}\n          />\n          <Button onClick={handleAddEvent}>Add Event</Button>\n        </div>\n        <p className=\"text-xs text-muted-foreground\">\n          Event date must be within 7 days before or after today\n        </p>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/task-orbit-calendar.tsx"
    }
  ]
}