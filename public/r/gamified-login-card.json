{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "gamified-login-card",
  "type": "registry:ui",
  "title": "Gamified Login Card",
  "description": "Interactive login card with confetti celebration animation on successful login.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/ruixenui/gamified-login-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport interface LoginInput {\n  id: string;\n  type: string;\n  label: string;\n  placeholder?: string;\n}\n\ninterface GamifiedLoginCardProps {\n  title?: string;\n  successMessage?: string;\n  inputs?: LoginInput[];\n  buttonText?: string;\n  confettiColors?: string[];\n  confettiCount?: number;\n  className?: string;\n  onChange?: (values: Record<string, string>) => void;\n  onSubmit?: (values: Record<string, string>) => void;\n}\n\ninterface ConfettiParticle {\n  id: number;\n  x: number;\n  y: number;\n  rotate: number;\n  color: string;\n}\n\nexport default function GamifiedLoginCard({\n  title = \"Sign In\",\n  successMessage = \"Welcome!\",\n  inputs = [\n    {\n      id: \"email\",\n      type: \"email\",\n      label: \"Email\",\n      placeholder: \"you@example.com\",\n    },\n    {\n      id: \"password\",\n      type: \"password\",\n      label: \"Password\",\n      placeholder: \"********\",\n    },\n  ],\n  buttonText = \"Login\",\n  confettiColors = [\"#facc15\", \"#22c55e\", \"#3b82f6\", \"#f472b6\", \"#f97316\"],\n  confettiCount = 30,\n  className,\n  onChange,\n  onSubmit,\n}: GamifiedLoginCardProps) {\n  const [values, setValues] = React.useState<Record<string, string>>(\n    inputs.reduce(\n      (acc, input) => {\n        acc[input.id] = \"\";\n        return acc;\n      },\n      {} as Record<string, string>,\n    ),\n  );\n  const [success, setSuccess] = React.useState(false);\n  const [particles, setParticles] = React.useState<ConfettiParticle[]>([]);\n\n  const handleChange = (id: string, value: string) => {\n    const newValues = { ...values, [id]: value };\n    setValues(newValues);\n    onChange?.(newValues);\n  };\n\n  const handleLogin = () => {\n    if (Object.values(values).some((v) => !v)) return; // All fields must have input\n\n    onSubmit?.(values);\n\n    // Trigger confetti\n    const newParticles: ConfettiParticle[] = Array.from({\n      length: confettiCount,\n    }).map((_, i) => ({\n      id: Date.now() + i,\n      x: 0,\n      y: 0,\n      rotate: Math.random() * 360,\n      color: confettiColors[Math.floor(Math.random() * confettiColors.length)],\n    }));\n    setParticles(newParticles);\n    setSuccess(true);\n\n    setTimeout(() => setParticles([]), 1000);\n  };\n\n  return (\n    <div\n      className={`relative w-full min-h-screen flex items-center justify-center overflow-hidden ${className || \"\"}`}\n    >\n      {/* Confetti */}\n      <AnimatePresence>\n        {particles.map((p) => (\n          <motion.div\n            key={p.id}\n            className=\"absolute w-3 h-3 rounded-full\"\n            style={{ backgroundColor: p.color }}\n            initial={{ x: 0, y: 0, scale: 1, opacity: 1, rotate: p.rotate }}\n            animate={{\n              x: (Math.random() - 0.5) * 150,\n              y: -Math.random() * 200,\n              scale: 0,\n              opacity: 0,\n              rotate: p.rotate + Math.random() * 360,\n            }}\n            transition={{ duration: 1, ease: \"easeOut\" }}\n          />\n        ))}\n      </AnimatePresence>\n\n      {/* Login Card */}\n      <motion.div\n        initial={{ scale: 0.95, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        className=\"relative z-10 w-full max-w-md bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-8 flex flex-col gap-6\"\n      >\n        <h2 className=\"text-3xl font-bold text-center text-gray-900 dark:text-gray-100\">\n          {success ? successMessage : title}\n        </h2>\n\n        <div className=\"flex flex-col gap-4 mt-2\">\n          {inputs.map((input) => (\n            <div key={input.id}>\n              <Label htmlFor={input.id}>{input.label}</Label>\n              <Input\n                id={input.id}\n                type={input.type}\n                placeholder={input.placeholder}\n                value={values[input.id]}\n                onChange={(e) => handleChange(input.id, e.target.value)}\n                className=\"hover:scale-105 transition-transform duration-200\"\n              />\n            </div>\n          ))}\n        </div>\n\n        <Button\n          className=\"w-full mt-4 hover:scale-110 transition-transform duration-200\"\n          onClick={handleLogin}\n        >\n          {success ? \"Logged In!\" : buttonText}\n        </Button>\n\n        {!success && (\n          <p className=\"text-center text-sm text-gray-500 dark:text-gray-300 mt-2\">\n            Donâ€™t have an account?{\" \"}\n            <a href=\"#\" className=\"text-purple-500 hover:underline\">\n              Sign up\n            </a>\n          </p>\n        )}\n      </motion.div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/gamified-login-card.tsx"
    }
  ]
}