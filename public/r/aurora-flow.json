{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "aurora-flow",
  "type": "registry:ui",
  "title": "Aurora Flow",
  "description": "A beautiful aurora-style background with flowing gradients and noise effects.",
  "dependencies": [
    "ogl"
  ],
  "files": [
    {
      "path": "registry/ruixenui/aurora-flow.tsx",
      "content": "\"use client\";\n\nimport { useRef, useEffect } from \"react\";\nimport { Renderer, Program, Mesh, Triangle, Vec2 } from \"ogl\";\n\nconst vertex = `\nattribute vec2 position;\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\nconst fragment = `\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 uResolution;\nuniform float uTime;\n\n#define PI 3.14159265359\n\n// Simplex-style noise (fast fake)\nfloat hash(vec2 p) {\n    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    float a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix(a, b, u.x) +\n           (c - a)*u.y*(1.0 - u.x) +\n           (d - b)*u.x*u.y;\n}\n\n// Gradient palette\nvec3 gradient(float t) {\n    return mix(vec3(0.2, 0.0, 0.4), vec3(0.0, 1.0, 0.7), t);\n}\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / uResolution.xy;\n    uv -= 0.5;\n    uv.x *= uResolution.x / uResolution.y;\n\n    // Distort UVs with animated noise\n    float n = noise(uv * 2.0 + uTime * 0.15);\n    float m = noise(uv * 4.0 - uTime * 0.1);\n\n    float t = 0.5 + 0.5 * sin(uTime * 0.3 + n * 2.5);\n    vec3 col = gradient(t + m * 0.3);\n\n    // Soft glow effect\n    float d = length(uv);\n    col += 0.15 / (d * 3.0 + 0.2);\n\n    gl_FragColor = vec4(col, 1.0);\n}\n`;\n\ntype Props = {\n  resolutionScale?: number;\n};\n\nexport default function AuroraFlow({ resolutionScale = 1.0 }: Props) {\n  const ref = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = ref.current as HTMLCanvasElement;\n    const parent = canvas.parentElement as HTMLElement;\n\n    const renderer = new Renderer({\n      dpr: Math.min(window.devicePixelRatio, 2),\n      canvas,\n    });\n\n    const gl = renderer.gl;\n    const geometry = new Triangle(gl);\n\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        uTime: { value: 0 },\n        uResolution: { value: new Vec2() },\n      },\n    });\n\n    const mesh = new Mesh(gl, { geometry, program });\n\n    const resize = () => {\n      const w = parent.clientWidth,\n        h = parent.clientHeight;\n      renderer.setSize(w * resolutionScale, h * resolutionScale);\n      program.uniforms.uResolution.value.set(w, h);\n    };\n\n    window.addEventListener(\"resize\", resize);\n    resize();\n\n    const start = performance.now();\n    let frame = 0;\n\n    const loop = () => {\n      program.uniforms.uTime.value = (performance.now() - start) / 1000;\n      renderer.render({ scene: mesh });\n      frame = requestAnimationFrame(loop);\n    };\n\n    loop();\n\n    return () => {\n      cancelAnimationFrame(frame);\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, [resolutionScale]);\n\n  return <canvas ref={ref} className=\"w-full h-full block\" />;\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/aurora-flow.tsx"
    }
  ]
}