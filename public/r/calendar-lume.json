{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar-lume",
  "type": "registry:ui",
  "title": "Calendar Lume",
  "description": "An animated calendar with year/month/day step navigation and smooth transitions.",
  "dependencies": [
    "date-fns",
    "framer-motion"
  ],
  "registryDependencies": [
    "calendar",
    "button",
    "scroll-area"
  ],
  "files": [
    {
      "path": "registry/ruixenui/calendar-lume.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport {\n  format,\n  eachYearOfInterval,\n  startOfYear,\n  endOfYear,\n  eachMonthOfInterval,\n} from \"date-fns\";\nimport { Calendar as BaseCalendar } from \"@/components/ui/calendar\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport type CalendarLumeProps = {\n  startYear?: number;\n  endYear?: number;\n  initialDate?: Date;\n  onChange?: (date: Date | undefined) => void;\n  className?: string;\n  showYearSelector?: boolean;\n  showMonthSelector?: boolean;\n};\n\nexport function CalendarLume({\n  startYear = 1900,\n  endYear = 2100,\n  initialDate,\n  onChange,\n  className,\n  showYearSelector = true,\n  showMonthSelector = true,\n}: CalendarLumeProps) {\n  const today = new Date();\n  const initDate = initialDate ?? today;\n\n  const [step, setStep] = useState<\"year\" | \"month\" | \"day\">(\n    showYearSelector ? \"year\" : showMonthSelector ? \"month\" : \"day\",\n  );\n  const [selectedYear, setSelectedYear] = useState<number>(\n    initDate.getFullYear(),\n  );\n  const [selectedMonth, setSelectedMonth] = useState<number>(\n    initDate.getMonth(),\n  );\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(initDate);\n\n  const yearRange = eachYearOfInterval({\n    start: startOfYear(new Date(startYear, 0, 1)),\n    end: endOfYear(new Date(endYear, 11, 31)),\n  });\n\n  const handleSelectDate = (date: Date | undefined) => {\n    setSelectedDate(date);\n    if (onChange) onChange(date);\n  };\n\n  return (\n    <div\n      className={`rounded-xl bg-background/80 backdrop-blur-md ${className ?? \"w-[380px]\"}`}\n    >\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-3\">\n        <h2 className=\"font-semibold text-lg\">\n          {step === \"year\" && \"Select a Year\"}\n          {step === \"month\" && `Year ${selectedYear}`}\n          {step === \"day\" && format(selectedDate ?? today, \"MMMM yyyy\")}\n        </h2>\n\n        {/* Breadcrumb buttons */}\n        <div className=\"flex gap-2\">\n          {showYearSelector && (\n            <Button\n              variant={step === \"year\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setStep(\"year\")}\n            >\n              Year\n            </Button>\n          )}\n          {showMonthSelector && (\n            <Button\n              variant={step === \"month\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setStep(\"month\")}\n              disabled={step === \"year\"}\n            >\n              Month\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <AnimatePresence mode=\"wait\">\n        {/* Year Selection */}\n        {step === \"year\" && (\n          <motion.div\n            key=\"year\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"h-80\"\n          >\n            <ScrollArea className=\"h-full\">\n              <div className=\"grid grid-cols-3 gap-2\">\n                {yearRange.map((year) => (\n                  <Button\n                    key={year.getFullYear()}\n                    variant={\n                      year.getFullYear() === selectedYear\n                        ? \"default\"\n                        : \"outline\"\n                    }\n                    size=\"sm\"\n                    className=\"h-10\"\n                    onClick={() => {\n                      setSelectedYear(year.getFullYear());\n                      setStep(\"month\");\n                    }}\n                  >\n                    {year.getFullYear()}\n                  </Button>\n                ))}\n              </div>\n            </ScrollArea>\n          </motion.div>\n        )}\n\n        {/* Month Selection */}\n        {step === \"month\" && (\n          <motion.div\n            key=\"month\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"grid grid-cols-3 gap-2\"\n          >\n            {eachMonthOfInterval({\n              start: startOfYear(new Date(selectedYear, 0, 1)),\n              end: endOfYear(new Date(selectedYear, 11, 31)),\n            }).map((month) => (\n              <Button\n                key={month.toISOString()}\n                variant={\n                  month.getMonth() === selectedMonth ? \"default\" : \"outline\"\n                }\n                size=\"sm\"\n                className=\"h-12 flex flex-col\"\n                onClick={() => {\n                  setSelectedMonth(month.getMonth());\n                  setStep(\"day\");\n                  handleSelectDate(new Date(selectedYear, month.getMonth(), 1));\n                }}\n              >\n                <span className=\"text-sm font-medium\">\n                  {format(month, \"MMM\")}\n                </span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {selectedYear}\n                </span>\n              </Button>\n            ))}\n          </motion.div>\n        )}\n\n        {/* Day Selection */}\n        {step === \"day\" && (\n          <motion.div\n            key=\"day\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n          >\n            <BaseCalendar\n              mode=\"single\"\n              month={new Date(selectedYear, selectedMonth, 1)}\n              selected={selectedDate}\n              onSelect={handleSelectDate}\n              onMonthChange={(date) => {\n                setSelectedYear(date.getFullYear());\n                setSelectedMonth(date.getMonth());\n              }}\n              className=\"rounded-lg border border-border bg-card mx-auto\"\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/calendar-lume.tsx"
    }
  ]
}