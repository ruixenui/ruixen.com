{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar-lume",
  "type": "registry:ui",
  "title": "Calendar Lume",
  "description": "An animated calendar with year/month/day step navigation and smooth transitions.",
  "dependencies": [
    "date-fns",
    "framer-motion"
  ],
  "registryDependencies": [
    "calendar",
    "button",
    "scroll-area"
  ],
  "files": [
    {
      "path": "registry/ruixenui/calendar-lume.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport {\r\n  format,\r\n  eachYearOfInterval,\r\n  startOfYear,\r\n  endOfYear,\r\n  eachMonthOfInterval,\r\n} from \"date-fns\";\r\nimport { Calendar as BaseCalendar } from \"@/components/ui/calendar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\n\r\nexport type CalendarLumeProps = {\r\n  startYear?: number;\r\n  endYear?: number;\r\n  initialDate?: Date;\r\n  onChange?: (date: Date | undefined) => void;\r\n  className?: string;\r\n  showYearSelector?: boolean;\r\n  showMonthSelector?: boolean;\r\n};\r\n\r\nexport function CalendarLume({\r\n  startYear = 1900,\r\n  endYear = 2100,\r\n  initialDate,\r\n  onChange,\r\n  className,\r\n  showYearSelector = true,\r\n  showMonthSelector = true,\r\n}: CalendarLumeProps) {\r\n  const today = new Date();\r\n  const initDate = initialDate ?? today;\r\n\r\n  const [step, setStep] = useState<\"year\" | \"month\" | \"day\">(\r\n    showYearSelector ? \"year\" : showMonthSelector ? \"month\" : \"day\"\r\n  );\r\n  const [selectedYear, setSelectedYear] = useState<number>(initDate.getFullYear());\r\n  const [selectedMonth, setSelectedMonth] = useState<number>(initDate.getMonth());\r\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(initDate);\r\n\r\n  const yearRange = eachYearOfInterval({\r\n    start: startOfYear(new Date(startYear, 0, 1)),\r\n    end: endOfYear(new Date(endYear, 11, 31)),\r\n  });\r\n\r\n  const handleSelectDate = (date: Date | undefined) => {\r\n    setSelectedDate(date);\r\n    if (onChange) onChange(date);\r\n  };\r\n\r\n  return (\r\n    <div className={`rounded-xl bg-background/80 backdrop-blur-md ${className ?? \"w-[380px]\"}`}>\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center mb-3\">\r\n        <h2 className=\"font-semibold text-lg\">\r\n          {step === \"year\" && \"Select a Year\"}\r\n          {step === \"month\" && `Year ${selectedYear}`}\r\n          {step === \"day\" && format(selectedDate ?? today, \"MMMM yyyy\")}\r\n        </h2>\r\n\r\n        {/* Breadcrumb buttons */}\r\n        <div className=\"flex gap-2\">\r\n          {showYearSelector && (\r\n            <Button\r\n              variant={step === \"year\" ? \"default\" : \"outline\"}\r\n              size=\"sm\"\r\n              onClick={() => setStep(\"year\")}\r\n            >\r\n              Year\r\n            </Button>\r\n          )}\r\n          {showMonthSelector && (\r\n            <Button\r\n              variant={step === \"month\" ? \"default\" : \"outline\"}\r\n              size=\"sm\"\r\n              onClick={() => setStep(\"month\")}\r\n              disabled={step === \"year\"}\r\n            >\r\n              Month\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <AnimatePresence mode=\"wait\">\r\n        {/* Year Selection */}\r\n        {step === \"year\" && (\r\n          <motion.div\r\n            key=\"year\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"h-80\"\r\n          >\r\n            <ScrollArea className=\"h-full\">\r\n              <div className=\"grid grid-cols-3 gap-2\">\r\n                {yearRange.map((year) => (\r\n                  <Button\r\n                    key={year.getFullYear()}\r\n                    variant={year.getFullYear() === selectedYear ? \"default\" : \"outline\"}\r\n                    size=\"sm\"\r\n                    className=\"h-10\"\r\n                    onClick={() => {\r\n                      setSelectedYear(year.getFullYear());\r\n                      setStep(\"month\");\r\n                    }}\r\n                  >\r\n                    {year.getFullYear()}\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </ScrollArea>\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* Month Selection */}\r\n        {step === \"month\" && (\r\n          <motion.div\r\n            key=\"month\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"grid grid-cols-3 gap-2\"\r\n          >\r\n            {eachMonthOfInterval({\r\n              start: startOfYear(new Date(selectedYear, 0, 1)),\r\n              end: endOfYear(new Date(selectedYear, 11, 31)),\r\n            }).map((month) => (\r\n              <Button\r\n                key={month.toISOString()}\r\n                variant={month.getMonth() === selectedMonth ? \"default\" : \"outline\"}\r\n                size=\"sm\"\r\n                className=\"h-12 flex flex-col\"\r\n                onClick={() => {\r\n                  setSelectedMonth(month.getMonth());\r\n                  setStep(\"day\");\r\n                  handleSelectDate(new Date(selectedYear, month.getMonth(), 1));\r\n                }}\r\n              >\r\n                <span className=\"text-sm font-medium\">{format(month, \"MMM\")}</span>\r\n                <span className=\"text-xs text-muted-foreground\">{selectedYear}</span>\r\n              </Button>\r\n            ))}\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* Day Selection */}\r\n        {step === \"day\" && (\r\n          <motion.div\r\n            key=\"day\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n          >\r\n            <BaseCalendar\r\n              mode=\"single\"\r\n              month={new Date(selectedYear, selectedMonth, 1)}\r\n              selected={selectedDate}\r\n              onSelect={handleSelectDate}\r\n              onMonthChange={(date) => {\r\n                setSelectedYear(date.getFullYear());\r\n                setSelectedMonth(date.getMonth());\r\n              }}\r\n              className=\"rounded-lg border border-border bg-card mx-auto\"\r\n            />\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/calendar-lume.tsx"
    }
  ]
}