{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "heatmap-calendar",
  "type": "registry:ui",
  "title": "Heatmap Calendar",
  "description": "GitHub-style heatmap calendar showing event intensity with color gradients.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "card",
    "popover",
    "button",
    "input"
  ],
  "files": [
    {
      "path": "registry/ruixenui/heatmap-calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Trash2 } from \"lucide-react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval } from \"date-fns\";\n\nexport type CalendarEvent = {\n  id: string;\n  title: string;\n  date: string; // ISO string\n};\n\ninterface HeatmapCalendarProps {\n  events: CalendarEvent[];\n  onAddEvent: (event: CalendarEvent) => void;\n  onRemoveEvent?: (id: string) => void;\n}\n\nexport function HeatmapCalendar({\n  events,\n  onAddEvent,\n  onRemoveEvent,\n}: HeatmapCalendarProps) {\n  const [selectedDate, setSelectedDate] = React.useState<Date>(new Date());\n  const [newTitle, setNewTitle] = React.useState(\"\");\n\n  const handleAddEvent = () => {\n    if (!selectedDate || !newTitle.trim()) return;\n    onAddEvent({\n      id: uuidv4(),\n      title: newTitle.trim(),\n      date: selectedDate.toISOString(),\n    });\n    setNewTitle(\"\");\n  };\n\n  // Only days in current month\n  const daysInMonth = eachDayOfInterval({\n    start: startOfMonth(selectedDate),\n    end: endOfMonth(selectedDate),\n  });\n\n  // Count events per day\n  const eventsCount = (date: Date) =>\n    events.filter(\n      (e) =>\n        format(new Date(e.date), \"yyyy-MM-dd\") === format(date, \"yyyy-MM-dd\"),\n    );\n\n  const getIntensityColor = (count: number) => {\n    if (count === 0) return \"bg-gray-100 dark:bg-gray-700\";\n    if (count === 1) return \"bg-green-200 dark:bg-green-800\";\n    if (count === 2) return \"bg-green-400 dark:bg-green-700\";\n    if (count >= 3) return \"bg-green-600 dark:bg-green-600\";\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">\n        {format(selectedDate, \"MMMM yyyy\")}\n      </h2>\n\n      {/* Heatmap grid */}\n      <div className=\"grid grid-cols-7 gap-1 mt-2\">\n        {daysInMonth.map((day) => {\n          const dayEvents = eventsCount(day);\n          return (\n            <Popover key={day.toISOString()}>\n              <PopoverTrigger asChild>\n                <div\n                  className={`w-10 h-10 rounded cursor-pointer flex items-center justify-center ${getIntensityColor(\n                    dayEvents.length,\n                  )}`}\n                  onClick={() => setSelectedDate(day)}\n                >\n                  <span className=\"text-xs\">{day.getDate()}</span>\n                </div>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-48\">\n                <Card>\n                  <CardContent className=\"space-y-1 p-2\">\n                    <h3 className=\"font-medium text-sm\">\n                      {format(day, \"PPP\")}\n                    </h3>\n                    {dayEvents.length === 0 && (\n                      <p className=\"text-xs text-muted-foreground\">No events</p>\n                    )}\n                    {dayEvents.map((event) => (\n                      <div\n                        key={event.id}\n                        className=\"flex justify-between items-center text-xs\"\n                      >\n                        <span>{event.title}</span>\n                        {onRemoveEvent && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-4 w-4\"\n                            onClick={() => onRemoveEvent(event.id)}\n                          >\n                            <Trash2 className=\"h-3 w-3 text-red-500\" />\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </PopoverContent>\n            </Popover>\n          );\n        })}\n      </div>\n\n      {/* Add new event */}\n      {selectedDate && (\n        <div className=\"flex gap-2 mt-4 items-center\">\n          <Input\n            placeholder=\"New event title\"\n            value={newTitle}\n            onChange={(e) => setNewTitle(e.target.value)}\n          />\n          <Button onClick={handleAddEvent}>Add Event</Button>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/heatmap-calendar.tsx"
    }
  ]
}