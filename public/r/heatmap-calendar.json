{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "heatmap-calendar",
  "type": "registry:ui",
  "title": "Heatmap Calendar",
  "description": "GitHub-style heatmap calendar showing event intensity with color gradients.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "uuid"
  ],
  "registryDependencies": [
    "card",
    "popover",
    "button",
    "input"
  ],
  "files": [
    {
      "path": "registry/ruixenui/heatmap-calendar.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Card, CardContent } from \"@/components/ui/card\"\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Trash2 } from \"lucide-react\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval } from \"date-fns\"\r\n\r\nexport type CalendarEvent = {\r\n  id: string\r\n  title: string\r\n  date: string // ISO string\r\n}\r\n\r\ninterface HeatmapCalendarProps {\r\n  events: CalendarEvent[]\r\n  onAddEvent: (event: CalendarEvent) => void\r\n  onRemoveEvent?: (id: string) => void\r\n}\r\n\r\nexport function HeatmapCalendar({ events, onAddEvent, onRemoveEvent }: HeatmapCalendarProps) {\r\n  const [selectedDate, setSelectedDate] = React.useState<Date>(new Date())\r\n  const [newTitle, setNewTitle] = React.useState(\"\")\r\n\r\n  const handleAddEvent = () => {\r\n    if (!selectedDate || !newTitle.trim()) return\r\n    onAddEvent({\r\n      id: uuidv4(),\r\n      title: newTitle.trim(),\r\n      date: selectedDate.toISOString(),\r\n    })\r\n    setNewTitle(\"\")\r\n  }\r\n\r\n  // Only days in current month\r\n  const daysInMonth = eachDayOfInterval({\r\n    start: startOfMonth(selectedDate),\r\n    end: endOfMonth(selectedDate),\r\n  })\r\n\r\n  // Count events per day\r\n  const eventsCount = (date: Date) =>\r\n    events.filter(\r\n      (e) => format(new Date(e.date), \"yyyy-MM-dd\") === format(date, \"yyyy-MM-dd\")\r\n    )\r\n\r\n  const getIntensityColor = (count: number) => {\r\n    if (count === 0) return \"bg-gray-100 dark:bg-gray-700\"\r\n    if (count === 1) return \"bg-green-200 dark:bg-green-800\"\r\n    if (count === 2) return \"bg-green-400 dark:bg-green-700\"\r\n    if (count >= 3) return \"bg-green-600 dark:bg-green-600\"\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <h2 className=\"text-lg font-semibold\">{format(selectedDate, \"MMMM yyyy\")}</h2>\r\n\r\n      {/* Heatmap grid */}\r\n      <div className=\"grid grid-cols-7 gap-1 mt-2\">\r\n        {daysInMonth.map((day) => {\r\n          const dayEvents = eventsCount(day)\r\n          return (\r\n            <Popover key={day.toISOString()}>\r\n              <PopoverTrigger asChild>\r\n                <div\r\n                  className={`w-10 h-10 rounded cursor-pointer flex items-center justify-center ${getIntensityColor(\r\n                    dayEvents.length\r\n                  )}`}\r\n                  onClick={() => setSelectedDate(day)}\r\n                >\r\n                  <span className=\"text-xs\">{day.getDate()}</span>\r\n                </div>\r\n              </PopoverTrigger>\r\n              <PopoverContent className=\"w-48\">\r\n                <Card>\r\n                  <CardContent className=\"space-y-1 p-2\">\r\n                    <h3 className=\"font-medium text-sm\">{format(day, \"PPP\")}</h3>\r\n                    {dayEvents.length === 0 && (\r\n                      <p className=\"text-xs text-muted-foreground\">No events</p>\r\n                    )}\r\n                    {dayEvents.map((event) => (\r\n                      <div\r\n                        key={event.id}\r\n                        className=\"flex justify-between items-center text-xs\"\r\n                      >\r\n                        <span>{event.title}</span>\r\n                        {onRemoveEvent && (\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"icon\"\r\n                            className=\"h-4 w-4\"\r\n                            onClick={() => onRemoveEvent(event.id)}\r\n                          >\r\n                            <Trash2 className=\"h-3 w-3 text-red-500\" />\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                  </CardContent>\r\n                </Card>\r\n              </PopoverContent>\r\n            </Popover>\r\n          )\r\n        })}\r\n      </div>\r\n\r\n      {/* Add new event */}\r\n      {selectedDate && (\r\n        <div className=\"flex gap-2 mt-4 items-center\">\r\n          <Input\r\n            placeholder=\"New event title\"\r\n            value={newTitle}\r\n            onChange={(e) => setNewTitle(e.target.value)}\r\n          />\r\n          <Button onClick={handleAddEvent}>Add Event</Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ruixen/heatmap-calendar.tsx"
    }
  ]
}