{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "voice-message-bubble",
  "type": "registry:ui",
  "title": "Voice Message Bubble",
  "description": "Chat-style voice message bubble with waveform visualization and playback controls.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ruixenui/voice-message-bubble.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Pause } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface VoiceMessageBubbleProps {\n  audioSrc: string;\n  duration: number; // in seconds\n  bubbleColor?: string;\n  waveColor?: string;\n  className?: string;\n}\n\nexport default function VoiceMessageBubble({\n  audioSrc,\n  duration,\n  bubbleColor = \"#fff\",\n  waveColor = \"#000\",\n  className,\n}: VoiceMessageBubbleProps) {\n  const [audio, setAudio] = React.useState<HTMLAudioElement | null>(null);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    // Only create Audio instance on client side\n    if (typeof window !== \"undefined\") {\n      const audioElement = new Audio(audioSrc);\n      setAudio(audioElement);\n\n      const handleTimeUpdate = () => {\n        setProgress((audioElement.currentTime / audioElement.duration) * 100);\n      };\n\n      audioElement.addEventListener(\"timeupdate\", handleTimeUpdate);\n      return () => {\n        audioElement.removeEventListener(\"timeupdate\", handleTimeUpdate);\n        audioElement.pause();\n      };\n    }\n  }, [audioSrc]);\n\n  const togglePlay = () => {\n    if (!audio) return;\n    if (isPlaying) audio.pause();\n    else audio.play();\n    setIsPlaying(!isPlaying);\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center gap-3 p-3 rounded-xl shadow-sm\",\n        className,\n      )}\n      style={{ backgroundColor: bubbleColor }}\n    >\n      {/* Play/Pause Button */}\n      <Button\n        variant=\"outline\"\n        className=\"p-2 rounded-full\"\n        onClick={togglePlay}\n      >\n        {isPlaying ? (\n          <Pause className=\"w-4 h-4\" />\n        ) : (\n          <Play className=\"w-4 h-4\" />\n        )}\n      </Button>\n\n      {/* Waveform */}\n      <div\n        className=\"flex-1 h-6 relative cursor-pointer\"\n        onClick={(e) => {\n          if (!audio) return;\n          const rect = (e.target as HTMLDivElement).getBoundingClientRect();\n          const clickX = e.clientX - rect.left;\n          audio.currentTime = (clickX / rect.width) * audio.duration;\n        }}\n      >\n        <div className=\"absolute inset-0 flex justify-between items-center px-0.5\">\n          {Array.from({ length: 30 }).map((_, idx) => (\n            <div\n              key={idx}\n              className=\"rounded-sm\"\n              style={{\n                width: 2,\n                height: `${4 + Math.random() * 12}px`,\n                backgroundColor: waveColor,\n              }}\n            />\n          ))}\n        </div>\n\n        {/* Progress Overlay */}\n        <div\n          className=\"absolute top-0 left-0 h-full rounded-sm\"\n          style={{\n            width: `${progress}%`,\n            backgroundColor: waveColor,\n            opacity: 0.3,\n          }}\n        />\n      </div>\n\n      {/* Duration */}\n      <span\n        className={cn(\n          \"text-sm font-mono\",\n          waveColor === \"#fff\" ? \"text-white\" : \"text-black\",\n        )}\n      >\n        {duration}s\n      </span>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ruixen/voice-message-bubble.tsx"
    }
  ]
}